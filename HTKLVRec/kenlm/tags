!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_PROGRAM_AUTHOR	Darren Hiebert	/dhiebert@users.sourceforge.net/
!_TAG_PROGRAM_NAME	Exuberant Ctags	//
!_TAG_PROGRAM_URL	http://ctags.sourceforge.net	/official site/
!_TAG_PROGRAM_VERSION	5.8	//
ALIGN8	lm/binary_format.hh	39;"	d
ALL	lm/config.hh	/^  enum ARPALoadComplain {ALL, EXPENSIVE, NONE};$/;"	e	enum:lm::ngram::Config::ARPALoadComplain
ALLOW_HEX	util/double-conversion/double-conversion.h	/^    ALLOW_HEX = 1,$/;"	e	enum:double_conversion::StringToDoubleConverter::Flags
ALLOW_LEADING_SPACES	util/double-conversion/double-conversion.h	/^    ALLOW_LEADING_SPACES = 8,$/;"	e	enum:double_conversion::StringToDoubleConverter::Flags
ALLOW_OCTALS	util/double-conversion/double-conversion.h	/^    ALLOW_OCTALS = 2,$/;"	e	enum:double_conversion::StringToDoubleConverter::Flags
ALLOW_SPACES_AFTER_SIGN	util/double-conversion/double-conversion.h	/^    ALLOW_SPACES_AFTER_SIGN = 32$/;"	e	enum:double_conversion::StringToDoubleConverter::Flags
ALLOW_TRAILING_JUNK	util/double-conversion/double-conversion.h	/^    ALLOW_TRAILING_JUNK = 4,$/;"	e	enum:double_conversion::StringToDoubleConverter::Flags
ALLOW_TRAILING_SPACES	util/double-conversion/double-conversion.h	/^    ALLOW_TRAILING_SPACES = 16,$/;"	e	enum:double_conversion::StringToDoubleConverter::Flags
ARPAFormat	lm/filter/format.hh	/^struct ARPAFormat {$/;"	s	namespace:lm
ARPAInputException	lm/filter/arpa_io.cc	/^ARPAInputException::ARPAInputException(const StringPiece &message) throw() {$/;"	f	class:lm::ARPAInputException
ARPAInputException	lm/filter/arpa_io.cc	/^ARPAInputException::ARPAInputException(const StringPiece &message, const StringPiece &line) throw() {$/;"	f	class:lm::ARPAInputException
ARPAInputException	lm/filter/arpa_io.hh	/^class ARPAInputException : public util::Exception {$/;"	c	namespace:lm
ARPALoadComplain	lm/config.hh	/^  enum ARPALoadComplain {ALL, EXPENSIVE, NONE};$/;"	g	struct:lm::ngram::Config
ARPAOutput	lm/filter/arpa_io.cc	/^ARPAOutput::ARPAOutput(const char *name, size_t buffer_size) : file_name_(name), buffer_(new char[buffer_size]) {$/;"	f	class:lm::ARPAOutput
ARPAOutput	lm/filter/arpa_io.hh	/^class ARPAOutput : boost::noncopyable {$/;"	c	namespace:lm
ARPAOutputException	lm/filter/arpa_io.cc	/^ARPAOutputException::ARPAOutputException(const char *message, const std::string &file_name) throw() {$/;"	f	class:lm::ARPAOutputException
ARPAOutputException	lm/filter/arpa_io.hh	/^class ARPAOutputException : public util::ErrnoException {$/;"	c	namespace:lm
ARPAToStream	lm/interpolate/arpa_to_stream.cc	/^ARPAToStream::ARPAToStream(int fd, ngram::GrowableVocab<ngram::WriteUniqueWords> &vocab)$/;"	f	class:lm::interpolate::ARPAToStream
ARPAToStream	lm/interpolate/arpa_to_stream.hh	/^class ARPAToStream {$/;"	c	namespace:lm::interpolate
ARRAY_ALLOCATED	util/mmap.hh	/^    typedef enum {MMAP_ALLOCATED, ARRAY_ALLOCATED, MALLOC_ALLOCATED, NONE_ALLOCATED} Alloc;$/;"	e	enum:util::scoped_memory::__anon37
ARRAY_SIZE	util/double-conversion/utils.h	104;"	d
ARRAY_TRIE	lm/model_type.hh	/^typedef enum {PROBING=0, REST_PROBING=1, TRIE=2, QUANT_TRIE=3, ARRAY_TRIE=4, QUANT_ARRAY_TRIE=5} ModelType;$/;"	e	enum:lm::ngram::__anon16
ARRAY_TRIE_SORTED	lm/model_type.hh	/^const ModelType ARRAY_TRIE_SORTED = ARRAY_TRIE;$/;"	m	namespace:lm::ngram
ASSERT	util/double-conversion/utils.h	36;"	d
ATTEMPTS_MIN	util/file.cc	384;"	d	file:
Activate	util/stream/multi_progress.cc	/^void MultiProgress::Activate() {$/;"	f	class:util::stream::MultiProgress
ActivateLowerMiddle	lm/search_hashed.cc	/^    explicit ActivateLowerMiddle(Middle &middle) : modify_(middle) {}$/;"	f	class:lm::ngram::__anon19::ActivateLowerMiddle
ActivateLowerMiddle	lm/search_hashed.cc	/^template <class Middle> class ActivateLowerMiddle {$/;"	c	namespace:lm::ngram::__anon19	file:
ActivateProgress	util/stream/chain.hh	/^    void ActivateProgress() {$/;"	f	class:util::stream::Chain
ActivateUnigram	lm/search_hashed.cc	/^    explicit ActivateUnigram(Weights *unigram) : modify_(unigram) {}$/;"	f	class:lm::ngram::__anon19::ActivateUnigram
ActivateUnigram	lm/search_hashed.cc	/^template <class Weights> class ActivateUnigram {$/;"	c	namespace:lm::ngram::__anon19	file:
Add	lm/builder/adjust_counts.cc	/^    void Add(std::size_t order_minus_1, uint64_t count, bool pruned = false) {$/;"	f	class:lm::builder::__anon4::StatCollector
Add	lm/builder/output.hh	/^    void Add(OutputHook *hook) {$/;"	f	class:lm::builder::Output
Add	lm/search_trie.cc	/^    void Add(const WordIndex *to, ProbPointer index) {$/;"	f	class:lm::ngram::trie::__anon20::BackoffMessages
Add	lm/vocab.cc	/^void WriteWordsWrapper::Add(WordIndex index, const StringPiece &str) {$/;"	f	class:lm::ngram::WriteWordsWrapper
Add	util/stream/chain.cc	/^ChainPosition Chain::Add() {$/;"	f	class:util::stream::Chain
Add	util/stream/multi_progress.cc	/^WorkerProgress MultiProgress::Add() {$/;"	f	class:util::stream::MultiProgress
AddBignum	util/double-conversion/bignum.cc	/^void Bignum::AddBignum(const Bignum& other) {$/;"	f	class:double_conversion::Bignum
AddCharacter	util/double-conversion/utils.h	/^  void AddCharacter(char c) {$/;"	f	class:double_conversion::StringBuilder
AddCombiner	lm/builder/sort.hh	/^struct AddCombiner {$/;"	s	namespace:lm::builder
AddFull	lm/builder/adjust_counts.cc	/^    void AddFull(uint64_t count, bool pruned = false) {$/;"	f	class:lm::builder::__anon4::StatCollector
AddIncoming	lm/filter/phrase.cc	/^    void AddIncoming(Arc *arc) {$/;"	f	class:lm::phrase::detail::Vertex	file:
AddNGram	lm/filter/arpa_io.hh	/^    template <class Iterator> void AddNGram(const Iterator &begin, const Iterator &end, const StringPiece &line) {$/;"	f	class:lm::ARPAOutput
AddNGram	lm/filter/arpa_io.hh	/^    void AddNGram(const StringPiece &line) {$/;"	f	class:lm::ARPAOutput
AddNGram	lm/filter/arpa_io.hh	/^    void AddNGram(const StringPiece &ngram, const StringPiece &line) {$/;"	f	class:lm::ARPAOutput
AddNGram	lm/filter/count_io.hh	/^    template <class Iterator> void AddNGram(const Iterator &begin, const Iterator &end, const StringPiece &line) {$/;"	f	class:lm::CountOutput
AddNGram	lm/filter/count_io.hh	/^    void AddNGram(const StringPiece &line) {$/;"	f	class:lm::CountOutput
AddNGram	lm/filter/count_io.hh	/^    void AddNGram(const StringPiece &ngram, const StringPiece &line) {$/;"	f	class:lm::CountOutput
AddNGram	lm/filter/format.hh	/^    template <class Iterator> void AddNGram(const Iterator &begin, const Iterator &end, const StringPiece &line) {$/;"	f	class:lm::MultipleOutput
AddNGram	lm/filter/format.hh	/^    template <class Output> void AddNGram(const StringPiece &ngram, const StringPiece &line, Output &output) {$/;"	f	class:lm::InputBuffer
AddNGram	lm/filter/format.hh	/^    void AddNGram(const StringPiece &line) {$/;"	f	class:lm::BinaryOutputBuffer
AddNGram	lm/filter/format.hh	/^    void AddNGram(const StringPiece &line) {$/;"	f	class:lm::MultipleOutput
AddNGram	lm/filter/format.hh	/^    void AddNGram(const StringPiece &line) {$/;"	f	class:lm::MultipleOutputBuffer
AddNGram	lm/filter/format.hh	/^    void AddNGram(const StringPiece &ngram, const StringPiece &line) {$/;"	f	class:lm::DispatchInput
AddNGram	lm/filter/phrase.hh	/^    template <class Iterator, class Output> void AddNGram(const Iterator &begin, const Iterator &end, const StringPiece &line, Output &output) {$/;"	f	class:lm::phrase::Multiple
AddNGram	lm/filter/phrase.hh	/^    template <class Output> void AddNGram(const StringPiece &ngram, const StringPiece &line, Output &output) {$/;"	f	class:lm::phrase::Multiple
AddNGram	lm/filter/thread.hh	/^    void AddNGram(const StringPiece &ngram, const StringPiece &line, RealOutput &output) {$/;"	f	class:lm::Controller
AddNGram	lm/filter/vocab.hh	/^    template <class Iterator, class Output> void AddNGram(const Iterator &begin, const Iterator &end, const StringPiece &line, Output &output) {$/;"	f	class:lm::vocab::Multiple
AddNGram	lm/filter/vocab.hh	/^    template <class Output> void AddNGram(const StringPiece &ngram, const StringPiece &line, Output &output) {$/;"	f	class:lm::vocab::Multiple
AddNGram	lm/filter/wrapper.hh	/^    template <class Iterator, class Output> void AddNGram(const Iterator &begin, const Iterator &end, const StringPiece &line, Output &output) {$/;"	f	class:lm::BinaryFilter
AddNGram	lm/filter/wrapper.hh	/^    template <class Output> void AddNGram(const StringPiece &ngram, const StringPiece &line, Output &output) {$/;"	f	class:lm::BinaryFilter
AddNGram	lm/filter/wrapper.hh	/^    template <class Output> void AddNGram(const StringPiece &ngram, const StringPiece &line, Output &output) {$/;"	f	class:lm::ContextFilter
AddPadding	util/double-conversion/utils.h	/^  void AddPadding(char c, int count) {$/;"	f	class:double_conversion::StringBuilder
AddPhrase	lm/filter/phrase.hh	/^    template <class Iterator> void AddPhrase(unsigned int sentence_id, const Iterator &begin, const Iterator &end) {$/;"	f	class:lm::phrase::Substrings
AddRight	lm/builder/initial_probabilities.cc	/^    AddRight(const Discount &discount, const util::stream::ChainPosition &input, bool pruning)$/;"	f	class:lm::builder::__anon7::AddRight
AddRight	lm/builder/initial_probabilities.cc	/^class AddRight {$/;"	c	namespace:lm::builder::__anon7	file:
AddString	util/double-conversion/utils.h	/^  void AddString(const char* s) {$/;"	f	class:double_conversion::StringBuilder
AddSubstring	util/double-conversion/utils.h	/^  void AddSubstring(const char* s, int n) {$/;"	f	class:double_conversion::StringBuilder
AddUInt64	util/double-conversion/bignum.cc	/^void Bignum::AddUInt64(uint64_t operand) {$/;"	f	class:double_conversion::Bignum
AddUnigramWord	lm/builder/corpus_count.cc	/^    void AddUnigramWord(WordIndex index) {$/;"	f	class:lm::builder::__anon5::Writer	file:
AdjustCounts	lm/builder/adjust_counts.hh	/^    AdjustCounts($/;"	f	class:lm::builder::AdjustCounts
AdjustCounts	lm/builder/adjust_counts.hh	/^class AdjustCounts {$/;"	c	namespace:lm::builder
AdjustLower	lm/search_hashed.cc	/^template <class Added, class Build> void AdjustLower($/;"	f	namespace:lm::ngram::__anon19
AdjustmentPowerOfTen	util/double-conversion/strtod.cc	/^static DiyFp AdjustmentPowerOfTen(int exponent) {$/;"	f	namespace:double_conversion
AdvanceOrThrow	util/file.cc	/^void AdvanceOrThrow(int fd, int64_t off) {$/;"	f	namespace:util
AdvanceToNonspace	util/double-conversion/double-conversion.cc	/^static inline bool AdvanceToNonspace(const char** current, const char* end) {$/;"	f	namespace:double_conversion
Align	util/double-conversion/bignum.cc	/^void Bignum::Align(const Bignum& other) {$/;"	f	class:double_conversion::Bignum
AlignTo8	lm/bhiksha.cc	/^void *AlignTo8(void *from) {$/;"	f	namespace:lm::ngram::trie::__anon2
AllIntersection	util/multi_intersection.hh	/^template <class Iterator, class Output, class Less> void AllIntersection(std::vector<boost::iterator_range<Iterator> > &sets, Output &out, const Less less) {$/;"	f	namespace:util
AllIntersection	util/multi_intersection.hh	/^template <class Iterator, class Output> void AllIntersection(std::vector<boost::iterator_range<Iterator> > &sets, Output &out) {$/;"	f	namespace:util
Alloc	util/mmap.hh	/^    typedef enum {MMAP_ALLOCATED, ARRAY_ALLOCATED, MALLOC_ALLOCATED, NONE_ALLOCATED} Alloc;$/;"	t	class:util::scoped_memory	typeref:enum:util::scoped_memory::__anon37
Allocate	util/pool.hh	/^    void *Allocate(std::size_t size) {$/;"	f	class:util::Pool
Annotated	lm/filter/format.hh	/^    struct Annotated {$/;"	s	class:lm::MultipleOutputBuffer
AnyCharacter	util/tokenize_piece.hh	/^    AnyCharacter() {}$/;"	f	class:util::AnyCharacter
AnyCharacter	util/tokenize_piece.hh	/^    explicit AnyCharacter(const StringPiece &chars) : chars_(chars) {}$/;"	f	class:util::AnyCharacter
AnyCharacter	util/tokenize_piece.hh	/^class AnyCharacter {$/;"	c	namespace:util
AnyCharacterLast	util/tokenize_piece.hh	/^    AnyCharacterLast() {}$/;"	f	class:util::AnyCharacterLast
AnyCharacterLast	util/tokenize_piece.hh	/^    explicit AnyCharacterLast(const StringPiece &chars) : chars_(chars) {}$/;"	f	class:util::AnyCharacterLast
AnyCharacterLast	util/tokenize_piece.hh	/^class AnyCharacterLast {$/;"	c	namespace:util
Append	lm/builder/corpus_count.cc	/^    void Append(WordIndex word) {$/;"	f	class:lm::builder::__anon5::Writer
Append	util/stream/sort.hh	/^    void Append(uint64_t length) {$/;"	f	class:util::stream::Offsets
AppendSentence	lm/filter/phrase.hh	/^    void AppendSentence(std::vector<unsigned int> &vec, unsigned int sentence_id) {$/;"	f	class:lm::phrase::Substrings
Apply	lm/builder/discount.hh	/^  float Apply(uint64_t count) const {$/;"	f	struct:lm::builder::Discount
Apply	lm/builder/output.cc	/^void OutputHook::Apply(util::stream::Chains &chains) {$/;"	f	class:lm::builder::OutputHook
Apply	lm/builder/output.hh	/^    void Apply(HookType hook_type, util::stream::Chains &chains) {$/;"	f	class:lm::builder::Output
Apply	lm/search_trie.cc	/^    void Apply(float *const *const base, FILE *unigrams) {$/;"	f	class:lm::ngram::trie::__anon20::BackoffMessages
Apply	lm/search_trie.cc	/^    void Apply(float *const *const base, RecordReader &reader) {$/;"	f	class:lm::ngram::trie::__anon20::BackoffMessages
ApplyBuild	lm/search_hashed.cc	/^template <class Value> template <class Build> void HashedSearch<Value>::ApplyBuild(util::FilePiece &f, const std::vector<uint64_t> &counts, const ProbingVocabulary &vocab, PositiveProbWarn &warn, const Build &build) {$/;"	f	class:lm::ngram::detail::HashedSearch
Arc	lm/filter/phrase.cc	/^    Arc() {}$/;"	f	class:lm::phrase::detail::Arc
Arc	lm/filter/phrase.cc	/^class Arc {$/;"	c	namespace:lm::phrase::detail	file:
ArcGreater	lm/filter/phrase.cc	/^struct ArcGreater : public std::binary_function<const Arc *, const Arc *, bool> {$/;"	s	namespace:lm::phrase::detail	file:
ArrayBhiksha	lm/bhiksha.cc	/^ArrayBhiksha::ArrayBhiksha(void *base, uint64_t max_offset, uint64_t max_next, const Config &config)$/;"	f	class:lm::ngram::trie::ArrayBhiksha
ArrayBhiksha	lm/bhiksha.hh	/^class ArrayBhiksha {$/;"	c	namespace:lm::ngram::trie
ArrayCount	lm/bhiksha.cc	/^std::size_t ArrayCount(uint64_t max_offset, uint64_t max_next, const Config &config) {$/;"	f	namespace:lm::ngram::trie::__anon1
AsDiyFp	util/double-conversion/ieee.h	/^  DiyFp AsDiyFp() const {$/;"	f	class:double_conversion::Double
AsDiyFp	util/double-conversion/ieee.h	/^  DiyFp AsDiyFp() const {$/;"	f	class:double_conversion::Single
AsNormalizedDiyFp	util/double-conversion/ieee.h	/^  DiyFp AsNormalizedDiyFp() const {$/;"	f	class:double_conversion::Double
AsUint32	util/double-conversion/ieee.h	/^  uint32_t AsUint32() const {$/;"	f	class:double_conversion::Single
AsUint64	util/double-conversion/ieee.h	/^  uint64_t AsUint64() const {$/;"	f	class:double_conversion::Double
AssignBignum	util/double-conversion/bignum.cc	/^void Bignum::AssignBignum(const Bignum& other) {$/;"	f	class:double_conversion::Bignum
AssignDecimalString	util/double-conversion/bignum.cc	/^void Bignum::AssignDecimalString(Vector<const char> value) {$/;"	f	class:double_conversion::Bignum
AssignHexString	util/double-conversion/bignum.cc	/^void Bignum::AssignHexString(Vector<const char> value) {$/;"	f	class:double_conversion::Bignum
AssignPowerUInt16	util/double-conversion/bignum.cc	/^void Bignum::AssignPowerUInt16(uint16_t base, int power_exponent) {$/;"	f	class:double_conversion::Bignum
AssignUInt16	util/double-conversion/bignum.cc	/^void Bignum::AssignUInt16(uint16_t value) {$/;"	f	class:double_conversion::Bignum
AssignUInt64	util/double-conversion/bignum.cc	/^void Bignum::AssignUInt64(uint64_t value) {$/;"	f	class:double_conversion::Bignum
AutoProbing	util/probing_hash_table.hh	/^    AutoProbing(std::size_t initial_size = 10, const Key &invalid = Key(), const Hash &hash_func = Hash(), const Equal &equal_func = Equal()) :$/;"	f	class:util::AutoProbing
AutoProbing	util/probing_hash_table.hh	/^template <class EntryT, class HashT, class EqualT = std::equal_to<typename EntryT::Key> > class AutoProbing {$/;"	c	namespace:util
B	lm/filter/format.hh	/^    typedef DispatchInput<Filter, Output> B;$/;"	t	class:lm::DispatchARPAInput
BIGNUM_DTOA_FIXED	util/double-conversion/bignum-dtoa.h	/^  BIGNUM_DTOA_FIXED,$/;"	e	enum:double_conversion::BignumDtoaMode
BIGNUM_DTOA_PRECISION	util/double-conversion/bignum-dtoa.h	/^  BIGNUM_DTOA_PRECISION$/;"	e	enum:double_conversion::BignumDtoaMode
BIGNUM_DTOA_SHORTEST	util/double-conversion/bignum-dtoa.h	/^  BIGNUM_DTOA_SHORTEST,$/;"	e	enum:double_conversion::BignumDtoaMode
BIGNUM_DTOA_SHORTEST_SINGLE	util/double-conversion/bignum-dtoa.h	/^  BIGNUM_DTOA_SHORTEST_SINGLE,$/;"	e	enum:double_conversion::BignumDtoaMode
BOOST_LEXICAL_CAST_ASSUME_C_LOCALE	util/fake_ofstream.hh	14;"	d
BZException	util/read_compressed.cc	/^BZException::BZException() throw() {}$/;"	f	class:util::BZException
BZException	util/read_compressed.hh	/^class BZException : public CompressedException {$/;"	c	namespace:util
BZip	util/read_compressed.cc	/^    BZip(const void *base, std::size_t amount) {$/;"	f	class:util::__anon41::BZip
BZip	util/read_compressed.cc	/^class BZip {$/;"	c	namespace:util::__anon41	file:
Backend	util/probing_hash_table.hh	/^    typedef ProbingHashTable<EntryT, HashT, EqualT> Backend;$/;"	t	class:util::AutoProbing
Backoff	lm/quantize.hh	/^        float Backoff() const {$/;"	f	class:lm::ngram::DontQuantize::MiddlePointer
Backoff	lm/quantize.hh	/^        float Backoff() const {$/;"	f	class:lm::ngram::SeparatelyQuantize::MiddlePointer
Backoff	lm/trie.hh	/^    float Backoff() const { return to_->backoff; }$/;"	f	class:lm::ngram::trie::UnigramPointer
Backoff	lm/value.hh	/^    float Backoff() const { return to_->backoff; }$/;"	f	class:lm::ngram::GenericProbingProxy
Backoff	lm/value.hh	/^    float Backoff() const { return to_->backoff; }$/;"	f	class:lm::ngram::GenericTrieUnigramProxy
BackoffBins	lm/quantize.hh	/^        const Bins &BackoffBins() const { return bins_[1]; }$/;"	f	class:lm::ngram::SeparatelyQuantize::MiddlePointer
BackoffMessages	lm/search_trie.cc	/^class BackoffMessages {$/;"	c	namespace:lm::ngram::trie::__anon20	file:
BackoffValue	lm/value.hh	/^struct BackoffValue {$/;"	s	namespace:lm::ngram
BadDiscountException	lm/builder/adjust_counts.cc	/^BadDiscountException::BadDiscountException() throw() {}$/;"	f	class:lm::builder::BadDiscountException
BadDiscountException	lm/builder/adjust_counts.hh	/^class BadDiscountException : public util::Exception {$/;"	c	namespace:lm::builder
BadSortConfig	util/stream/sort.hh	/^    BadSortConfig() throw() {}$/;"	f	class:util::stream::BadSortConfig
BadSortConfig	util/stream/sort.hh	/^class BadSortConfig : public Exception {$/;"	c	namespace:util::stream
Base	lm/builder/ngram.hh	/^    const uint8_t *Base() const { return reinterpret_cast<const uint8_t*>(begin_); }$/;"	f	class:lm::builder::NGram
Base	lm/builder/ngram.hh	/^    uint8_t *Base() { return reinterpret_cast<uint8_t*>(begin_); }$/;"	f	class:lm::builder::NGram
BaseFullScore	lm/facade.hh	/^    FullScoreReturn BaseFullScore(const void *in_state, const WordIndex new_word, void *out_state) const {$/;"	f	class:lm::base::ModelFacade
BaseFullScoreForgotState	lm/facade.hh	/^    FullScoreReturn BaseFullScoreForgotState(const WordIndex *context_rbegin, const WordIndex *context_rend, const WordIndex new_word, void *out_state) const {$/;"	f	class:lm::base::ModelFacade
BaseInit	lm/trie.cc	/^void BitPacked::BaseInit(void *base, uint64_t max_vocab, uint8_t remaining_bits) {$/;"	f	class:lm::ngram::trie::BitPacked
BaseScore	lm/facade.hh	/^    float BaseScore(const void *in_state, const WordIndex new_word, void *out_state) const {$/;"	f	class:lm::base::ModelFacade
BaseSize	lm/trie.cc	/^uint64_t BitPacked::BaseSize(uint64_t entries, uint64_t max_vocab, uint8_t remaining_bits) {$/;"	f	class:lm::ngram::trie::BitPacked
BaseVocabulary	lm/virtual_interface.hh	/^    const Vocabulary &BaseVocabulary() const { return *base_vocab_; }$/;"	f	class:lm::base::Model
BaseVocabulary_pointer	lm/virtual_interface.hh	/^    const Vocabulary* BaseVocabulary_pointer() const { return  base_vocab_; }$/;"	f	class:lm::base::Model
BasicPrint	lm/ngram_query.hh	/^struct BasicPrint {$/;"	s	namespace:lm::ngram
Batch	lm/filter/thread.hh	/^    typedef ThreadBatch<OutputBuffer> Batch;$/;"	t	class:lm::Controller
BeginLength	lm/filter/arpa_io.cc	/^void ARPAOutput::BeginLength(unsigned int length) {$/;"	f	class:lm::ARPAOutput
BeginLength	lm/filter/format.hh	/^    void BeginLength(unsigned int length) { B::output_.BeginLength(length); }$/;"	f	class:lm::DispatchARPAInput
BeginLength	lm/filter/format.hh	/^    void BeginLength(unsigned int length) {$/;"	f	class:lm::MultipleARPAOutput
BeginNonTerminal	lm/left.hh	/^    void BeginNonTerminal(const ChartState &in, float prob = 0.0) {$/;"	f	class:lm::ngram::RuleScore
BeginSentence	lm/left.hh	/^    void BeginSentence() {$/;"	f	class:lm::ngram::RuleScore
BeginSentence	lm/virtual_interface.hh	/^    WordIndex BeginSentence() const { return begin_sentence_; }$/;"	f	class:lm::base::Vocabulary
BeginSentenceMemory	lm/virtual_interface.hh	/^    const void *BeginSentenceMemory() const { return begin_sentence_memory_; }$/;"	f	class:lm::base::Model
BeginSentenceState	lm/facade.hh	/^    const State &BeginSentenceState() const { return begin_sentence_; }$/;"	f	class:lm::base::ModelFacade
BeginSentenceWrite	lm/virtual_interface.hh	/^    void BeginSentenceWrite(void *to) const { memcpy(to, begin_sentence_memory_, StateSize()); }$/;"	f	class:lm::base::Model
BiggestPowerTen	util/double-conversion/fast-dtoa.cc	/^static void BiggestPowerTen(uint32_t number,$/;"	f	namespace:double_conversion
BigitAt	util/double-conversion/bignum.cc	/^Bignum::Chunk Bignum::BigitAt(int index) const {$/;"	f	class:double_conversion::Bignum
BigitLength	util/double-conversion/bignum.h	/^  int BigitLength() const { return used_digits_ + exponent_; }$/;"	f	class:double_conversion::Bignum
BigitsShiftLeft	util/double-conversion/bignum.cc	/^void Bignum::BigitsShiftLeft(int shift_amount) {$/;"	f	class:double_conversion::Bignum
Bignum	util/double-conversion/bignum.cc	/^Bignum::Bignum()$/;"	f	class:double_conversion::Bignum
Bignum	util/double-conversion/bignum.h	/^class Bignum {$/;"	c	namespace:double_conversion
BignumDtoa	util/double-conversion/bignum-dtoa.cc	/^void BignumDtoa(double v, BignumDtoaMode mode, int requested_digits,$/;"	f	namespace:double_conversion
BignumDtoaMode	util/double-conversion/bignum-dtoa.h	/^enum BignumDtoaMode {$/;"	g	namespace:double_conversion
BignumToFixed	util/double-conversion/bignum-dtoa.cc	/^static void BignumToFixed(int requested_digits, int* decimal_point,$/;"	f	namespace:double_conversion
BinaryFilter	lm/filter/wrapper.hh	/^    explicit BinaryFilter(Binary binary) : binary_(binary) {}$/;"	f	class:lm::BinaryFilter
BinaryFilter	lm/filter/wrapper.hh	/^template <class Binary> class BinaryFilter {$/;"	c	namespace:lm
BinaryFind	util/sorted_uniform.hh	/^template <class Iterator, class Accessor> bool BinaryFind($/;"	f	namespace:util
BinaryFormat	lm/binary_format.cc	/^BinaryFormat::BinaryFormat(const Config &config) $/;"	f	class:lm::ngram::BinaryFormat
BinaryFormat	lm/binary_format.hh	/^class BinaryFormat {$/;"	c	namespace:lm::ngram
BinaryOutputBuffer	lm/filter/format.hh	/^    BinaryOutputBuffer() {}$/;"	f	class:lm::BinaryOutputBuffer
BinaryOutputBuffer	lm/filter/format.hh	/^class BinaryOutputBuffer {$/;"	c	namespace:lm
Bins	lm/quantize.hh	/^        Bins() {}$/;"	f	class:lm::ngram::SeparatelyQuantize::Bins
Bins	lm/quantize.hh	/^        Bins(uint8_t bits, float *begin) : begin_(begin), end_(begin_ + (1ULL << bits)), bits_(bits), mask_((1ULL << bits) - 1) {}$/;"	f	class:lm::ngram::SeparatelyQuantize::Bins
Bins	lm/quantize.hh	/^    class Bins {$/;"	c	class:lm::ngram::SeparatelyQuantize
BitAddress	util/bit_packing.hh	/^  BitAddress(void *in_base, uint64_t in_offset) : base(in_base), offset(in_offset) {}$/;"	f	struct:util::BitAddress
BitAddress	util/bit_packing.hh	/^struct BitAddress {$/;"	s	namespace:util
BitAt	util/double-conversion/fixed-dtoa.cc	/^  int BitAt(int position) {$/;"	f	class:double_conversion::UInt128
BitCast	util/double-conversion/utils.h	/^inline Dest BitCast(Source* source) {$/;"	f	namespace:double_conversion
BitCast	util/double-conversion/utils.h	/^inline Dest BitCast(const Source& source) {$/;"	f	namespace:double_conversion
BitPackShift	util/bit_packing.hh	/^inline uint8_t BitPackShift(uint8_t bit, uint8_t \/*length*\/) {$/;"	f	namespace:util
BitPacked	lm/trie.hh	/^    BitPacked() {}$/;"	f	class:lm::ngram::trie::BitPacked
BitPacked	lm/trie.hh	/^class BitPacked {$/;"	c	namespace:lm::ngram::trie
BitPackedLongest	lm/trie.hh	/^    BitPackedLongest() {}$/;"	f	class:lm::ngram::trie::BitPackedLongest
BitPackedLongest	lm/trie.hh	/^class BitPackedLongest : public BitPacked {$/;"	c	namespace:lm::ngram::trie
BitPackedMiddle	lm/trie.cc	/^template <class Bhiksha> BitPackedMiddle<Bhiksha>::BitPackedMiddle(void *base, uint8_t quant_bits, uint64_t entries, uint64_t max_vocab, uint64_t max_next, const BitPacked &next_source, const Config &config) :$/;"	f	class:lm::ngram::trie::BitPackedMiddle
BitPackedMiddle	lm/trie.hh	/^template <class Bhiksha> class BitPackedMiddle : public BitPacked {$/;"	c	namespace:lm::ngram::trie
BitPackingSanity	util/bit_packing.cc	/^void BitPackingSanity() {$/;"	f	namespace:util
BitSize	util/double-conversion/bignum.cc	/^static int BitSize(S value) {$/;"	f	namespace:double_conversion
Bits	lm/quantize.hh	/^        uint8_t Bits() const { return bits_; }$/;"	f	class:lm::ngram::SeparatelyQuantize::Bins
BitsMask	util/bit_packing.hh	/^struct BitsMask {$/;"	s	namespace:util
BlankManager	lm/search_trie.cc	/^    BlankManager(unsigned char total_order, Doing &doing) : total_order_(total_order), been_length_(0), doing_(doing) {$/;"	f	class:lm::ngram::trie::__anon20::BlankManager
BlankManager	lm/search_trie.cc	/^template <class Doing> class BlankManager {$/;"	c	namespace:lm::ngram::trie::__anon20	file:
Block	util/stream/block.hh	/^    Block() : mem_(NULL), valid_size_(0) {}$/;"	f	class:util::stream::Block
Block	util/stream/block.hh	/^    Block(void *mem, std::size_t size) : mem_(mem), valid_size_(size) {}$/;"	f	class:util::stream::Block
Block	util/stream/block.hh	/^class Block {$/;"	c	namespace:util::stream
BlockSize	util/stream/chain.hh	/^    std::size_t BlockSize() const {$/;"	f	class:util::stream::Chain
BlockSorter	util/stream/sort.hh	/^    BlockSorter(Offsets &offsets, const Compare &compare) :$/;"	f	class:util::stream::BlockSorter
BlockSorter	util/stream/sort.hh	/^template <class Compare> class BlockSorter {$/;"	c	namespace:util::stream
BlockingSort	util/stream/sort.hh	/^template <class Compare, class Combine> uint64_t BlockingSort(Chain &chain, const SortConfig &config, const Compare &compare = Compare(), const Combine &combine = NeverCombine()) {$/;"	f	namespace:util::stream
BoolCharacter	util/tokenize_piece.hh	/^    BoolCharacter() {}$/;"	f	class:util::BoolCharacter
BoolCharacter	util/tokenize_piece.hh	/^    explicit BoolCharacter(const bool *delimiter) { delimiter_ = delimiter; }$/;"	f	class:util::BoolCharacter
BoolCharacter	util/tokenize_piece.hh	/^class BoolCharacter {$/;"	c	namespace:util
Bound	lm/vocab.hh	/^    WordIndex Bound() const { return bound_; }$/;"	f	class:lm::ngram::ProbingVocabulary
Bound	lm/vocab.hh	/^    WordIndex Bound() const { return bound_; }$/;"	f	class:lm::ngram::SortedVocabulary
BoundedSortedUniformFind	util/sorted_uniform.hh	/^template <class Iterator, class Accessor, class Pivot> bool BoundedSortedUniformFind($/;"	f	namespace:util
Buffer	lm/vocab.hh	/^    const std::string &Buffer() const { return buffer_; }$/;"	f	class:lm::ngram::WriteWordsWrapper
BufferEntry	lm/builder/initial_probabilities.cc	/^struct BufferEntry {$/;"	s	namespace:lm::builder::__anon7	file:
BufferFinal	lm/builder/pipeline.cc	/^    void BufferFinal(const std::vector<uint64_t> &counts) {$/;"	f	class:lm::builder::__anon9::Master
Build	util/tokenize_piece.hh	/^    template <unsigned Length> static void Build(const char (&characters)[Length], bool (&out)[256]) {$/;"	f	class:util::BoolCharacter
BuildGraph	lm/filter/phrase.cc	/^void BuildGraph(const Substrings &phrase, const std::vector<Hash> &hashes, detail::Vertex *const vertices, detail::Arc *free_arc) {$/;"	f	namespace:lm::phrase::__anon11
BuildLookupTable	util/string_piece.cc	/^static inline void BuildLookupTable(const StringPiece& characters_wanted,$/;"	f	file:
BuildTrie	lm/search_trie.cc	/^template <class Quant, class Bhiksha> void BuildTrie(SortedFiles &files, std::vector<uint64_t> &counts, const Config &config, TrieSearch<Quant, Bhiksha> &out, Quant &quant, SortedVocabulary &vocab, BinaryFormat &backing) {$/;"	f	namespace:lm::ngram::trie
ByBits	util/bit_packing.hh	/^  static BitsMask ByBits(uint8_t bits) {$/;"	f	struct:util::BitsMask
ByMax	util/bit_packing.hh	/^  static BitsMask ByMax(uint64_t max_value) {$/;"	f	struct:util::BitsMask
COMPLAIN	lm/lm_exception.hh	/^typedef enum {THROW_UP, COMPLAIN, SILENT} WarningAction;$/;"	e	enum:lm::__anon13
COUNT_HOOK	lm/builder/output.hh	/^  COUNT_HOOK, \/\/ Raw N-gram counts, highest order only.$/;"	e	enum:lm::builder::HookType
CachedPower	util/double-conversion/cached-powers.cc	/^struct CachedPower {$/;"	s	namespace:double_conversion	file:
Calc	util/sorted_uniform.hh	/^  static inline std::size_t Calc(uint64_t off, uint64_t range, std::size_t width) {$/;"	f	struct:util::Pivot64
Calc	util/sorted_uniform.hh	/^  static inline std::size_t Calc(uint64_t off, uint64_t range, uint64_t width) {$/;"	f	struct:util::Pivot32
CalculateDiscounts	lm/builder/adjust_counts.cc	/^    void CalculateDiscounts(const DiscountConfig &config) {$/;"	f	class:lm::builder::__anon4::StatCollector
CallFilter	lm/filter/format.hh	/^    template <class Filter, class Output> void CallFilter(Filter &filter, Output &output) const {$/;"	f	class:lm::InputBuffer
CallFilter	lm/filter/thread.hh	/^    template <class Filter> void CallFilter(Filter &filter) {$/;"	f	class:lm::ThreadBatch
Callback	lm/builder/interpolate.cc	/^    Callback(float uniform_prob, const util::stream::ChainPositions &backoffs, const std::vector<uint64_t> &prune_thresholds, bool prune_vocab)$/;"	f	class:lm::builder::__anon8::Callback
Callback	lm/builder/interpolate.cc	/^template <class Output> class Callback {$/;"	c	namespace:lm::builder::__anon8	file:
Callback	lm/filter/vocab.hh	/^        Callback(Output &out, const StringPiece &line) : out_(out), line_(line) {}$/;"	f	class:lm::vocab::Multiple::Callback
Callback	lm/filter/vocab.hh	/^    template <class Output> class Callback {$/;"	c	class:lm::vocab::Multiple
Callback	lm/value.hh	/^  template <class Model, class C> void Callback(const Config &, unsigned int, typename Model::Vocabulary &, C &callback) {$/;"	f	struct:lm::ngram::BackoffValue
Callback	lm/value.hh	/^  template <class Model, class C> void Callback(const Config &config, unsigned int order, typename Model::Vocabulary &vocab, C &callback) {$/;"	f	struct:lm::ngram::RestValue
CallocOrThrow	util/scoped.cc	/^void *CallocOrThrow(std::size_t requested) {$/;"	f	namespace:util
Chain	util/stream/chain.cc	/^Chain::Chain(const ChainConfig &config) : config_(config), complete_called_(false) {$/;"	f	class:util::stream::Chain
Chain	util/stream/chain.hh	/^class Chain {$/;"	c	namespace:util::stream
ChainConfig	util/stream/config.hh	/^  ChainConfig() {}$/;"	f	struct:util::stream::ChainConfig
ChainConfig	util/stream/config.hh	/^  ChainConfig(std::size_t in_entry_size, std::size_t in_block_count, std::size_t in_total_memory)$/;"	f	struct:util::stream::ChainConfig
ChainConfig	util/stream/config.hh	/^struct ChainConfig {$/;"	s	namespace:util::stream
ChainConfigException	util/stream/chain.cc	/^ChainConfigException::ChainConfigException() throw() { *this << "Chain configured with "; }$/;"	f	class:util::stream::ChainConfigException
ChainConfigException	util/stream/chain.hh	/^class ChainConfigException : public Exception {$/;"	c	namespace:util::stream
ChainPosition	util/stream/chain.hh	/^    ChainPosition(PCQueue<Block> &in, PCQueue<Block> &out, Chain *chain, MultiProgress &progress) $/;"	f	class:util::stream::ChainPosition
ChainPosition	util/stream/chain.hh	/^class ChainPosition {$/;"	c	namespace:util::stream
ChainPositions	util/stream/multi_stream.hh	/^    ChainPositions() {}$/;"	f	class:util::stream::ChainPositions
ChainPositions	util/stream/multi_stream.hh	/^    explicit ChainPositions(Chains &chains) {$/;"	f	class:util::stream::ChainPositions
ChainPositions	util/stream/multi_stream.hh	/^class ChainPositions : public util::FixedArray<util::stream::ChainPosition> {$/;"	c	namespace:util::stream
Chains	util/stream/multi_stream.hh	/^    Chains() {}$/;"	f	class:util::stream::Chains
Chains	util/stream/multi_stream.hh	/^    explicit Chains(std::size_t limit) : util::FixedArray<util::stream::Chain>(limit) {}$/;"	f	class:util::stream::Chains
Chains	util/stream/multi_stream.hh	/^class Chains : public util::FixedArray<util::stream::Chain> {$/;"	c	namespace:util::stream
ChartState	lm/state.hh	/^struct ChartState {$/;"	s	namespace:lm::ngram
CheckConsistency	util/probing_hash_table.hh	/^    void CheckConsistency() {$/;"	f	class:util::ProbingHashTable
CheckCounts	lm/model.cc	/^void CheckCounts(const std::vector<uint64_t> &counts) {$/;"	f	namespace:lm::ngram::detail::__anon14
CheckForRun	util/stream/chain.hh	/^    template <class T, void (T::*ptr)(const ChainPosition &) = &T::Run> struct CheckForRun {$/;"	s	class:util::stream::Chain
CheckForRun	util/stream/multi_stream.hh	/^    template <class T, void (T::*ptr)(const ChainPositions &) = &T::Run> struct CheckForRun {$/;"	s	class:util::stream::Chains
CheckOffT	util/file.cc	/^template <> struct CheckOffT<8> {$/;"	s	namespace:util::__anon32	file:
CheckOverflow	util/exception.hh	/^inline std::size_t CheckOverflow(uint64_t value) {$/;"	f	namespace:util
CheckOverflowInternal	util/exception.hh	/^template <> inline std::size_t CheckOverflowInternal<8>(uint64_t value) {$/;"	f	namespace:util
CheckOverflowInternal	util/exception.hh	/^template <unsigned len> inline std::size_t CheckOverflowInternal(uint64_t value) {$/;"	f	namespace:util
CheckSpecials	lm/vocab.hh	/^template <class Vocab> void CheckSpecials(const Config &config, const Vocab &vocab) throw(SpecialWordMissingException) {$/;"	f	namespace:lm::ngram
CheckedBase	util/mmap.hh	/^    void *CheckedBase(uint64_t index) {$/;"	f	class:util::Rolling
CheckedIndex	util/mmap.hh	/^    void *CheckedIndex(uint64_t index) {$/;"	f	class:util::Rolling
ChopBits	lm/bhiksha.cc	/^uint8_t ChopBits(uint64_t max_offset, uint64_t max_next, const Config &config) {$/;"	f	namespace:lm::ngram::trie::__anon1
Chunk	util/double-conversion/bignum.h	/^  typedef uint32_t Chunk;$/;"	t	class:double_conversion::Bignum
Clamp	util/double-conversion/bignum.cc	/^void Bignum::Clamp() {$/;"	f	class:double_conversion::Bignum
Clear	lm/filter/format.hh	/^    void Clear() { actual_ = 0; }$/;"	f	class:lm::InputBuffer
Clear	util/probing_hash_table.hh	/^    void Clear() {$/;"	f	class:util::AutoProbing
Clear	util/probing_hash_table.hh	/^    void Clear() {$/;"	f	class:util::ProbingHashTable
Close	util/file.cc	/^void scoped_FILE_closer::Close(std::FILE *file) {$/;"	f	class:util::scoped_FILE_closer
Close	util/scoped.hh	/^  static void Close(T *p) { clean(p); }$/;"	f	struct:util::scoped_c_forward
Close	util/scoped.hh	/^  template <class T> static void Close(T *p) { delete [] p; }$/;"	f	struct:util::scoped_delete_array_forward
Close	util/scoped.hh	/^  template <class T> static void Close(T *p) { delete p; }$/;"	f	struct:util::scoped_delete_forward
Closer	lm/trie_sort.cc	/^    explicit Closer(std::deque<FILE*> &files) : files_(files) {}$/;"	f	class:lm::ngram::trie::__anon23::Closer
Closer	lm/trie_sort.cc	/^class Closer {$/;"	c	namespace:lm::ngram::trie::__anon23	file:
CollapseStream	lm/builder/adjust_counts.cc	/^    CollapseStream(const util::stream::ChainPosition &position, uint64_t prune_threshold, const std::vector<bool>& prune_words) :$/;"	f	class:lm::builder::__anon4::CollapseStream
CollapseStream	lm/builder/adjust_counts.cc	/^class CollapseStream {$/;"	c	namespace:lm::builder::__anon4	file:
CombineWordHash	lm/search_hashed.hh	/^inline uint64_t CombineWordHash(uint64_t current, const WordIndex next) {$/;"	f	namespace:lm::ngram::detail
Comparator	lm/builder/sort.hh	/^    explicit Comparator(std::size_t order) : order_(order) {}$/;"	f	class:lm::builder::Comparator
Comparator	lm/builder/sort.hh	/^template <class Child> class Comparator : public std::binary_function<const void *, const void *, bool> {$/;"	c	namespace:lm::builder
Compare	lm/builder/sort.hh	/^    inline bool Compare(const WordIndex *lhs, const WordIndex *rhs) const {$/;"	f	class:lm::builder::ContextOrder
Compare	lm/builder/sort.hh	/^    inline bool Compare(const WordIndex *lhs, const WordIndex *rhs) const {$/;"	f	class:lm::builder::PrefixOrder
Compare	lm/builder/sort.hh	/^    inline bool Compare(const WordIndex *lhs, const WordIndex *rhs) const {$/;"	f	class:lm::builder::SuffixOrder
Compare	lm/search_trie.cc	/^int Compare(unsigned char order, const void *first_void, const void *second_void) {$/;"	f	namespace:lm::ngram::trie::__anon20
Compare	lm/state.hh	/^    int Compare(const State &other) const {$/;"	f	class:lm::ngram::State
Compare	lm/state.hh	/^  int Compare(const ChartState &other) const {$/;"	f	struct:lm::ngram::ChartState
Compare	lm/state.hh	/^  int Compare(const Left &other) const {$/;"	f	struct:lm::ngram::Left
Compare	util/double-conversion/bignum.cc	/^int Bignum::Compare(const Bignum& a, const Bignum& b) {$/;"	f	class:double_conversion::Bignum
CompareBufferWithDiyFp	util/double-conversion/strtod.cc	/^static int CompareBufferWithDiyFp(Vector<const char> buffer,$/;"	f	namespace:double_conversion
ComplainAboutARPA	lm/model.cc	/^void ComplainAboutARPA(const Config &config, ModelType model_type) {$/;"	f	namespace:lm::ngram::detail::__anon14
ComplainDisallowed	lm/builder/corpus_count.cc	/^  void ComplainDisallowed(StringPiece word, WarningAction &action) {$/;"	f	namespace:lm::builder::__anon6
Complete	util/read_compressed.cc	/^class Complete : public ReadBase {$/;"	c	namespace:util::__anon41	file:
Complete	util/stream/chain.cc	/^ChainPosition Chain::Complete() {$/;"	f	class:util::stream::Chain
CompleteLoop	util/stream/chain.hh	/^    void CompleteLoop() {$/;"	f	class:util::stream::Chain
CompressedException	util/read_compressed.cc	/^CompressedException::CompressedException() throw() {}$/;"	f	class:util::CompressedException
CompressedException	util/read_compressed.hh	/^class CompressedException : public Exception {$/;"	c	namespace:util
ComputeGuess	util/double-conversion/strtod.cc	/^static bool ComputeGuess(Vector<const char> trimmed, int exponent,$/;"	f	namespace:double_conversion
ConditionCommon	lm/filter/phrase.cc	/^ConditionCommon::ConditionCommon(const ConditionCommon &from) : substrings_(from.substrings_) {}$/;"	f	class:lm::phrase::detail::ConditionCommon
ConditionCommon	lm/filter/phrase.cc	/^ConditionCommon::ConditionCommon(const Substrings &substrings) : substrings_(substrings) {}$/;"	f	class:lm::phrase::detail::ConditionCommon
ConditionCommon	lm/filter/phrase.hh	/^class ConditionCommon {$/;"	c	namespace:lm::phrase::detail
Config	lm/builder/pipeline.cc	/^    const PipelineConfig &Config() const { return config_; }$/;"	f	class:lm::builder::__anon9::Master
Config	lm/config.cc	/^Config::Config() :$/;"	f	class:lm::ngram::Config
Config	lm/config.hh	/^struct Config {$/;"	s	namespace:lm::ngram
ConfigException	lm/lm_exception.cc	/^ConfigException::ConfigException() throw() {}$/;"	f	class:lm::ConfigException
ConfigException	lm/lm_exception.hh	/^class ConfigException : public util::Exception {$/;"	c	namespace:lm
ConfigureEnumerate	lm/vocab.cc	/^void ProbingVocabulary::ConfigureEnumerate(EnumerateVocab *to, std::size_t \/*max_entries*\/) {$/;"	f	class:lm::ngram::ProbingVocabulary
ConfigureEnumerate	lm/vocab.cc	/^void SortedVocabulary::ConfigureEnumerate(EnumerateVocab *to, std::size_t max_entries) {$/;"	f	class:lm::ngram::SortedVocabulary
ConstIterator	util/probing_hash_table.hh	/^    typedef const Entry *ConstIterator;$/;"	t	class:util::AutoProbing
ConstIterator	util/probing_hash_table.hh	/^    typedef const Entry *ConstIterator;$/;"	t	class:util::ProbingHashTable
Construct	lm/builder/corpus_count.cc	/^  static DedupeEntry Construct(WordIndex *at) {$/;"	f	struct:lm::builder::__anon5::DedupeEntry
Constructed	util/fixed_array.hh	/^    void Constructed() {$/;"	f	class:util::FixedArray
Consume	util/file_piece.hh	/^    StringPiece Consume(const char *to) {$/;"	f	class:util::FilePiece
Consume	util/pcqueue.hh	/^  T Consume() {$/;"	f	class:util::PCQueue
Consume	util/pcqueue.hh	/^  T& Consume(T &out) {$/;"	f	class:util::PCQueue
ConsumeSubString	util/double-conversion/double-conversion.cc	/^static bool ConsumeSubString(const char** current,$/;"	f	namespace:double_conversion
Context	lm/trie_sort.hh	/^    FILE *Context(unsigned char of_order) {$/;"	f	class:lm::ngram::trie::SortedFiles
ContextFilter	lm/filter/wrapper.hh	/^    explicit ContextFilter(Filter &backend) : backend_(backend) {}$/;"	f	class:lm::ContextFilter
ContextFilter	lm/filter/wrapper.hh	/^template <class FilterT> class ContextFilter {$/;"	c	namespace:lm
ContextOrder	lm/builder/sort.hh	/^    explicit ContextOrder(std::size_t order) : Comparator<ContextOrder>(order) {}$/;"	f	class:lm::builder::ContextOrder
ContextOrder	lm/builder/sort.hh	/^class ContextOrder : public Comparator<ContextOrder> {$/;"	c	namespace:lm::builder
Controller	lm/filter/thread.hh	/^    Controller(size_t batch_size, size_t queue, size_t workers, const Filter &filter, RealOutput &output) $/;"	f	class:lm::Controller
Controller	lm/filter/thread.hh	/^template <class Filter, class OutputBuffer, class RealOutput> class Controller : boost::noncopyable {$/;"	c	namespace:lm
ConvertToSorted	lm/trie_sort.cc	/^void SortedFiles::ConvertToSorted(util::FilePiece &f, const SortedVocabulary &vocab, const std::vector<uint64_t> &counts, const std::string &file_prefix, unsigned char order, PositiveProbWarn &warn, void *mem, std::size_t mem_size) {$/;"	f	class:lm::ngram::trie::SortedFiles
Copy	lm/filter/format.hh	/^  static void Copy(util::FilePiece &in, Output &out) {$/;"	f	struct:lm::ARPAFormat
Copy	lm/filter/format.hh	/^  static void Copy(util::FilePiece &in, Output &out) {$/;"	f	struct:lm::CountFormat
CopyRemainingHistory	lm/model.cc	/^void CopyRemainingHistory(const WordIndex *from, State &out_state) {$/;"	f	namespace:lm::ngram::detail::__anon15
CopyToString	util/string_piece.cc	/^void StringPiece::CopyToString(std::string* target) const {$/;"	f	class:StringPiece
CorpusCount	lm/builder/corpus_count.cc	/^CorpusCount::CorpusCount(util::FilePiece &from, int vocab_write, uint64_t &token_count, WordIndex &type_count, std::vector<bool> &prune_words, const std::string& prune_vocab_filename, std::size_t entries_per_block, WarningAction disallowed_symbol)$/;"	f	class:lm::builder::CorpusCount
CorpusCount	lm/builder/corpus_count.hh	/^class CorpusCount {$/;"	c	namespace:lm::builder
Count	lm/builder/ngram.hh	/^    uint64_t &Count() { return Value().count; }$/;"	f	class:lm::builder::NGram
Count	lm/builder/ngram.hh	/^    uint64_t Count() const { return Value().count; }$/;"	f	class:lm::builder::NGram
CountBatch	lm/filter/count_io.hh	/^    explicit CountBatch(std::streamsize initial_read) $/;"	f	class:lm::CountBatch
CountBatch	lm/filter/count_io.hh	/^class CountBatch {$/;"	c	namespace:lm
CountFormat	lm/filter/format.hh	/^struct CountFormat {$/;"	s	namespace:lm
CountOutput	lm/filter/count_io.hh	/^    explicit CountOutput(const char *name) : file_(util::CreateOrThrow(name)) {}$/;"	f	class:lm::CountOutput
CountOutput	lm/filter/count_io.hh	/^class CountOutput : boost::noncopyable {$/;"	c	namespace:lm
CountText	lm/builder/pipeline.cc	/^void CountText(int text_file \/* input *\/, int vocab_file \/* output *\/, Master &master, uint64_t &token_count, std::string &text_file_name, std::vector<bool> &prune_words) {$/;"	f	namespace:lm::builder::__anon9
Counts	lm/interpolate/arpa_to_stream.hh	/^    const std::vector<uint64_t> &Counts() const { return counts_; }$/;"	f	class:lm::interpolate::ARPAToStream
Counts	lm/search_trie.cc	/^    const std::vector<uint64_t> &Counts() const {$/;"	f	class:lm::ngram::trie::__anon20::FindBlanks
CreateChains	lm/builder/pipeline.cc	/^    void CreateChains(std::size_t remaining_mem, const std::vector<uint64_t> &count_bounds) {$/;"	f	class:lm::builder::__anon9::Master	file:
CreateDecimalRepresentation	util/double-conversion/double-conversion.cc	/^void DoubleToStringConverter::CreateDecimalRepresentation($/;"	f	class:double_conversion::DoubleToStringConverter
CreateExponentialRepresentation	util/double-conversion/double-conversion.cc	/^void DoubleToStringConverter::CreateExponentialRepresentation($/;"	f	class:double_conversion::DoubleToStringConverter
CreateOrThrow	util/file.cc	/^int CreateOrThrow(const char *name) {$/;"	f	namespace:util
Current	lm/filter/phrase.cc	/^    Sentence Current() const {$/;"	f	class:lm::phrase::detail::Arc
Current	lm/filter/phrase.cc	/^    Sentence Current() const {$/;"	f	class:lm::phrase::detail::Vertex
Current	util/read_compressed.cc	/^    ReadBase *Current(ReadCompressed &thunk) { return thunk.internal_.get(); }$/;"	f	class:util::ReadBase
Current	util/stream/sort.hh	/^        const void *Current() const { return current_; }$/;"	f	class:util::stream::MergeQueue::Entry
CutToMaxSignificantDigits	util/double-conversion/strtod.cc	/^static void CutToMaxSignificantDigits(Vector<const char> buffer,$/;"	f	namespace:double_conversion
CutoffCount	lm/builder/ngram.hh	/^    uint64_t CutoffCount() const {$/;"	f	class:lm::builder::NGram
DISALLOW_COPY_AND_ASSIGN	util/double-conversion/utils.h	112;"	d
DISALLOW_IMPLICIT_CONSTRUCTORS	util/double-conversion/utils.h	124;"	d
DOUBLE_CONVERSION_BIGNUM_DTOA_H_	util/double-conversion/bignum-dtoa.h	29;"	d
DOUBLE_CONVERSION_BIGNUM_H_	util/double-conversion/bignum.h	29;"	d
DOUBLE_CONVERSION_CACHED_POWERS_H_	util/double-conversion/cached-powers.h	29;"	d
DOUBLE_CONVERSION_CORRECT_DOUBLE_OPERATIONS	util/double-conversion/utils.h	62;"	d
DOUBLE_CONVERSION_CORRECT_DOUBLE_OPERATIONS	util/double-conversion/utils.h	66;"	d
DOUBLE_CONVERSION_CORRECT_DOUBLE_OPERATIONS	util/double-conversion/utils.h	68;"	d
DOUBLE_CONVERSION_DIY_FP_H_	util/double-conversion/diy-fp.h	29;"	d
DOUBLE_CONVERSION_DOUBLE_CONVERSION_H_	util/double-conversion/double-conversion.h	29;"	d
DOUBLE_CONVERSION_DOUBLE_H_	util/double-conversion/ieee.h	29;"	d
DOUBLE_CONVERSION_FAST_DTOA_H_	util/double-conversion/fast-dtoa.h	29;"	d
DOUBLE_CONVERSION_FIXED_DTOA_H_	util/double-conversion/fixed-dtoa.h	29;"	d
DOUBLE_CONVERSION_STRTOD_H_	util/double-conversion/strtod.h	29;"	d
DOUBLE_CONVERSION_UTILS_H_	util/double-conversion/utils.h	29;"	d
Data	lm/trie_sort.cc	/^    const void *Data() const { return inner_.Data(); }$/;"	f	class:lm::ngram::trie::__anon22::PartialViewProxy
Data	lm/trie_sort.cc	/^    void *Data() { return inner_.Data(); }$/;"	f	class:lm::ngram::trie::__anon22::PartialViewProxy
Data	lm/trie_sort.hh	/^    const void *Data() const { return data_.get(); }$/;"	f	class:lm::ngram::trie::RecordReader
Data	lm/trie_sort.hh	/^    void *Data() { return data_.get(); }$/;"	f	class:lm::ngram::trie::RecordReader
Data	util/sized_iterator.hh	/^    const void *Data() const { return inner_.Data(); }$/;"	f	class:util::SizedProxy
Data	util/sized_iterator.hh	/^    const void *Data() const { return ptr_; }$/;"	f	class:util::SizedInnerIterator
Data	util/sized_iterator.hh	/^    void *Data() { return inner_.Data(); }$/;"	f	class:util::SizedProxy
Data	util/sized_iterator.hh	/^    void *Data() { return ptr_; }$/;"	f	class:util::SizedInnerIterator
Decode	lm/quantize.hh	/^        float Decode(std::size_t off) const { return begin_[off]; }$/;"	f	class:lm::ngram::SeparatelyQuantize::Bins
DecreaseBase	util/mmap.hh	/^    void DecreaseBase(uint64_t by) {$/;"	f	class:util::Rolling
Dedupe	lm/builder/corpus_count.cc	/^typedef util::ProbingHashTable<DedupeEntry, DedupeHash, DedupeEquals> Dedupe;$/;"	t	namespace:lm::builder::__anon5	file:
DedupeEntry	lm/builder/corpus_count.cc	/^struct DedupeEntry {$/;"	s	namespace:lm::builder::__anon5	file:
DedupeEquals	lm/builder/corpus_count.cc	/^    explicit DedupeEquals(std::size_t order) : size_(order * sizeof(WordIndex)) {}$/;"	f	class:lm::builder::__anon5::DedupeEquals
DedupeEquals	lm/builder/corpus_count.cc	/^class DedupeEquals : public std::binary_function<const WordIndex *, const WordIndex *, bool> {$/;"	c	namespace:lm::builder::__anon5	file:
DedupeHash	lm/builder/corpus_count.cc	/^    explicit DedupeHash(std::size_t order) : size_(order * sizeof(WordIndex)) {}$/;"	f	class:lm::builder::__anon5::DedupeHash
DedupeHash	lm/builder/corpus_count.cc	/^class DedupeHash : public std::unary_function<const WordIndex *, bool> {$/;"	c	namespace:lm::builder::__anon5	file:
DedupeMultiplier	lm/builder/corpus_count.cc	/^float CorpusCount::DedupeMultiplier(std::size_t order) {$/;"	f	class:lm::builder::CorpusCount
DeepSwap	util/joint_sort.hh	/^    void DeepSwap(JointIter &other) {$/;"	f	class:util::detail::JointIter
DefaultLazy	util/stream/sort.hh	/^    std::size_t DefaultLazy() {$/;"	f	class:util::stream::Sort
DetectCompressedMagic	util/read_compressed.cc	/^bool ReadCompressed::DetectCompressedMagic(const void *from_void) {$/;"	f	class:util::ReadCompressed
DetectMagic	util/read_compressed.cc	/^MagicResult DetectMagic(const void *from_void, std::size_t length) {$/;"	f	namespace:util::__anon41
DigitGen	util/double-conversion/fast-dtoa.cc	/^static bool DigitGen(DiyFp low,$/;"	f	namespace:double_conversion
DigitGenCounted	util/double-conversion/fast-dtoa.cc	/^static bool DigitGenCounted(DiyFp w,$/;"	f	namespace:double_conversion
Discount	lm/builder/discount.hh	/^struct Discount {$/;"	s	namespace:lm::builder
DiscountConfig	lm/builder/adjust_counts.hh	/^struct DiscountConfig {$/;"	s	namespace:lm::builder
DiskFlush	lm/trie_sort.cc	/^FILE *DiskFlush(const void *mem_begin, const void *mem_end, const std::string &temp_prefix) {$/;"	f	namespace:lm::ngram::trie::__anon22
DispatchARPAInput	lm/filter/format.hh	/^    DispatchARPAInput(Filter &filter, Output &output) : B(filter, output) {}$/;"	f	class:lm::DispatchARPAInput
DispatchARPAInput	lm/filter/format.hh	/^template <class Filter, class Output> class DispatchARPAInput : public DispatchInput<Filter, Output> {$/;"	c	namespace:lm
DispatchBuild	lm/search_hashed.cc	/^template <> void HashedSearch<BackoffValue>::DispatchBuild(util::FilePiece &f, const std::vector<uint64_t> &counts, const Config &config, const ProbingVocabulary &vocab, PositiveProbWarn &warn) {$/;"	f	class:lm::ngram::detail::HashedSearch
DispatchBuild	lm/search_hashed.cc	/^template <> void HashedSearch<RestValue>::DispatchBuild(util::FilePiece &f, const std::vector<uint64_t> &counts, const Config &config, const ProbingVocabulary &vocab, PositiveProbWarn &warn) {$/;"	f	class:lm::ngram::detail::HashedSearch
DispatchInput	lm/filter/format.hh	/^    DispatchInput(Filter &filter, Output &output) : filter_(filter), output_(output) {}$/;"	f	class:lm::DispatchInput
DispatchInput	lm/filter/format.hh	/^template <class Filter, class Output> class DispatchInput {$/;"	c	namespace:lm
DivModPowerOf2	util/double-conversion/fixed-dtoa.cc	/^  int DivModPowerOf2(int power) {$/;"	f	class:double_conversion::UInt128
DivideModuloIntBignum	util/double-conversion/bignum.cc	/^uint16_t Bignum::DivideModuloIntBignum(const Bignum& other) {$/;"	f	class:double_conversion::Bignum
DiyFp	util/double-conversion/diy-fp.h	/^  DiyFp() : f_(0), e_(0) {}$/;"	f	class:double_conversion::DiyFp
DiyFp	util/double-conversion/diy-fp.h	/^  DiyFp(uint64_t f, int e) : f_(f), e_(e) {}$/;"	f	class:double_conversion::DiyFp
DiyFp	util/double-conversion/diy-fp.h	/^class DiyFp {$/;"	c	namespace:double_conversion
DiyFpStrtod	util/double-conversion/strtod.cc	/^static bool DiyFpStrtod(Vector<const char> buffer,$/;"	f	namespace:double_conversion
DiyFpToUint64	util/double-conversion/ieee.h	/^  static uint64_t DiyFpToUint64(DiyFp diy_fp) {$/;"	f	class:double_conversion::Double
DontBhiksha	lm/bhiksha.cc	/^DontBhiksha::DontBhiksha(const void * \/*base*\/, uint64_t \/*max_offset*\/, uint64_t max_next, const Config &\/*config*\/) : $/;"	f	class:lm::ngram::trie::DontBhiksha
DontBhiksha	lm/bhiksha.hh	/^class DontBhiksha {$/;"	c	namespace:lm::ngram::trie
DontQuantize	lm/quantize.hh	/^    DontQuantize() {}$/;"	f	class:lm::ngram::DontQuantize
DontQuantize	lm/quantize.hh	/^class DontQuantize {$/;"	c	namespace:lm::ngram
Double	util/double-conversion/ieee.h	/^  Double() : d64_(0) {}$/;"	f	class:double_conversion::Double
Double	util/double-conversion/ieee.h	/^  explicit Double(DiyFp diy_fp)$/;"	f	class:double_conversion::Double
Double	util/double-conversion/ieee.h	/^  explicit Double(double d) : d64_(double_to_uint64(d)) {}$/;"	f	class:double_conversion::Double
Double	util/double-conversion/ieee.h	/^  explicit Double(uint64_t d64) : d64_(d64) {}$/;"	f	class:double_conversion::Double
Double	util/double-conversion/ieee.h	/^class Double {$/;"	c	namespace:double_conversion
Double	util/probing_hash_table.hh	/^    void Double(void *new_base, bool clear_new = true) {$/;"	f	class:util::ProbingHashTable
DoubleChunk	util/double-conversion/bignum.h	/^  typedef uint64_t DoubleChunk;$/;"	t	class:double_conversion::Bignum
DoubleIfNeeded	util/probing_hash_table.hh	/^    void DoubleIfNeeded() {$/;"	f	class:util::AutoProbing
DoubleSec	util/usage.cc	/^double DoubleSec(const struct timespec &tv) {$/;"	f	namespace:util::__anon45
DoubleSec	util/usage.cc	/^double DoubleSec(const struct timeval &tv) {$/;"	f	namespace:util::__anon45
DoubleSec	util/usage.cc	/^double DoubleSec(time_t tv) {$/;"	f	namespace:util::__anon45
DoubleStrtod	util/double-conversion/strtod.cc	/^static bool DoubleStrtod(Vector<const char> trimmed,$/;"	f	namespace:double_conversion
DoubleTo	util/probing_hash_table.hh	/^    std::size_t DoubleTo() const {$/;"	f	class:util::ProbingHashTable
DoubleToAscii	util/double-conversion/double-conversion.cc	/^void DoubleToStringConverter::DoubleToAscii(double v,$/;"	f	class:double_conversion::DoubleToStringConverter
DoubleToStringConverter	util/double-conversion/double-conversion.h	/^  DoubleToStringConverter(int flags,$/;"	f	class:double_conversion::DoubleToStringConverter
DoubleToStringConverter	util/double-conversion/double-conversion.h	/^class DoubleToStringConverter {$/;"	c	namespace:double_conversion
DtoaMode	util/double-conversion/double-conversion.h	/^  enum DtoaMode {$/;"	g	class:double_conversion::DoubleToStringConverter
DtoaToBignumDtoaMode	util/double-conversion/double-conversion.cc	/^static BignumDtoaMode DtoaToBignumDtoaMode($/;"	f	namespace:double_conversion
DumpSeparateFiles	lm/builder/print.hh	/^    static void DumpSeparateFiles(const VocabReconstitute &vocab, const std::string &file_base, util::stream::Chains &chains) {$/;"	f	class:lm::builder::Print
DumpStream	lm/builder/print.hh	/^    void DumpStream(NGramStream &stream, util::FakeOFStream &to) {$/;"	f	class:lm::builder::Print
DupOrThrow	util/file.cc	/^int DupOrThrow(int fd) {$/;"	f	namespace:util
EMIT_POSITIVE_EXPONENT_SIGN	util/double-conversion/double-conversion.h	/^    EMIT_POSITIVE_EXPONENT_SIGN = 1,$/;"	e	enum:double_conversion::DoubleToStringConverter::Flags
EMIT_TRAILING_DECIMAL_POINT	util/double-conversion/double-conversion.h	/^    EMIT_TRAILING_DECIMAL_POINT = 2,$/;"	e	enum:double_conversion::DoubleToStringConverter::Flags
EMIT_TRAILING_ZERO_AFTER_POINT	util/double-conversion/double-conversion.h	/^    EMIT_TRAILING_ZERO_AFTER_POINT = 4,$/;"	e	enum:double_conversion::DoubleToStringConverter::Flags
EOF	util/getopt.c	16;"	d	file:
ERR	util/getopt.c	17;"	d	file:
EXPENSIVE	lm/config.hh	/^  enum ARPALoadComplain {ALL, EXPENSIVE, NONE};$/;"	e	enum:lm::ngram::Config::ARPALoadComplain
EcmaScriptConverter	util/double-conversion/double-conversion.cc	/^const DoubleToStringConverter& DoubleToStringConverter::EcmaScriptConverter() {$/;"	f	class:double_conversion::DoubleToStringConverter
Empty	lm/filter/format.hh	/^    bool Empty() { return actual_ == 0; }$/;"	f	class:lm::InputBuffer
Empty	lm/filter/phrase.cc	/^    bool Empty() const {$/;"	f	class:lm::phrase::detail::Arc
Empty	lm/filter/phrase.cc	/^    bool Empty() const {$/;"	f	class:lm::phrase::detail::Vertex
Empty	util/stream/sort.hh	/^    bool Empty() const {$/;"	f	class:util::stream::MergeQueue
Encode	lm/quantize.hh	/^        uint64_t Encode(float value, size_t reserved) const {$/;"	f	class:lm::ngram::SeparatelyQuantize::Bins
EncodeBackoff	lm/quantize.hh	/^        uint64_t EncodeBackoff(float value) const {$/;"	f	class:lm::ngram::SeparatelyQuantize::Bins
EncodeProb	lm/quantize.hh	/^        uint64_t EncodeProb(float value) const {$/;"	f	class:lm::ngram::SeparatelyQuantize::Bins
EndLength	lm/filter/arpa_io.cc	/^void ARPAOutput::EndLength(unsigned int length) {$/;"	f	class:lm::ARPAOutput
EndLength	lm/filter/format.hh	/^    void EndLength(unsigned int length) {$/;"	f	class:lm::DispatchARPAInput
EndLength	lm/filter/format.hh	/^    void EndLength(unsigned int length) {$/;"	f	class:lm::MultipleARPAOutput
EndOfFileException	util/file.cc	/^EndOfFileException::EndOfFileException() throw() {$/;"	f	class:util::EndOfFileException
EndOfFileException	util/file.hh	/^class EndOfFileException : public Exception {$/;"	c	namespace:util
EndSentence	lm/virtual_interface.hh	/^    WordIndex EndSentence() const { return end_sentence_; }$/;"	f	class:lm::base::Vocabulary
EnsureCapacity	util/double-conversion/bignum.h	/^  void EnsureCapacity(int size) {$/;"	f	class:double_conversion::Bignum
EnsureRemaining	util/fake_ofstream.hh	/^    void EnsureRemaining(std::size_t amount) {$/;"	f	class:util::FakeOFStream
Enter	lm/builder/interpolate.cc	/^    void Enter(unsigned order_minus_1, NGram &gram) {$/;"	f	class:lm::builder::__anon8::Callback
Entry	util/probing_hash_table.hh	/^    typedef EntryT Entry;$/;"	t	class:util::AutoProbing
Entry	util/probing_hash_table.hh	/^    typedef EntryT Entry;$/;"	t	class:util::ProbingHashTable
Entry	util/stream/sort.hh	/^        Entry() {}$/;"	f	class:util::stream::MergeQueue::Entry
Entry	util/stream/sort.hh	/^        Entry(void *base, int fd, uint64_t offset, uint64_t amount, std::size_t buf_size) {$/;"	f	class:util::stream::MergeQueue::Entry
Entry	util/stream/sort.hh	/^    class Entry {$/;"	c	class:util::stream::MergeQueue
Entry	util/stream/sort.hh	/^    struct Entry {$/;"	s	class:util::stream::Offsets
EntryCompare	lm/trie_sort.hh	/^    explicit EntryCompare(unsigned char order) : order_(order) {}$/;"	f	class:lm::ngram::trie::EntryCompare
EntryCompare	lm/trie_sort.hh	/^class EntryCompare : public std::binary_function<const void*, const void*, bool> {$/;"	c	namespace:lm::ngram::trie
EntrySize	lm/trie_sort.hh	/^    std::size_t EntrySize() const { return entry_size_; }$/;"	f	class:lm::ngram::trie::RecordReader
EntrySize	util/sized_iterator.hh	/^    std::size_t EntrySize() const { return size_; }$/;"	f	class:util::SizedInnerIterator
EntrySize	util/stream/chain.hh	/^    std::size_t EntrySize() const {$/;"	f	class:util::stream::Chain
EnumerateVocab	lm/enumerate_vocab.hh	/^    EnumerateVocab() {}$/;"	f	class:lm::EnumerateVocab
EnumerateVocab	lm/enumerate_vocab.hh	/^class EnumerateVocab {$/;"	c	namespace:lm
Equal	util/double-conversion/bignum.h	/^  static bool Equal(const Bignum& a, const Bignum& b) {$/;"	f	class:double_conversion::Bignum
Equal	util/probing_hash_table.hh	/^    typedef EqualT Equal;$/;"	t	class:util::AutoProbing
Equal	util/probing_hash_table.hh	/^    typedef EqualT Equal;$/;"	t	class:util::ProbingHashTable
ErrnoException	util/exception.cc	/^ErrnoException::ErrnoException() throw() : errno_(errno) {$/;"	f	class:util::ErrnoException
ErrnoException	util/exception.hh	/^class ErrnoException : public Exception {$/;"	c	namespace:util
Error	util/exception.hh	/^    int Error() const throw() { return errno_; }$/;"	f	class:util::ErrnoException
ErsatzPRead	util/file.cc	/^void ErsatzPRead(int fd, void *to_void, std::size_t size, uint64_t off) {$/;"	f	namespace:util
ErsatzPWrite	util/file.cc	/^void ErsatzPWrite(int fd, const void *from_void, std::size_t size, uint64_t off) {$/;"	f	namespace:util
ErsatzProgress	util/ersatz_progress.cc	/^ErsatzProgress::ErsatzProgress() : current_(0), next_(std::numeric_limits<uint64_t>::max()), complete_(next_), out_(NULL) {}$/;"	f	class:util::ErsatzProgress
ErsatzProgress	util/ersatz_progress.cc	/^ErsatzProgress::ErsatzProgress(uint64_t complete, std::ostream *to, const std::string &message) $/;"	f	class:util::ErsatzProgress
ErsatzProgress	util/ersatz_progress.hh	/^class ErsatzProgress {$/;"	c	namespace:util
EstimatePower	util/double-conversion/bignum-dtoa.cc	/^static int EstimatePower(int exponent) {$/;"	f	namespace:double_conversion
Evaluate	lm/filter/phrase.cc	/^bool Union::Evaluate() {$/;"	f	class:lm::phrase::Union
Evaluate	lm/filter/phrase.cc	/^template <class Output> void Multiple::Evaluate(const StringPiece &line, Output &output) {$/;"	f	class:lm::phrase::Multiple
Exception	util/exception.cc	/^Exception::Exception() throw() {}$/;"	f	class:util::Exception
Exception	util/exception.cc	/^Exception::Exception(const Exception &from) : std::exception() {$/;"	f	class:util::Exception
Exception	util/exception.hh	/^class Exception : public std::exception {$/;"	c	namespace:util
ExceptionTag	util/exception.hh	/^    template <class T> struct ExceptionTag {$/;"	s	class:util::Exception
Exit	lm/builder/interpolate.cc	/^    void Exit(unsigned, const NGram &) const {}$/;"	f	class:lm::builder::__anon8::Callback
Exponent	util/double-conversion/ieee.h	/^  int Exponent() const {$/;"	f	class:double_conversion::Double
Exponent	util/double-conversion/ieee.h	/^  int Exponent() const {$/;"	f	class:double_conversion::Single
ExtendLeft	lm/left.hh	/^    bool ExtendLeft(const ChartState &in, unsigned char &next_use, unsigned char extend_length, const float *back_in, float *back_out) {$/;"	f	class:lm::ngram::RuleScore
ExtendLeft	lm/model.cc	/^template <class Search, class VocabularyT> FullScoreReturn GenericModel<Search, VocabularyT>::ExtendLeft($/;"	f	class:lm::ngram::detail::GenericModel
ExtendLoop	lm/partial.hh	/^template <class Model> ExtendReturn ExtendLoop($/;"	f	namespace:lm::ngram
ExtendReturn	lm/partial.hh	/^struct ExtendReturn {$/;"	s	namespace:lm::ngram
Extends	lm/search_trie.cc	/^    bool Extends(unsigned char order, const WordIndex *words) {$/;"	f	class:lm::ngram::trie::__anon20::BackoffMessages
ExtractNonRolling	util/mmap.cc	/^void *Rolling::ExtractNonRolling(scoped_memory &out, uint64_t index, std::size_t size) {$/;"	f	class:util::Rolling
FAST_DTOA_PRECISION	util/double-conversion/fast-dtoa.h	/^  FAST_DTOA_PRECISION$/;"	e	enum:double_conversion::FastDtoaMode
FAST_DTOA_SHORTEST	util/double-conversion/fast-dtoa.h	/^  FAST_DTOA_SHORTEST,$/;"	e	enum:double_conversion::FastDtoaMode
FAST_DTOA_SHORTEST_SINGLE	util/double-conversion/fast-dtoa.h	/^  FAST_DTOA_SHORTEST_SINGLE,$/;"	e	enum:double_conversion::FastDtoaMode
FD	util/file.hh	/^    int FD() const { return fd_; }$/;"	f	class:util::FDException
FDException	util/file.cc	/^FDException::FDException(int fd) throw() : fd_(fd), name_guess_(NameFromFD(fd)) {$/;"	f	class:util::FDException
FDException	util/file.hh	/^class FDException : public ErrnoException {$/;"	c	namespace:util
FDOpenOrThrow	util/file.cc	/^std::FILE *FDOpenOrThrow(scoped_fd &file) {$/;"	f	namespace:util
FDOpenReadOrThrow	util/file.cc	/^std::FILE *FDOpenReadOrThrow(scoped_fd &file) {$/;"	f	namespace:util
FIXED	util/double-conversion/double-conversion.h	/^    FIXED,$/;"	e	enum:double_conversion::DoubleToStringConverter::DtoaMode
FMakeTemp	util/file.cc	/^std::FILE *FMakeTemp(const StringPiece &base) {$/;"	f	namespace:util
FSyncOrThrow	util/file.cc	/^void FSyncOrThrow(int fd) {$/;"	f	namespace:util
FakeOFStream	util/fake_ofstream.hh	/^    explicit FakeOFStream(int out = -1, std::size_t buffer_size = 1048576)$/;"	f	class:util::FakeOFStream
FakeOFStream	util/fake_ofstream.hh	/^class FakeOFStream {$/;"	c	namespace:util
FastDtoa	util/double-conversion/fast-dtoa.cc	/^bool FastDtoa(double v,$/;"	f	namespace:double_conversion
FastDtoaMode	util/double-conversion/fast-dtoa.h	/^enum FastDtoaMode {$/;"	g	namespace:double_conversion
FastFixedDtoa	util/double-conversion/fixed-dtoa.cc	/^bool FastFixedDtoa(double v,$/;"	f	namespace:double_conversion
FastMakeNode	lm/search_hashed.hh	/^    bool FastMakeNode(const WordIndex *begin, const WordIndex *end, Node &node) const {$/;"	f	class:lm::ngram::detail::HashedSearch
FastMakeNode	lm/search_trie.hh	/^    bool FastMakeNode(const WordIndex *begin, const WordIndex *end, Node &node) const {$/;"	f	class:lm::ngram::trie::TrieSearch
File	lm/filter/arpa_io.hh	/^    const std::string &File() const throw() { return file_name_; }$/;"	f	class:lm::ARPAOutputException
File	util/stream/sort.hh	/^    int File() const { return log_; }$/;"	f	class:util::stream::Offsets
FileBuffer	util/stream/io.hh	/^    explicit FileBuffer(int fd) : file_(fd) {}$/;"	f	class:util::stream::FileBuffer
FileBuffer	util/stream/io.hh	/^class FileBuffer {$/;"	c	namespace:util::stream
FileName	util/file_piece.hh	/^    const std::string &FileName() const { return file_name_; }$/;"	f	class:util::FilePiece
FileOpenException	util/exception.hh	/^	FileOpenException() throw() {}$/;"	f	class:util::FileOpenException
FileOpenException	util/exception.hh	/^class FileOpenException : public Exception {$/;"	c	namespace:util
FilePiece	util/file_piece.cc	/^FilePiece::FilePiece(const char *name, std::ostream *show_progress, std::size_t min_buffer) : $/;"	f	class:util::FilePiece
FilePiece	util/file_piece.cc	/^FilePiece::FilePiece(int fd, const char *name, std::ostream *show_progress, std::size_t min_buffer) : $/;"	f	class:util::FilePiece
FilePiece	util/file_piece.cc	/^FilePiece::FilePiece(std::istream &stream, const char *name, std::size_t min_buffer) :$/;"	f	class:util::FilePiece
FilePiece	util/file_piece.hh	/^class FilePiece {$/;"	c	namespace:util
Fill	lm/filter/thread.hh	/^    InputBuffer &Fill(uint64_t sequence) {$/;"	f	class:lm::ThreadBatch
FillDigits32	util/double-conversion/fixed-dtoa.cc	/^static void FillDigits32(uint32_t number, Vector<char> buffer, int* length) {$/;"	f	namespace:double_conversion
FillDigits32FixedLength	util/double-conversion/fixed-dtoa.cc	/^static void FillDigits32FixedLength(uint32_t number, int requested_length,$/;"	f	namespace:double_conversion
FillDigits64	util/double-conversion/fixed-dtoa.cc	/^static void FillDigits64(uint64_t number, Vector<char> buffer, int* length) {$/;"	f	namespace:double_conversion
FillDigits64FixedLength	util/double-conversion/fixed-dtoa.cc	/^static void FillDigits64FixedLength(uint64_t number, int requested_length,$/;"	f	namespace:double_conversion
FillFractionals	util/double-conversion/fixed-dtoa.cc	/^static void FillFractionals(uint64_t fractionals, int exponent,$/;"	f	namespace:double_conversion
Filter	lm/filter/wrapper.hh	/^    typedef FilterT Filter;$/;"	t	class:lm::ContextFilter
FilterWorker	lm/filter/thread.hh	/^    FilterWorker(const Filter &filter, util::PCQueue<Request> &done) : filter_(filter), done_(done) {}$/;"	f	class:lm::FilterWorker
FilterWorker	lm/filter/thread.hh	/^template <class Batch, class Filter> class FilterWorker {$/;"	c	namespace:lm
Finalize	util/double-conversion/utils.h	/^  char* Finalize() {$/;"	f	class:double_conversion::StringBuilder
Find	lm/trie.cc	/^template <class Bhiksha> util::BitAddress BitPackedMiddle<Bhiksha>::Find(WordIndex word, NodeRange &range, uint64_t &pointer) const {$/;"	f	class:lm::ngram::trie::BitPackedMiddle
Find	lm/trie.cc	/^util::BitAddress BitPackedLongest::Find(WordIndex word, const NodeRange &range) const {$/;"	f	class:lm::ngram::trie::BitPackedLongest
Find	lm/trie.hh	/^    UnigramPointer Find(WordIndex word, NodeRange &next) const {$/;"	f	class:lm::ngram::trie::Unigram
Find	util/probing_hash_table.hh	/^    template <class Key> bool Find(const Key key, ConstIterator &out) const {$/;"	f	class:util::AutoProbing
Find	util/probing_hash_table.hh	/^    template <class Key> bool Find(const Key key, ConstIterator &out) const {$/;"	f	class:util::ProbingHashTable
Find	util/tokenize_piece.hh	/^    StringPiece Find(const StringPiece &in) const {$/;"	f	class:util::AnyCharacter
Find	util/tokenize_piece.hh	/^    StringPiece Find(const StringPiece &in) const {$/;"	f	class:util::AnyCharacterLast
Find	util/tokenize_piece.hh	/^    StringPiece Find(const StringPiece &in) const {$/;"	f	class:util::BoolCharacter
Find	util/tokenize_piece.hh	/^    StringPiece Find(const StringPiece &in) const {$/;"	f	class:util::MultiCharacter
Find	util/tokenize_piece.hh	/^    StringPiece Find(const StringPiece &in) const {$/;"	f	class:util::SingleCharacter
FindBitPacked	lm/trie.cc	/^bool FindBitPacked(const void *base, uint64_t key_mask, uint8_t key_bits, uint8_t total_bits, uint64_t begin_index, uint64_t end_index, const uint64_t max_vocab, const uint64_t key, uint64_t &at_index) {$/;"	f	namespace:lm::ngram::trie::__anon21
FindBlanks	lm/search_trie.cc	/^    FindBlanks(unsigned char order, const ProbBackoff *unigrams, SRISucks &messages)$/;"	f	class:lm::ngram::trie::__anon20::FindBlanks
FindBlanks	lm/search_trie.cc	/^class FindBlanks {$/;"	c	namespace:lm::ngram::trie::__anon20	file:
FindDelimiterOrEOF	util/file_piece.cc	/^const char *FilePiece::FindDelimiterOrEOF(const bool *delim)  {$/;"	f	class:util::FilePiece
FindDifference	lm/builder/adjust_counts.cc	/^const WordIndex* FindDifference(const NGram &full, const NGram &lower_last) {$/;"	f	namespace:lm::builder::__anon4
FindLower	lm/search_hashed.cc	/^template <class Value> void FindLower($/;"	f	namespace:lm::ngram::__anon19
FindOrInsert	lm/vocab.hh	/^    WordIndex FindOrInsert(const StringPiece &word) {$/;"	f	class:lm::ngram::GrowableVocab
FindOrInsert	util/probing_hash_table.hh	/^    template <class T> bool FindOrInsert(const T &t, MutableIterator &out) {$/;"	f	class:util::AutoProbing
FindOrInsert	util/probing_hash_table.hh	/^    template <class T> bool FindOrInsert(const T &t, MutableIterator &out) {$/;"	f	class:util::ProbingHashTable
FindStringPiece	util/string_piece_hash.hh	/^template <class T> typename T::const_iterator FindStringPiece(const T &t, const StringPiece &key) {$/;"	f
FindStringPiece	util/string_piece_hash.hh	/^template <class T> typename T::iterator FindStringPiece(T &t, const StringPiece &key) {$/;"	f
Finish	lm/filter/arpa_io.cc	/^void ARPAOutput::Finish() {$/;"	f	class:lm::ARPAOutput
Finish	lm/filter/format.hh	/^    void Finish() { B::output_.Finish(); }$/;"	f	class:lm::DispatchARPAInput
Finish	lm/filter/format.hh	/^    void Finish() {$/;"	f	class:lm::MultipleARPAOutput
Finish	lm/left.hh	/^    float Finish() {$/;"	f	class:lm::ngram::RuleScore
Finish	util/fake_ofstream.hh	/^    void Finish() {$/;"	f	class:util::FakeOFStream
FinishFile	lm/binary_format.cc	/^void BinaryFormat::FinishFile(const Config &config, ModelType model_type, unsigned int search_version, const std::vector<uint64_t> &counts) {$/;"	f	class:lm::ngram::BinaryFormat
Finished	util/ersatz_progress.hh	/^    void Finished() {$/;"	f	class:util::ErsatzProgress
Finished	util/stream/multi_progress.cc	/^void MultiProgress::Finished() {$/;"	f	class:util::stream::MultiProgress
FinishedAdding	lm/search_trie.cc	/^    void FinishedAdding() {$/;"	f	class:lm::ngram::trie::__anon20::BackoffMessages	file:
FinishedAppending	util/stream/sort.hh	/^    void FinishedAppending() {$/;"	f	class:util::stream::Offsets
FinishedInserting	util/probing_hash_table.hh	/^    void FinishedInserting() {}$/;"	f	class:util::ProbingHashTable
FinishedLoading	lm/bhiksha.cc	/^void ArrayBhiksha::FinishedLoading(const Config &config) {$/;"	f	class:lm::ngram::trie::ArrayBhiksha
FinishedLoading	lm/bhiksha.hh	/^    void FinishedLoading(const Config &\/*config*\/) {}$/;"	f	class:lm::ngram::trie::DontBhiksha
FinishedLoading	lm/quantize.cc	/^void SeparatelyQuantize::FinishedLoading(const Config &config) {$/;"	f	class:lm::ngram::SeparatelyQuantize
FinishedLoading	lm/quantize.hh	/^    void FinishedLoading(const Config &) {}$/;"	f	class:lm::ngram::DontQuantize
FinishedLoading	lm/trie.cc	/^template <class Bhiksha> void BitPackedMiddle<Bhiksha>::FinishedLoading(uint64_t next_end, const Config &config) {$/;"	f	class:lm::ngram::trie::BitPackedMiddle
FinishedLoading	lm/vocab.cc	/^void ProbingVocabulary::FinishedLoading() {$/;"	f	class:lm::ngram::ProbingVocabulary
FinishedLoading	lm/vocab.cc	/^void SortedVocabulary::FinishedLoading(ProbBackoff *reorder_vocab) {$/;"	f	class:lm::ngram::SortedVocabulary
FinishedLoading	lm/vocab.hh	/^    template <class Weights> void FinishedLoading(Weights * \/*reorder_vocab*\/) {$/;"	f	class:lm::ngram::ProbingVocabulary
FirstCombine	lm/trie_sort.cc	/^struct FirstCombine {$/;"	s	namespace:lm::ngram::trie::__anon22	file:
FirstIntersection	util/multi_intersection.hh	/^template <class Iterator, class Less> boost::optional<typename std::iterator_traits<Iterator>::value_type> FirstIntersection(std::vector<boost::iterator_range<Iterator> > &sets, const Less less) {$/;"	f	namespace:util
FirstIntersection	util/multi_intersection.hh	/^template <class Iterator> boost::optional<typename std::iterator_traits<Iterator>::value_type> FirstIntersection(std::vector<boost::iterator_range<Iterator> > &sets) {$/;"	f	namespace:util
FirstIntersectionSorted	util/multi_intersection.hh	/^template <class Iterator, class Less> boost::optional<typename std::iterator_traits<Iterator>::value_type> FirstIntersectionSorted(std::vector<boost::iterator_range<Iterator> > &sets, const Less &less = std::less<typename std::iterator_traits<Iterator>::value_type>()) {$/;"	f	namespace:util::detail
FixedArray	util/fixed_array.hh	/^    FixedArray() $/;"	f	class:util::FixedArray
FixedArray	util/fixed_array.hh	/^    FixedArray(const FixedArray &from) {$/;"	f	class:util::FixedArray
FixedArray	util/fixed_array.hh	/^    explicit FixedArray(std::size_t limit) {$/;"	f	class:util::FixedArray
FixedArray	util/fixed_array.hh	/^template <class T> class FixedArray {$/;"	c	namespace:util
FixedWidthParameters	lm/binary_format.hh	/^struct FixedWidthParameters {$/;"	s	namespace:lm::ngram
FixupMultiply10	util/double-conversion/bignum-dtoa.cc	/^static void FixupMultiply10(int estimated_power, bool is_even,$/;"	f	namespace:double_conversion
Flags	util/double-conversion/double-conversion.h	/^  enum Flags {$/;"	g	class:double_conversion::DoubleToStringConverter
Flags	util/double-conversion/double-conversion.h	/^  enum Flags {$/;"	g	class:double_conversion::StringToDoubleConverter
FloatEnc	util/bit_packing.hh	/^typedef union { float f; uint32_t i; } FloatEnc;$/;"	t	namespace:util	typeref:union:util::__anon27
FloatSize	util/bit_packing.cc	/^typedef StaticCheck<sizeof(float) == 4>::StaticAssertionPassed FloatSize;$/;"	t	namespace:util::__anon26	file:
Flush	lm/filter/format.hh	/^    template <class Output> void Flush(Output &output) {$/;"	f	class:lm::BinaryOutputBuffer
Flush	lm/filter/format.hh	/^    template <class Output> void Flush(Output &output) {$/;"	f	class:lm::MultipleOutputBuffer
Flush	lm/filter/phrase.hh	/^    void Flush() const {}$/;"	f	class:lm::phrase::Multiple
Flush	lm/filter/thread.hh	/^    template <class RealOutput> void Flush(RealOutput &output) {$/;"	f	class:lm::ThreadBatch
Flush	lm/filter/thread.hh	/^    void Flush() {$/;"	f	class:lm::Controller
Flush	lm/filter/vocab.hh	/^    void Flush() const {}$/;"	f	class:lm::vocab::Multiple
Flush	lm/filter/wrapper.hh	/^    void Flush() const {}$/;"	f	class:lm::BinaryFilter
Flush	lm/filter/wrapper.hh	/^    void Flush() const {}$/;"	f	class:lm::ContextFilter
Flush	util/fake_ofstream.hh	/^    void Flush() {$/;"	f	class:util::FakeOFStream
FlushInput	lm/filter/thread.hh	/^    void FlushInput() {$/;"	f	class:lm::Controller
FormatLoadException	lm/lm_exception.cc	/^FormatLoadException::FormatLoadException() throw() {}$/;"	f	class:lm::FormatLoadException
FormatLoadException	lm/lm_exception.hh	/^class FormatLoadException : public LoadException {$/;"	c	namespace:lm
Found	lm/quantize.hh	/^        bool Found() const { return address_.base != NULL; }$/;"	f	class:lm::ngram::SeparatelyQuantize::LongestPointer
Found	lm/quantize.hh	/^        bool Found() const { return address_.base != NULL; }$/;"	f	class:lm::ngram::SeparatelyQuantize::MiddlePointer
Found	lm/quantize.hh	/^        bool Found() const {$/;"	f	class:lm::ngram::DontQuantize::LongestPointer
Found	lm/quantize.hh	/^        bool Found() const {$/;"	f	class:lm::ngram::DontQuantize::MiddlePointer
Found	lm/search_hashed.hh	/^    bool Found() const {$/;"	f	class:lm::ngram::detail::LongestPointer
Found	lm/trie.hh	/^    bool Found() const { return to_ != NULL; }$/;"	f	class:lm::ngram::trie::UnigramPointer
Found	lm/value.hh	/^    bool Found() const { return to_ != 0; }$/;"	f	class:lm::ngram::GenericProbingProxy
Found	lm/value.hh	/^    bool Found() const { return to_ != 0; }$/;"	f	class:lm::ngram::GenericTrieUnigramProxy
FreeAll	util/pool.cc	/^void Pool::FreeAll() {$/;"	f	class:util::Pool
FreeMiddles	lm/search_trie.hh	/^    void FreeMiddles() {$/;"	f	class:lm::ngram::trie::TrieSearch
FromMax	util/bit_packing.hh	/^  void FromMax(uint64_t max_value) {$/;"	f	struct:util::BitsMask
Full	lm/trie_sort.hh	/^    FILE *Full(unsigned char order) {$/;"	f	class:lm::ngram::trie::SortedFiles
FullPrint	lm/ngram_query.hh	/^struct FullPrint : public BasicPrint {$/;"	s	namespace:lm::ngram
FullScore	lm/model.cc	/^template <class Search, class VocabularyT> FullScoreReturn GenericModel<Search, VocabularyT>::FullScore(const State &in_state, const WordIndex new_word, State &out_state) const {$/;"	f	class:lm::ngram::detail::GenericModel
FullScore	lm/wrappers/nplm.cc	/^FullScoreReturn Model::FullScore(const State &from, const WordIndex new_word, State &out_state) const {$/;"	f	class:lm::np::Model
FullScoreForgotState	lm/model.cc	/^template <class Search, class VocabularyT> FullScoreReturn GenericModel<Search, VocabularyT>::FullScoreForgotState(const WordIndex *context_rbegin, const WordIndex *context_rend, const WordIndex new_word, State &out_state) const {$/;"	f	class:lm::ngram::detail::GenericModel
FullScoreForgotState	lm/wrappers/nplm.cc	/^FullScoreReturn Model::FullScoreForgotState(const WordIndex *context_rbegin, const WordIndex *context_rend, const WordIndex new_word, State &out_state) const {$/;"	f	class:lm::np::Model
FullScoreReturn	lm/return.hh	/^struct FullScoreReturn {$/;"	s	namespace:lm
GZException	util/read_compressed.cc	/^GZException::GZException() throw() {}$/;"	f	class:util::GZException
GZException	util/read_compressed.hh	/^class GZException : public CompressedException {$/;"	c	namespace:util
GZip	util/read_compressed.cc	/^    GZip(const void *base, std::size_t amount) {$/;"	f	class:util::__anon41::GZip
GZip	util/read_compressed.cc	/^class GZip {$/;"	c	namespace:util::__anon41	file:
GenerateCountedDigits	util/double-conversion/bignum-dtoa.cc	/^static void GenerateCountedDigits(int count, int* decimal_point,$/;"	f	namespace:double_conversion
GenerateShortestDigits	util/double-conversion/bignum-dtoa.cc	/^static void GenerateShortestDigits(Bignum* numerator, Bignum* denominator,$/;"	f	namespace:double_conversion
GenericModel	lm/model.cc	/^template <class Search, class VocabularyT> GenericModel<Search, VocabularyT>::GenericModel(const char *file, const Config &init_config) : backing_(init_config) {$/;"	f	class:lm::ngram::detail::GenericModel
GenericModel	lm/model.hh	/^template <class Search, class VocabularyT> class GenericModel : public base::ModelFacade<GenericModel<Search, VocabularyT>, State, VocabularyT> {$/;"	c	namespace:lm::ngram::detail
GenericProbingProxy	lm/value.hh	/^    GenericProbingProxy() : to_(0) {}$/;"	f	class:lm::ngram::GenericProbingProxy
GenericProbingProxy	lm/value.hh	/^    explicit GenericProbingProxy(const Weights &to) : to_(&to) {}$/;"	f	class:lm::ngram::GenericProbingProxy
GenericProbingProxy	lm/value.hh	/^template <class Weights> class GenericProbingProxy {$/;"	c	namespace:lm::ngram
GenericStreams	util/stream/multi_stream.hh	/^    GenericStreams() {}$/;"	f	class:util::stream::GenericStreams
GenericStreams	util/stream/multi_stream.hh	/^    GenericStreams(const ChainPositions &positions) {$/;"	f	class:util::stream::GenericStreams
GenericStreams	util/stream/multi_stream.hh	/^template <class T> class GenericStreams : public util::FixedArray<T> {$/;"	c	namespace:util::stream
GenericTrieUnigramProxy	lm/value.hh	/^    GenericTrieUnigramProxy() : to_(0) {}$/;"	f	class:lm::ngram::GenericTrieUnigramProxy
GenericTrieUnigramProxy	lm/value.hh	/^    explicit GenericTrieUnigramProxy(const Weights &to) : to_(&to) {}$/;"	f	class:lm::ngram::GenericTrieUnigramProxy
GenericTrieUnigramProxy	lm/value.hh	/^template <class Weights> class GenericTrieUnigramProxy {$/;"	c	namespace:lm::ngram
Get	lm/builder/discount.hh	/^  float Get(uint64_t count) const {$/;"	f	struct:lm::builder::Discount
Get	lm/builder/ngram_stream.hh	/^    const void *Get() const { return stream_.Get(); }$/;"	f	class:lm::builder::NGramStream
Get	lm/builder/ngram_stream.hh	/^    void *Get() { return stream_.Get(); }$/;"	f	class:lm::builder::NGramStream
Get	util/stream/block.hh	/^    const void *Get() const { return mem_; }$/;"	f	class:util::stream::Block
Get	util/stream/block.hh	/^    void *Get() { return mem_; }$/;"	f	class:util::stream::Block
Get	util/stream/stream.hh	/^    const void *Get() const { return current_; }$/;"	f	class:util::stream::Stream
Get	util/stream/stream.hh	/^    void *Get() { return current_; }$/;"	f	class:util::stream::Stream
GetBlank	lm/search_trie.cc	/^    ProbBackoff GetBlank(unsigned char total_order, unsigned char order, const WordIndex *indices) {$/;"	f	class:lm::ngram::trie::__anon20::SRISucks
GetCachedPowerForBinaryExponentRange	util/double-conversion/cached-powers.cc	/^void PowersOfTenCache::GetCachedPowerForBinaryExponentRange($/;"	f	class:double_conversion::PowersOfTenCache
GetCachedPowerForDecimalExponent	util/double-conversion/cached-powers.cc	/^void PowersOfTenCache::GetCachedPowerForDecimalExponent(int requested_exponent,$/;"	f	class:double_conversion::PowersOfTenCache
GetChain	util/stream/chain.hh	/^    const Chain &GetChain() const { return *chain_; }$/;"	f	class:util::stream::ChainPosition
GetDelegate	util/sized_iterator.hh	/^    const Delegate &GetDelegate() const { return delegate_; }$/;"	f	class:util::SizedCompare
GetHeader	lm/builder/output.hh	/^    const HeaderInfo &GetHeader() const { return header_; }$/;"	f	class:lm::builder::Output
GetHeader	lm/builder/output.hh	/^inline const HeaderInfo &OutputHook::GetHeader() const {$/;"	f	class:lm::builder::OutputHook
GetKey	lm/builder/corpus_count.cc	/^  Key GetKey() const { return key; }$/;"	f	struct:lm::builder::__anon5::DedupeEntry
GetKey	lm/builder/corpus_count.cc	/^  uint64_t GetKey() const { return key; }$/;"	f	struct:lm::builder::__anon5::VocabEntry
GetKey	lm/search_hashed.hh	/^  uint64_t GetKey() const {$/;"	f	struct:lm::ngram::detail::ProbEntry
GetKey	lm/value.hh	/^    Key GetKey() const { return key; }$/;"	f	struct:lm::ngram::RestValue::ProbingEntry
GetKey	lm/value.hh	/^    uint64_t GetKey() const { return key; }$/;"	f	struct:lm::ngram::BackoffValue::ProbingEntry
GetKey	lm/vocab.hh	/^  uint64_t GetKey() const { return key; }$/;"	f	struct:lm::ngram::ProbingVocabularyEntry
GetKey	util/joint_sort.hh	/^      const typename std::iterator_traits<KeyIter>::value_type &GetKey() const { return key; }$/;"	f	struct:util::detail::JointProxy::__anon36
GetKey	util/joint_sort.hh	/^    typename std::iterator_traits<KeyIter>::reference GetKey() const {$/;"	f	class:util::detail::JointProxy
GetState	lm/model.cc	/^template <class Search, class VocabularyT> void GenericModel<Search, VocabularyT>::GetState(const WordIndex *context_rbegin, const WordIndex *context_rend, State &out_state) const {$/;"	f	class:lm::ngram::detail::GenericModel
GetTables	lm/quantize.hh	/^    const Bins *GetTables(unsigned char order_minus_2) const { return tables_[order_minus_2]; }$/;"	f	class:lm::ngram::SeparatelyQuantize
GetVocabFD	lm/builder/output.hh	/^    int GetVocabFD() const { return vocab_fd_; }$/;"	f	class:lm::builder::Output
GetVocabFD	lm/builder/output.hh	/^inline int OutputHook::GetVocabFD() const {$/;"	f	class:lm::builder::OutputHook
GetVocabulary	lm/facade.hh	/^    const Vocabulary &GetVocabulary() const { return *static_cast<const Vocabulary*>(&BaseVocabulary()); }$/;"	f	class:lm::base::ModelFacade
GetVocabulary_ptr	lm/facade.hh	/^    const Vocabulary* GetVocabulary_ptr() const { return static_cast<const Vocabulary*>(&BaseVocabulary()); }$/;"	f	class:lm::base::ModelFacade
GetWall	util/usage.cc	/^Wall GetWall() {$/;"	f	namespace:util::__anon45
Gram	lm/builder/interpolate.cc	/^    void Gram(unsigned \/*order_minus_1*\/, float full_backoff, ProbBackoff &out) const {$/;"	f	class:lm::builder::__anon8::OutputProbBackoff
Gram	lm/builder/interpolate.cc	/^    void Gram(unsigned order_minus_1, float full_backoff, ProbBackoff &out) {$/;"	f	class:lm::builder::__anon8::OutputQ
Gram	lm/search_trie.cc	/^  Gram(const WordIndex *in_begin, unsigned char order) : begin(in_begin), end(in_begin + order) {}$/;"	f	struct:lm::ngram::trie::__anon20::Gram
Gram	lm/search_trie.cc	/^struct Gram {$/;"	s	namespace:lm::ngram::trie::__anon20	file:
Greater	util/stream/sort.hh	/^        explicit Greater(const Compare &compare) : compare_(compare) {}$/;"	f	class:util::stream::MergeQueue::Greater
Greater	util/stream/sort.hh	/^    class Greater : public std::binary_function<const Entry &, const Entry &, bool> {$/;"	c	class:util::stream::MergeQueue
Grisu3	util/double-conversion/fast-dtoa.cc	/^static bool Grisu3(double v,$/;"	f	namespace:double_conversion
Grisu3Counted	util/double-conversion/fast-dtoa.cc	/^static bool Grisu3Counted(double v,$/;"	f	namespace:double_conversion
GrowForSearch	lm/binary_format.cc	/^void *BinaryFormat::GrowForSearch(std::size_t memory_size, std::size_t vocab_pad, void *&vocab_base) {$/;"	f	class:lm::ngram::BinaryFormat
GrowableVocab	lm/vocab.hh	/^    template <class NewWordConstruct> GrowableVocab(WordIndex initial_size, const NewWordConstruct &new_word_construct = NewWordAction())$/;"	f	class:lm::ngram::GrowableVocab
GrowableVocab	lm/vocab.hh	/^template <class NewWordAction = NoOpUniqueWords> class GrowableVocab {$/;"	c	namespace:lm::ngram
GuardLarge	util/file.cc	/^std::size_t GuardLarge(std::size_t size) {$/;"	f	namespace:util::__anon30
GuessPhysicalMemory	util/usage.cc	/^uint64_t GuessPhysicalMemory() {$/;"	f	namespace:util
HASH_PROBING	lm/model_type.hh	/^const ModelType HASH_PROBING = PROBING;$/;"	m	namespace:lm::ngram
HandleError	util/read_compressed.cc	/^    void HandleError(int value) {$/;"	f	class:util::__anon41::BZip	file:
HandleError	util/read_compressed.cc	/^    void HandleError(lzma_ret value) {$/;"	f	class:util::__anon41::XZip	file:
HandleSpecialValues	util/double-conversion/double-conversion.cc	/^bool DoubleToStringConverter::HandleSpecialValues($/;"	f	class:double_conversion::DoubleToStringConverter
HandleStrerror	util/exception.cc	/^const char *HandleStrerror(const char *ret, const char * \/*buf*\/) {$/;"	f	namespace:util::__anon29
HandleStrerror	util/exception.cc	/^const char *HandleStrerror(int ret, const char *buf) {$/;"	f	namespace:util::__anon29
Handler	util/thread_pool.hh	/^    typedef HandlerT Handler;$/;"	t	class:util::ThreadPool
Handler	util/thread_pool.hh	/^    typedef HandlerT Handler;$/;"	t	class:util::Worker
HasExtension	lm/blank.hh	/^inline bool HasExtension(const float &backoff) {$/;"	f	namespace:lm::ngram
Hash	lm/filter/phrase.hh	/^typedef uint64_t Hash;$/;"	t	namespace:lm::phrase
Hash	util/probing_hash_table.hh	/^    typedef HashT Hash;$/;"	t	class:util::AutoProbing
Hash	util/probing_hash_table.hh	/^    typedef HashT Hash;$/;"	t	class:util::ProbingHashTable
HashBufferEntry	lm/builder/initial_probabilities.cc	/^struct HashBufferEntry : public BufferEntry {$/;"	s	namespace:lm::builder::__anon7	file:
HashForVocab	lm/vocab.cc	/^uint64_t HashForVocab(const char *str, std::size_t len) {$/;"	f	namespace:lm::ngram::detail
HashForVocab	lm/vocab.hh	/^inline uint64_t HashForVocab(const StringPiece &str) {$/;"	f	namespace:lm::ngram::detail
HashGamma	lm/builder/hash_gamma.hh	/^struct HashGamma {$/;"	s	namespace:lm::builder
HashedSearch	lm/search_hashed.hh	/^template <class Value> class HashedSearch {$/;"	c	namespace:lm::ngram::detail
Have	lm/builder/output.hh	/^    bool Have(HookType hook_type) const {$/;"	f	class:lm::builder::Output
HeaderInfo	lm/builder/header_info.hh	/^  HeaderInfo() {}$/;"	f	struct:HeaderInfo
HeaderInfo	lm/builder/header_info.hh	/^  HeaderInfo(const std::string& input_file_in, uint64_t token_count_in, const std::vector<uint64_t> &counts_pruned_in)$/;"	f	struct:HeaderInfo
HeaderInfo	lm/builder/header_info.hh	/^struct HeaderInfo {$/;"	s
HexCharOfValue	util/double-conversion/bignum.cc	/^static char HexCharOfValue(int value) {$/;"	f	namespace:double_conversion
HexCharValue	util/double-conversion/bignum.cc	/^static int HexCharValue(char c) {$/;"	f	namespace:double_conversion
HookType	lm/builder/output.hh	/^enum HookType {$/;"	g	namespace:lm::builder
I	util/proxy_iterator.hh	/^    InnerIterator &I() { return p_.Inner(); }$/;"	f	class:util::ProxyIterator
I	util/proxy_iterator.hh	/^    const InnerIterator &I() const { return p_.Inner(); }$/;"	f	class:util::ProxyIterator
IStreamReader	util/read_compressed.cc	/^    explicit IStreamReader(std::istream &stream) : stream_(stream) {}$/;"	f	class:util::__anon41::IStreamReader
IStreamReader	util/read_compressed.cc	/^class IStreamReader : public ReadBase {$/;"	c	namespace:util::__anon41	file:
Ideal	util/probing_hash_table.hh	/^    template <class T> MutableIterator Ideal(const T &t) {$/;"	f	class:util::ProbingHashTable
Identity	util/exception.hh	/^      typedef T Identity;$/;"	t	struct:util::Exception::ExceptionTag
IdentityAccessor	util/sorted_uniform.hh	/^template <class T> class IdentityAccessor {$/;"	c	namespace:util
IdentityHash	util/probing_hash_table.hh	/^struct IdentityHash {$/;"	s	namespace:util
IgnoredType	util/file.cc	/^typedef CheckOffT<sizeof(off_t)>::True IgnoredType;$/;"	t	namespace:util::__anon32	file:
In	util/thread_pool.hh	/^    PCQueue<Request> &In() { return in_; }$/;"	f	class:util::ThreadPool
IncreaseBase	util/mmap.hh	/^    void IncreaseBase(uint64_t by) {$/;"	f	class:util::Rolling
Increment	util/stream/sort.hh	/^        bool Increment(int fd, std::size_t buf_size, std::size_t entry_size) {$/;"	f	class:util::stream::MergeQueue::Entry
IndependentLeft	lm/value.hh	/^    bool IndependentLeft() const {$/;"	f	class:lm::ngram::GenericProbingProxy
Index	lm/neural/wordvecs.hh	/^    WordIndex Index(StringPiece str) const { return vocab_.Index(str); }$/;"	f	class:lm::neural::WordVecs
Index	lm/virtual_interface.hh	/^    virtual WordIndex Index(const char *str) const {$/;"	f	class:lm::base::Vocabulary
Index	lm/virtual_interface.hh	/^    virtual WordIndex Index(const std::string &str) const {$/;"	f	class:lm::base::Vocabulary
Index	lm/vocab.hh	/^    WordIndex Index(const StringPiece &str) const {$/;"	f	class:lm::ngram::GrowableVocab
Index	lm/vocab.hh	/^    WordIndex Index(const StringPiece &str) const {$/;"	f	class:lm::ngram::ProbingVocabulary
Index	lm/vocab.hh	/^    WordIndex Index(const StringPiece &str) const {$/;"	f	class:lm::ngram::SortedVocabulary
Index	lm/wrappers/nplm.cc	/^WordIndex Vocabulary::Index(const std::string &str) const {$/;"	f	class:lm::np::Vocabulary
Index	lm/wrappers/nplm.hh	/^    WordIndex Index(const StringPiece &str) const {$/;"	f	class:lm::np::Vocabulary
Infinity	util/double-conversion/ieee.h	/^  static double Infinity() {$/;"	f	class:double_conversion::Double
Infinity	util/double-conversion/ieee.h	/^  static float Infinity() {$/;"	f	class:double_conversion::Single
Init	lm/builder/ngram_stream.hh	/^    void Init(const util::stream::ChainPosition &position) {$/;"	f	class:lm::builder::NGramStream
Init	lm/facade.hh	/^    void Init(const State &begin_sentence, const State &null_context, const Vocabulary &vocab, unsigned char order) {$/;"	f	class:lm::base::ModelFacade
Init	lm/search_trie.cc	/^    void Init(std::size_t entry_size) {$/;"	f	class:lm::ngram::trie::__anon20::BackoffMessages
Init	lm/trie.hh	/^    void Init(void *base, uint8_t quant_bits, uint64_t max_vocab) {$/;"	f	class:lm::ngram::trie::BitPackedLongest
Init	lm/trie.hh	/^    void Init(void *start) {$/;"	f	class:lm::ngram::trie::Unigram
Init	lm/trie_sort.cc	/^void RecordReader::Init(FILE *file, std::size_t entry_size) {$/;"	f	class:lm::ngram::trie::RecordReader
Init	util/fixed_array.hh	/^    void Init(std::size_t count) {$/;"	f	class:util::FixedArray
Init	util/mmap.hh	/^    void Init(void *data) {$/;"	f	class:util::Rolling
Init	util/stream/chain.cc	/^void Link::Init(const ChainPosition &position) {$/;"	f	class:util::stream::Link
Init	util/stream/multi_stream.hh	/^    void Init(const ChainPositions &positions) {$/;"	f	class:util::stream::GenericStreams
Init	util/stream/multi_stream.hh	/^    void Init(const ChainPositions &positions, std::size_t limit) {$/;"	f	class:util::stream::GenericStreams
Init	util/stream/multi_stream.hh	/^inline void ChainPositions::Init(Chains &chains) {$/;"	f	class:util::stream::ChainPositions
Init	util/stream/stream.hh	/^    void Init(const ChainPosition &position) {$/;"	f	class:util::stream::Stream
InitForAdjust	lm/builder/pipeline.cc	/^    void InitForAdjust(util::stream::Sort<SuffixOrder, AddCombiner> &ngrams, WordIndex types) {$/;"	f	class:lm::builder::__anon9::Master
InitWithDummy	util/stream/multi_stream.hh	/^    void InitWithDummy(const ChainPositions &positions) {$/;"	f	class:util::stream::GenericStreams
InitialProbabilities	lm/builder/initial_probabilities.cc	/^void InitialProbabilities($/;"	f	namespace:lm::builder
InitialProbabilities	lm/builder/pipeline.cc	/^void InitialProbabilities(const std::vector<uint64_t> &counts, const std::vector<uint64_t> &counts_pruned, const std::vector<Discount> &discounts, Master &master, Sorts<SuffixOrder> &primary,$/;"	f	namespace:lm::builder::__anon9
InitialProbabilitiesConfig	lm/builder/initial_probabilities.hh	/^struct InitialProbabilitiesConfig {$/;"	s	namespace:lm::builder
InitialScaledStartValues	util/double-conversion/bignum-dtoa.cc	/^static void InitialScaledStartValues(uint64_t significand,$/;"	f	namespace:double_conversion
InitialScaledStartValuesNegativeExponentNegativePower	util/double-conversion/bignum-dtoa.cc	/^static void InitialScaledStartValuesNegativeExponentNegativePower($/;"	f	namespace:double_conversion
InitialScaledStartValuesNegativeExponentPositivePower	util/double-conversion/bignum-dtoa.cc	/^static void InitialScaledStartValuesNegativeExponentPositivePower($/;"	f	namespace:double_conversion
InitialScaledStartValuesPositiveExponent	util/double-conversion/bignum-dtoa.cc	/^static void InitialScaledStartValuesPositiveExponent($/;"	f	namespace:double_conversion
Initialize	util/file_piece.cc	/^void FilePiece::Initialize(const char *name, std::ostream *show_progress, std::size_t min_buffer) {$/;"	f	class:util::FilePiece
InitializeBinary	lm/binary_format.cc	/^void BinaryFormat::InitializeBinary(int fd, ModelType model_type, unsigned int search_version, Parameters &params) {$/;"	f	class:lm::ngram::BinaryFormat
InitializeFromARPA	lm/model.cc	/^template <class Search, class VocabularyT> void GenericModel<Search, VocabularyT>::InitializeFromARPA(int fd, const char *file, const Config &config) {$/;"	f	class:lm::ngram::detail::GenericModel
InitializeFromARPA	lm/search_hashed.cc	/^template <class Value> void HashedSearch<Value>::InitializeFromARPA(const char * \/*file*\/, util::FilePiece &f, const std::vector<uint64_t> &counts, const Config &config, ProbingVocabulary &vocab, BinaryFormat &backing) {$/;"	f	class:lm::ngram::detail::HashedSearch
InitializeFromARPA	lm/search_trie.cc	/^template <class Quant, class Bhiksha> void TrieSearch<Quant, Bhiksha>::InitializeFromARPA(const char *file, util::FilePiece &f, std::vector<uint64_t> &counts, const Config &config, SortedVocabulary &vocab, BinaryFormat &backing) {$/;"	f	class:lm::ngram::trie::TrieSearch
InitializeNoRead	util/file_piece.cc	/^void FilePiece::InitializeNoRead(const char *name, std::size_t min_buffer) {$/;"	f	class:util::FilePiece
InlineBits	lm/bhiksha.cc	/^uint8_t ArrayBhiksha::InlineBits(uint64_t max_offset, uint64_t max_next, const Config &config) {$/;"	f	class:lm::ngram::trie::ArrayBhiksha
InlineBits	lm/bhiksha.hh	/^    static uint8_t InlineBits(uint64_t \/*max_offset*\/, uint64_t max_next, const Config &\/*config*\/) {$/;"	f	class:lm::ngram::trie::DontBhiksha
InlineBits	lm/bhiksha.hh	/^    uint8_t InlineBits() const { return next_.bits; }$/;"	f	class:lm::ngram::trie::DontBhiksha
InlineBits	lm/bhiksha.hh	/^    uint8_t InlineBits() const { return next_inline_.bits; }$/;"	f	class:lm::ngram::trie::ArrayBhiksha
Inner	lm/trie_sort.cc	/^    InnerIterator &Inner() { return inner_; }$/;"	f	class:lm::ngram::trie::__anon22::PartialViewProxy	file:
Inner	lm/trie_sort.cc	/^    const InnerIterator &Inner() const { return inner_; } $/;"	f	class:lm::ngram::trie::__anon22::PartialViewProxy	file:
Inner	util/joint_sort.hh	/^    InnerIterator &Inner() { return inner_; }$/;"	f	class:util::detail::JointProxy
Inner	util/joint_sort.hh	/^    const InnerIterator &Inner() const { return inner_; }$/;"	f	class:util::detail::JointProxy
Inner	util/proxy_iterator.hh	/^    const InnerIterator &Inner() { return p_.Inner(); }$/;"	f	class:util::ProxyIterator
Inner	util/sized_iterator.hh	/^    InnerIterator &Inner() { return inner_; }$/;"	f	class:util::SizedProxy
Inner	util/sized_iterator.hh	/^    const InnerIterator &Inner() const { return inner_; }$/;"	f	class:util::SizedProxy
InnerIterator	lm/trie_sort.cc	/^    typedef util::SizedInnerIterator InnerIterator;$/;"	t	class:lm::ngram::trie::__anon22::PartialViewProxy	file:
InnerIterator	util/joint_sort.hh	/^    typedef JointIter<KeyIter, ValueIter> InnerIterator;$/;"	t	class:util::detail::JointProxy
InnerIterator	util/proxy_iterator.hh	/^    typedef typename Proxy::InnerIterator InnerIterator;$/;"	t	class:util::ProxyIterator
InnerIterator	util/sized_iterator.hh	/^    typedef SizedInnerIterator InnerIterator;$/;"	t	class:util::SizedProxy
InputBuffer	lm/filter/format.hh	/^    InputBuffer() : actual_(0) {}$/;"	f	class:lm::InputBuffer
InputBuffer	lm/filter/format.hh	/^class InputBuffer {$/;"	c	namespace:lm
Insert	lm/trie.cc	/^template <class Bhiksha> util::BitAddress BitPackedMiddle<Bhiksha>::Insert(WordIndex word) {$/;"	f	class:lm::ngram::trie::BitPackedMiddle
Insert	lm/trie.cc	/^util::BitAddress BitPackedLongest::Insert(WordIndex index) {$/;"	f	class:lm::ngram::trie::BitPackedLongest
Insert	lm/vocab.cc	/^WordIndex ProbingVocabulary::Insert(const StringPiece &str) {$/;"	f	class:lm::ngram::ProbingVocabulary
Insert	lm/vocab.cc	/^WordIndex SortedVocabulary::Insert(const StringPiece &str) {$/;"	f	class:lm::ngram::SortedVocabulary
Insert	util/probing_hash_table.hh	/^    template <class T> MutableIterator Insert(const T &t) {$/;"	f	class:util::AutoProbing
Insert	util/probing_hash_table.hh	/^    template <class T> MutableIterator Insert(const T &t) {$/;"	f	class:util::ProbingHashTable
InsertIndex	lm/trie.hh	/^    uint64_t InsertIndex() const {$/;"	f	class:lm::ngram::trie::BitPacked
InspectAddr	util/scoped.cc	/^void *InspectAddr(void *addr, std::size_t requested, const char *func_name) {$/;"	f	namespace:util::__anon42
InternalSeek	util/file.cc	/^void InternalSeek(int fd, int64_t off, int whence) {$/;"	f	namespace:util::__anon32
InternalUnRest	lm/model.cc	/^template <class Search, class VocabularyT> float GenericModel<Search, VocabularyT>::InternalUnRest(const uint64_t *pointers_begin, const uint64_t *pointers_end, unsigned char first_length) const {$/;"	f	class:lm::ngram::detail::GenericModel
Interpolate	lm/builder/interpolate.cc	/^Interpolate::Interpolate(uint64_t vocab_size, const util::stream::ChainPositions &backoffs, const std::vector<uint64_t>& prune_thresholds, bool prune_vocab, bool output_q)$/;"	f	class:lm::builder::Interpolate
Interpolate	lm/builder/interpolate.hh	/^class Interpolate {$/;"	c	namespace:lm::builder
InterpolateProbabilities	lm/builder/pipeline.cc	/^void InterpolateProbabilities(const std::vector<uint64_t> &counts, Master &master, Sorts<SuffixOrder> &primary, util::FixedArray<util::stream::FileBuffer> &gammas) {$/;"	f	namespace:lm::builder::__anon9
IsBinaryFormat	lm/binary_format.cc	/^bool IsBinaryFormat(int fd) {$/;"	f	namespace:lm::ngram
IsClamped	util/double-conversion/bignum.cc	/^bool Bignum::IsClamped() const {$/;"	f	class:double_conversion::Bignum
IsDenormal	util/double-conversion/ieee.h	/^  bool IsDenormal() const {$/;"	f	class:double_conversion::Double
IsDenormal	util/double-conversion/ieee.h	/^  bool IsDenormal() const {$/;"	f	class:double_conversion::Single
IsEntirelyWhiteSpace	lm/filter/arpa_io.cc	/^bool IsEntirelyWhiteSpace(const StringPiece &line) {$/;"	f	namespace:lm
IsEntirelyWhiteSpace	lm/read_arpa.cc	/^bool IsEntirelyWhiteSpace(const StringPiece &line) {$/;"	f	namespace:lm::__anon18
IsInfinite	util/double-conversion/ieee.h	/^  bool IsInfinite() const {$/;"	f	class:double_conversion::Double
IsInfinite	util/double-conversion/ieee.h	/^  bool IsInfinite() const {$/;"	f	class:double_conversion::Single
IsLineEnd	lm/filter/vocab.cc	/^bool IsLineEnd(std::istream &in) {$/;"	f	namespace:lm::vocab::__anon12
IsMarked	lm/builder/ngram.hh	/^    bool IsMarked() const {$/;"	f	class:lm::builder::NGram
IsNan	util/double-conversion/ieee.h	/^  bool IsNan() const {$/;"	f	class:double_conversion::Double
IsNan	util/double-conversion/ieee.h	/^  bool IsNan() const {$/;"	f	class:double_conversion::Single
IsPassthrough	util/mmap.hh	/^    bool IsPassthrough() const { return fd_ == -1; }$/;"	f	class:util::Rolling
IsSpecial	util/double-conversion/ieee.h	/^  bool IsSpecial() const {$/;"	f	class:double_conversion::Double
IsSpecial	util/double-conversion/ieee.h	/^  bool IsSpecial() const {$/;"	f	class:double_conversion::Single
IsTag	lm/filter/vocab.hh	/^inline bool IsTag(const StringPiece &value) {$/;"	f	namespace:lm::vocab
IsZero	util/double-conversion/fixed-dtoa.cc	/^  bool IsZero() const {$/;"	f	class:double_conversion::UInt128
Join	util/thread_pool.hh	/^    void Join() {$/;"	f	class:util::Worker
JointIter	util/joint_sort.hh	/^    JointIter() {}$/;"	f	class:util::detail::JointIter
JointIter	util/joint_sort.hh	/^    JointIter(const KeyIter &key_iter, const ValueIter &value_iter) : key_(key_iter), value_(value_iter) {}$/;"	f	class:util::detail::JointIter
JointIter	util/joint_sort.hh	/^template <class KeyIter, class ValueIter> class JointIter {$/;"	c	namespace:util::detail
JointOrder	lm/builder/joint_order.hh	/^template <class Callback, class Compare> void JointOrder(const util::stream::ChainPositions &positions, Callback &callback) {$/;"	f	namespace:lm::builder
JointProxy	util/joint_sort.hh	/^    JointProxy(const JointProxy<KeyIter, ValueIter> &other) : inner_(other.inner_) {}$/;"	f	class:util::detail::JointProxy
JointProxy	util/joint_sort.hh	/^    JointProxy(const KeyIter &key_iter, const ValueIter &value_iter) : inner_(key_iter, value_iter) {}$/;"	f	class:util::detail::JointProxy
JointProxy	util/joint_sort.hh	/^template <class KeyIter, class ValueIter> class JointProxy {$/;"	c	namespace:util::detail
JointSort	util/joint_sort.hh	/^template <class KeyIter, class ValueIter, class Less> void JointSort(const KeyIter &key_begin, const KeyIter &key_end, const ValueIter &value_begin, const Less &less) {$/;"	f	namespace:util
JointSort	util/joint_sort.hh	/^template <class KeyIter, class ValueIter> void JointSort(const KeyIter &key_begin, const KeyIter &key_end, const ValueIter &value_begin) {$/;"	f	namespace:util
KENLM_ORDER_MESSAGE	lm/max_order.hh	10;"	d
Key	lm/builder/corpus_count.cc	/^  typedef WordIndex *Key;$/;"	t	struct:lm::builder::__anon5::DedupeEntry	file:
Key	lm/builder/corpus_count.cc	/^  typedef uint64_t Key;$/;"	t	struct:lm::builder::__anon5::VocabEntry	file:
Key	lm/search_hashed.hh	/^  typedef uint64_t Key;$/;"	t	struct:lm::ngram::detail::ProbEntry
Key	lm/trie.cc	/^    typedef uint64_t Key;$/;"	t	class:lm::ngram::trie::__anon21::KeyAccessor	file:
Key	lm/value.hh	/^    typedef uint64_t Key;$/;"	t	struct:lm::ngram::BackoffValue::ProbingEntry
Key	lm/value.hh	/^    typedef uint64_t Key;$/;"	t	struct:lm::ngram::RestValue::ProbingEntry
Key	lm/vocab.hh	/^  typedef uint64_t Key;$/;"	t	struct:lm::ngram::ProbingVocabularyEntry
Key	util/probing_hash_table.hh	/^    typedef typename Entry::Key Key;$/;"	t	class:util::AutoProbing
Key	util/probing_hash_table.hh	/^    typedef typename Entry::Key Key;$/;"	t	class:util::ProbingHashTable
Key	util/sorted_uniform.hh	/^    typedef T Key;$/;"	t	class:util::IdentityAccessor
KeyAccessor	lm/trie.cc	/^    KeyAccessor(const void *base, uint64_t key_mask, uint8_t key_bits, uint8_t total_bits) $/;"	f	class:lm::ngram::trie::__anon21::KeyAccessor
KeyAccessor	lm/trie.cc	/^class KeyAccessor {$/;"	c	namespace:lm::ngram::trie::__anon21	file:
LAZY	util/mmap.hh	/^  LAZY,$/;"	e	enum:util::__anon38
LMWordIndex	lm/word_index.hh	/^typedef lm::WordIndex LMWordIndex;$/;"	t
LM_BHIKSHA_H	lm/bhiksha.hh	14;"	d
LM_BINARY_FORMAT_H	lm/binary_format.hh	2;"	d
LM_BLANK_H	lm/blank.hh	2;"	d
LM_BUILDER_ADJUST_COUNTS_H	lm/builder/adjust_counts.hh	2;"	d
LM_BUILDER_CORPUS_COUNT_H	lm/builder/corpus_count.hh	2;"	d
LM_BUILDER_DISCOUNT_H	lm/builder/discount.hh	2;"	d
LM_BUILDER_HASH_GAMMA__	lm/builder/hash_gamma.hh	2;"	d
LM_BUILDER_HEADER_INFO_H	lm/builder/header_info.hh	2;"	d
LM_BUILDER_INITIAL_PROBABILITIES_H	lm/builder/initial_probabilities.hh	2;"	d
LM_BUILDER_INTERPOLATE_H	lm/builder/interpolate.hh	2;"	d
LM_BUILDER_JOINT_ORDER_H	lm/builder/joint_order.hh	2;"	d
LM_BUILDER_NGRAM_H	lm/builder/ngram.hh	2;"	d
LM_BUILDER_NGRAM_STREAM_H	lm/builder/ngram_stream.hh	2;"	d
LM_BUILDER_OUTPUT_H	lm/builder/output.hh	2;"	d
LM_BUILDER_PIPELINE_H	lm/builder/pipeline.hh	2;"	d
LM_BUILDER_PRINT_H	lm/builder/print.hh	2;"	d
LM_BUILDER_SORT_H	lm/builder/sort.hh	2;"	d
LM_COMMA	lm/model.hh	137;"	d
LM_CONFIG_H	lm/config.hh	2;"	d
LM_ENUMERATE_VOCAB_H	lm/enumerate_vocab.hh	2;"	d
LM_FACADE_H	lm/facade.hh	2;"	d
LM_FILTER_ARPA_IO_H	lm/filter/arpa_io.hh	2;"	d
LM_FILTER_COUNT_IO_H	lm/filter/count_io.hh	2;"	d
LM_FILTER_FORMAT_H	lm/filter/format.hh	2;"	d
LM_FILTER_PHRASE_H	lm/filter/phrase.hh	2;"	d
LM_FILTER_PHRASE_METHOD	lm/filter/phrase.hh	13;"	d
LM_FILTER_THREAD_H	lm/filter/thread.hh	2;"	d
LM_FILTER_VOCAB_H	lm/filter/vocab.hh	2;"	d
LM_FILTER_WRAPPER_H	lm/filter/wrapper.hh	2;"	d
LM_LEFT_H	lm/left.hh	39;"	d
LM_LM_EXCEPTION_H	lm/lm_exception.hh	2;"	d
LM_MAX_ORDER_H	lm/max_order.hh	2;"	d
LM_MODEL_H	lm/model.hh	2;"	d
LM_MODEL_TYPE_H	lm/model_type.hh	2;"	d
LM_NAME_MODEL	lm/model.hh	138;"	d
LM_NEURAL_WORDVECS_H	lm/neural/wordvecs.hh	2;"	d
LM_NGRAM_QUERY_H	lm/ngram_query.hh	2;"	d
LM_PARTIAL_H	lm/partial.hh	2;"	d
LM_QUANTIZE_H	lm/quantize.hh	2;"	d
LM_READ_ARPA_H	lm/read_arpa.hh	2;"	d
LM_RETURN_H	lm/return.hh	2;"	d
LM_SEARCH_HASHED_H	lm/search_hashed.hh	2;"	d
LM_SEARCH_TRIE_H	lm/search_trie.hh	2;"	d
LM_SIZES_H	lm/sizes.hh	2;"	d
LM_STATE_H	lm/state.hh	2;"	d
LM_TRIE_H	lm/trie.hh	2;"	d
LM_TRIE_SORT_H	lm/trie_sort.hh	4;"	d
LM_VALUE_BUILD_H	lm/value_build.hh	2;"	d
LM_VALUE_H	lm/value.hh	2;"	d
LM_VIRTUAL_INTERFACE_H	lm/virtual_interface.hh	2;"	d
LM_VOCAB_H	lm/vocab.hh	2;"	d
LM_WEIGHTS_H	lm/weights.hh	2;"	d
LM_WORD_INDEX_H	lm/word_index.hh	3;"	d
LM_WRAPPERS_NPLM_H	lm/wrappers/nplm.hh	2;"	d
Left	lm/state.hh	/^struct Left {$/;"	s	namespace:lm::ngram
Length	lm/state.hh	/^    unsigned char Length() const { return length; }$/;"	f	class:lm::ngram::State
Less	util/double-conversion/bignum.h	/^  static bool Less(const Bignum& a, const Bignum& b) {$/;"	f	class:double_conversion::Bignum
LessEqual	util/double-conversion/bignum.h	/^  static bool LessEqual(const Bignum& a, const Bignum& b) {$/;"	f	class:double_conversion::Bignum
LessWrapper	util/joint_sort.hh	/^    explicit LessWrapper(const Less &less) : less_(less) {}$/;"	f	class:util::detail::LessWrapper
LessWrapper	util/joint_sort.hh	/^template <class Proxy, class Less> class LessWrapper : public std::binary_function<const typename Proxy::value_type &, const typename Proxy::value_type &, bool> {$/;"	c	namespace:util::detail
Line	lm/filter/format.hh	/^    struct Line {$/;"	s	class:lm::InputBuffer
Line	lm/ngram_query.hh	/^  void Line(uint64_t oov, float total) const {$/;"	f	struct:lm::ngram::BasicPrint
LineInput	util/stream/line_input.hh	/^class LineInput {$/;"	c	namespace:util::stream
Link	util/stream/chain.cc	/^Link::Link() : in_(NULL), out_(NULL), poisoned_(true) {}$/;"	f	class:util::stream::Link
Link	util/stream/chain.cc	/^Link::Link(const ChainPosition &position) : in_(NULL) {$/;"	f	class:util::stream::Link
Link	util/stream/chain.hh	/^class Link {$/;"	c	namespace:util::stream
LoadBinary	lm/binary_format.cc	/^void *BinaryFormat::LoadBinary(std::size_t size) {$/;"	f	class:lm::ngram::BinaryFormat
LoadException	lm/lm_exception.cc	/^LoadException::LoadException() throw() {}$/;"	f	class:lm::LoadException
LoadException	lm/lm_exception.hh	/^class LoadException : public util::Exception {$/;"	c	namespace:lm
LoadMethod	util/mmap.hh	/^} LoadMethod;$/;"	t	namespace:util	typeref:enum:util::__anon38
LoadVirtual	lm/model.cc	/^base::Model *LoadVirtual(const char *file_name, const Config &config, ModelType model_type) {$/;"	f	namespace:lm::ngram
LoadedBinary	lm/vocab.cc	/^void ProbingVocabulary::LoadedBinary(bool have_words, int fd, EnumerateVocab *to, uint64_t offset) {$/;"	f	class:lm::ngram::ProbingVocabulary
LoadedBinary	lm/vocab.cc	/^void SortedVocabulary::LoadedBinary(bool have_words, int fd, EnumerateVocab *to, uint64_t offset) {$/;"	f	class:lm::ngram::SortedVocabulary
Longest	lm/search_hashed.hh	/^    typedef util::ProbingHashTable<ProbEntry, util::IdentityHash> Longest;$/;"	t	class:lm::ngram::detail::HashedSearch
Longest	lm/search_trie.cc	/^    void Longest(const void * \/*data*\/) {$/;"	f	class:lm::ngram::trie::__anon20::FindBlanks
Longest	lm/search_trie.cc	/^    void Longest(const void *data) {$/;"	f	class:lm::ngram::trie::__anon20::WriteEntries
Longest	lm/search_trie.hh	/^    typedef trie::BitPackedLongest Longest;$/;"	t	class:lm::ngram::trie::TrieSearch
LongestBits	lm/quantize.hh	/^    static uint8_t LongestBits(const Config &\/*config*\/) { return 31; }$/;"	f	class:lm::ngram::DontQuantize
LongestBits	lm/quantize.hh	/^    static uint8_t LongestBits(const Config &config) { return config.prob_bits; }$/;"	f	class:lm::ngram::SeparatelyQuantize
LongestPointer	lm/quantize.hh	/^        LongestPointer() : address_(NULL, 0) {}$/;"	f	class:lm::ngram::DontQuantize::LongestPointer
LongestPointer	lm/quantize.hh	/^        LongestPointer() : address_(NULL, 0) {}$/;"	f	class:lm::ngram::SeparatelyQuantize::LongestPointer
LongestPointer	lm/quantize.hh	/^        LongestPointer(const SeparatelyQuantize &quant, const util::BitAddress &address) : table_(&quant.LongestTable()), address_(address) {}$/;"	f	class:lm::ngram::SeparatelyQuantize::LongestPointer
LongestPointer	lm/quantize.hh	/^        explicit LongestPointer(const DontQuantize &\/*quant*\/, util::BitAddress address) : address_(address) {}$/;"	f	class:lm::ngram::DontQuantize::LongestPointer
LongestPointer	lm/quantize.hh	/^    class LongestPointer {$/;"	c	class:lm::ngram::DontQuantize
LongestPointer	lm/quantize.hh	/^    class LongestPointer {$/;"	c	class:lm::ngram::SeparatelyQuantize
LongestPointer	lm/search_hashed.hh	/^    LongestPointer() : to_(NULL) {}$/;"	f	class:lm::ngram::detail::LongestPointer
LongestPointer	lm/search_hashed.hh	/^    explicit LongestPointer(const float &to) : to_(&to) {}$/;"	f	class:lm::ngram::detail::LongestPointer
LongestPointer	lm/search_hashed.hh	/^    typedef ::lm::ngram::detail::LongestPointer LongestPointer;$/;"	t	class:lm::ngram::detail::HashedSearch
LongestPointer	lm/search_hashed.hh	/^class LongestPointer {$/;"	c	namespace:lm::ngram::detail
LongestPointer	lm/search_trie.hh	/^    typedef typename Quant::LongestPointer LongestPointer;$/;"	t	class:lm::ngram::trie::TrieSearch
LongestTable	lm/quantize.hh	/^    const Bins &LongestTable() const { return longest_; }$/;"	f	class:lm::ngram::SeparatelyQuantize
Lookup	lm/builder/print.hh	/^    const char *Lookup(WordIndex index) const {$/;"	f	class:lm::builder::VocabReconstitute
Lookup	lm/search_hashed.hh	/^        const typename Value::Weights &Lookup(WordIndex index) const {$/;"	f	class:lm::ngram::detail::HashedSearch::Unigram
Lookup	lm/trie.hh	/^    const ProbBackoff &Lookup(WordIndex index) const { return unigram_[index].weights; }$/;"	f	class:lm::ngram::trie::Unigram
Lookup	lm/vocab.hh	/^    typedef util::AutoProbing<ProbingVocabularyEntry, util::IdentityHash> Lookup;$/;"	t	class:lm::ngram::GrowableVocab
Lookup	lm/vocab.hh	/^    typedef util::ProbingHashTable<ProbingVocabularyEntry, util::IdentityHash> Lookup;$/;"	t	class:lm::ngram::ProbingVocabulary
LookupLongest	lm/search_hashed.hh	/^    LongestPointer LookupLongest(WordIndex word, const Node &node) const {$/;"	f	class:lm::ngram::detail::HashedSearch
LookupLongest	lm/search_trie.hh	/^    LongestPointer LookupLongest(WordIndex word, const Node &node) const {$/;"	f	class:lm::ngram::trie::TrieSearch
LookupMiddle	lm/search_hashed.hh	/^    MiddlePointer LookupMiddle(unsigned char order_minus_2, WordIndex word, Node &node, bool &independent_left, uint64_t &extend_pointer) const {$/;"	f	class:lm::ngram::detail::HashedSearch
LookupMiddle	lm/search_trie.hh	/^    MiddlePointer LookupMiddle(unsigned char order_minus_2, WordIndex word, Node &node, bool &independent_left, uint64_t &extend_left) const {$/;"	f	class:lm::ngram::trie::TrieSearch
LookupPiece	lm/builder/print.hh	/^    StringPiece LookupPiece(WordIndex index) const {$/;"	f	class:lm::builder::VocabReconstitute
LookupUnigram	lm/search_hashed.hh	/^    UnigramPointer LookupUnigram(WordIndex word, Node &next, bool &independent_left, uint64_t &extend_left) const {$/;"	f	class:lm::ngram::detail::HashedSearch
LookupUnigram	lm/search_trie.hh	/^    UnigramPointer LookupUnigram(WordIndex word, Node &next, bool &independent_left, uint64_t &extend_left) const {$/;"	f	class:lm::ngram::trie::TrieSearch
LowerBound	lm/filter/phrase.cc	/^void Arc::LowerBound(const Sentence to) {$/;"	f	class:lm::phrase::detail::Arc
LowerBound	lm/filter/phrase.cc	/^void Vertex::LowerBound(const Sentence to) {$/;"	f	class:lm::phrase::detail::Vertex
LowerBoundaryIsCloser	util/double-conversion/ieee.h	/^  bool LowerBoundaryIsCloser() const {$/;"	f	class:double_conversion::Double
LowerBoundaryIsCloser	util/double-conversion/ieee.h	/^  bool LowerBoundaryIsCloser() const {$/;"	f	class:double_conversion::Single
LowerRestBuild	lm/value_build.cc	/^template <class Model> LowerRestBuild<Model>::LowerRestBuild(const Config &config, unsigned int order, const typename Model::Vocabulary &vocab) {$/;"	f	class:lm::ngram::LowerRestBuild
LowerRestBuild	lm/value_build.hh	/^template <class Model> class LowerRestBuild {$/;"	c	namespace:lm::ngram
MACH_CALL	util/pcqueue.hh	27;"	d
MALLOC_ALLOCATED	util/mmap.hh	/^    typedef enum {MMAP_ALLOCATED, ARRAY_ALLOCATED, MALLOC_ALLOCATED, NONE_ALLOCATED} Alloc;$/;"	e	enum:util::scoped_memory::__anon37
MMAP_ALLOCATED	util/mmap.hh	/^    typedef enum {MMAP_ALLOCATED, ARRAY_ALLOCATED, MALLOC_ALLOCATED, NONE_ALLOCATED} Alloc;$/;"	e	enum:util::scoped_memory::__anon37
MMapShift	util/file_piece.cc	/^void FilePiece::MMapShift(uint64_t desired_begin) {$/;"	f	class:util::FilePiece
MagicResult	util/read_compressed.cc	/^enum MagicResult {$/;"	g	namespace:util::__anon41	file:
Make	lm/vocab.hh	/^  static ProbingVocabularyEntry Make(uint64_t key, WordIndex value) {$/;"	f	struct:lm::ngram::ProbingVocabularyEntry
MakeBins	lm/quantize.cc	/^void MakeBins(std::vector<float> &values, float *centers, uint32_t bins) {$/;"	f	namespace:lm::ngram::__anon17
MakeGraph	lm/filter/phrase.cc	/^detail::Vertex &ConditionCommon::MakeGraph() {$/;"	f	class:lm::phrase::detail::ConditionCommon
MakeHashes	lm/filter/phrase.hh	/^template <class Iterator> void MakeHashes(Iterator i, const Iterator &end, std::vector<Hash> &hashes) {$/;"	f	namespace:lm::phrase::detail
MakeTemp	util/file.cc	/^int MakeTemp(const StringPiece &base) {$/;"	f	namespace:util
MallocException	util/scoped.cc	/^MallocException::MallocException(std::size_t requested) throw() {$/;"	f	class:util::MallocException
MallocException	util/scoped.hh	/^class MallocException : public ErrnoException {$/;"	c	namespace:util
MallocOrThrow	util/scoped.cc	/^void *MallocOrThrow(std::size_t requested) {$/;"	f	namespace:util
MapAnonymous	util/mmap.cc	/^void MapAnonymous(std::size_t size, util::scoped_memory &to) {$/;"	f	namespace:util
MapFile	lm/binary_format.cc	/^void BinaryFormat::MapFile(void *&vocab_base, void *&search_base) {$/;"	f	class:lm::ngram::BinaryFormat
MapOrThrow	util/mmap.cc	/^void *MapOrThrow(std::size_t size, bool for_write, int flags, bool prefault, int fd, uint64_t offset) {$/;"	f	namespace:util
MapRead	util/mmap.cc	/^void MapRead(LoadMethod method, int fd, uint64_t offset, std::size_t size, scoped_memory &out) {$/;"	f	namespace:util
MapZeroedWrite	util/mmap.cc	/^void *MapZeroedWrite(const char *name, std::size_t size, scoped_fd &file) {$/;"	f	namespace:util
MapZeroedWrite	util/mmap.cc	/^void *MapZeroedWrite(int fd, std::size_t size) {$/;"	f	namespace:util
Mark	lm/builder/ngram.hh	/^    void Mark() {$/;"	f	class:lm::builder::NGram
MarkExtends	lm/value_build.hh	/^    bool MarkExtends(RestWeights &weights, const Prob &to) const {$/;"	f	class:lm::ngram::MaxRestBuild
MarkExtends	lm/value_build.hh	/^    bool MarkExtends(RestWeights &weights, const RestWeights &to) const {$/;"	f	class:lm::ngram::MaxRestBuild
MarkExtends	lm/value_build.hh	/^    template <class Second> bool MarkExtends(ProbBackoff &weights, const Second &) const {$/;"	f	class:lm::ngram::NoRestBuild
MarkExtends	lm/value_build.hh	/^    template <class Second> bool MarkExtends(RestWeights &weights, const Second &) const {$/;"	f	class:lm::ngram::LowerRestBuild
MarkLower	lm/search_hashed.cc	/^template <class Build> void MarkLower($/;"	f	namespace:lm::ngram::__anon19
Mask	lm/quantize.hh	/^        uint64_t Mask() const { return mask_; }$/;"	f	class:lm::ngram::SeparatelyQuantize::Bins
Master	lm/builder/pipeline.cc	/^    explicit Master(PipelineConfig &config) $/;"	f	class:lm::builder::__anon9::Master
Master	lm/builder/pipeline.cc	/^class Master {$/;"	c	namespace:lm::builder::__anon9	file:
MatchCheck	lm/binary_format.cc	/^void MatchCheck(ModelType model_type, unsigned int search_version, const Parameters &params) {$/;"	f	namespace:lm::ngram
Max	util/double-conversion/utils.h	/^static T Max(T a, T b) {$/;"	f	namespace:double_conversion
MaxRestBuild	lm/value_build.hh	/^    MaxRestBuild() {}$/;"	f	class:lm::ngram::MaxRestBuild
MaxRestBuild	lm/value_build.hh	/^class MaxRestBuild {$/;"	c	namespace:lm::ngram
MaximumLazyInput	lm/builder/pipeline.cc	/^    template <class Compare> void MaximumLazyInput(const std::vector<uint64_t> &counts, Sorts<Compare> &sorts) {$/;"	f	class:lm::builder::__anon9::Master
MemUsage	lm/vocab.hh	/^    static std::size_t MemUsage(WordIndex content) {$/;"	f	class:lm::ngram::GrowableVocab
MemUsage	util/probing_hash_table.hh	/^    static std::size_t MemUsage(std::size_t size, float multiplier = 1.5) {$/;"	f	class:util::AutoProbing
Merge	util/stream/sort.hh	/^    std::size_t Merge(std::size_t lazy_memory) {$/;"	f	class:util::stream::Sort
MergeQueue	util/stream/sort.hh	/^    MergeQueue(int fd, std::size_t buffer_size, std::size_t entry_size, const Compare &compare)$/;"	f	class:util::stream::MergeQueue
MergeQueue	util/stream/sort.hh	/^template <class Compare> class MergeQueue {$/;"	c	namespace:util::stream
MergeRight	lm/builder/initial_probabilities.cc	/^    MergeRight(bool interpolate_unigrams, const util::stream::ChainPosition &from_adder, const Discount &discount)$/;"	f	class:lm::builder::__anon7::MergeRight
MergeRight	lm/builder/initial_probabilities.cc	/^class MergeRight {$/;"	c	namespace:lm::builder::__anon7	file:
MergeSortedFiles	lm/trie_sort.cc	/^template <class Combine> FILE *MergeSortedFiles(FILE *first_file, FILE *second_file, const std::string &temp_prefix, std::size_t weights_size, unsigned char order, const Combine &combine) {$/;"	f	namespace:lm::ngram::trie::__anon22
MergingReader	util/stream/sort.hh	/^    MergingReader(int in, Offsets *in_offsets, Offsets *out_offsets, std::size_t buffer_size, std::size_t total_memory, const Compare &compare, const Combine &combine) :$/;"	f	class:util::stream::MergingReader
MergingReader	util/stream/sort.hh	/^template <class Compare, class Combine> class MergingReader {$/;"	c	namespace:util::stream
Middle	lm/search_hashed.hh	/^    typedef util::ProbingHashTable<typename Value::ProbingEntry, util::IdentityHash> Middle;$/;"	t	class:lm::ngram::detail::HashedSearch
Middle	lm/search_trie.cc	/^    void Middle(const unsigned char order, const void * \/*data*\/) {$/;"	f	class:lm::ngram::trie::__anon20::FindBlanks
Middle	lm/search_trie.cc	/^    void Middle(const unsigned char order, const void *data) {$/;"	f	class:lm::ngram::trie::__anon20::WriteEntries
Middle	lm/search_trie.hh	/^    typedef trie::BitPackedMiddle<Bhiksha> Middle;$/;"	t	class:lm::ngram::trie::TrieSearch
MiddleBits	lm/quantize.hh	/^    static uint8_t MiddleBits(const Config &\/*config*\/) { return 63; }$/;"	f	class:lm::ngram::DontQuantize
MiddleBits	lm/quantize.hh	/^    static uint8_t MiddleBits(const Config &config) { return config.prob_bits + config.backoff_bits; }$/;"	f	class:lm::ngram::SeparatelyQuantize
MiddleBlank	lm/search_trie.cc	/^    void MiddleBlank(const unsigned char order, const WordIndex *indices, unsigned char \/*lower*\/, float \/*prob_base*\/) {$/;"	f	class:lm::ngram::trie::__anon20::WriteEntries
MiddleBlank	lm/search_trie.cc	/^    void MiddleBlank(const unsigned char order, const WordIndex *indices, unsigned char lower, float prob_basis) {$/;"	f	class:lm::ngram::trie::__anon20::FindBlanks
MiddlePointer	lm/quantize.hh	/^        MiddlePointer() : address_(NULL, 0) {}$/;"	f	class:lm::ngram::DontQuantize::MiddlePointer
MiddlePointer	lm/quantize.hh	/^        MiddlePointer() : address_(NULL, 0) {}$/;"	f	class:lm::ngram::SeparatelyQuantize::MiddlePointer
MiddlePointer	lm/quantize.hh	/^        MiddlePointer(const DontQuantize & \/*quant*\/, unsigned char \/*order_minus_2*\/, util::BitAddress address) : address_(address) {}$/;"	f	class:lm::ngram::DontQuantize::MiddlePointer
MiddlePointer	lm/quantize.hh	/^        MiddlePointer(const SeparatelyQuantize &quant, unsigned char order_minus_2, const util::BitAddress &address) : bins_(quant.GetTables(order_minus_2)), address_(address) {}$/;"	f	class:lm::ngram::SeparatelyQuantize::MiddlePointer
MiddlePointer	lm/quantize.hh	/^    class MiddlePointer {$/;"	c	class:lm::ngram::DontQuantize
MiddlePointer	lm/quantize.hh	/^    class MiddlePointer {$/;"	c	class:lm::ngram::SeparatelyQuantize
MiddlePointer	lm/search_hashed.hh	/^    typedef typename Value::ProbingProxy MiddlePointer;$/;"	t	class:lm::ngram::detail::HashedSearch
MiddlePointer	lm/search_trie.hh	/^    typedef typename Quant::MiddlePointer MiddlePointer;$/;"	t	class:lm::ngram::trie::TrieSearch
Milestone	util/ersatz_progress.cc	/^void ErsatzProgress::Milestone() {$/;"	f	class:util::ErsatzProgress
Milestone	util/stream/multi_progress.cc	/^void MultiProgress::Milestone(WorkerProgress &worker) {$/;"	f	class:util::stream::MultiProgress
Min	util/double-conversion/utils.h	/^static T Min(T a, T b) {$/;"	f	namespace:double_conversion
Minus	util/double-conversion/diy-fp.h	/^  static DiyFp Minus(const DiyFp& a, const DiyFp& b) {$/;"	f	class:double_conversion::DiyFp
MissingSentenceMarker	lm/vocab.cc	/^void MissingSentenceMarker(const Config &config, const char *str) throw(SpecialWordMissingException) {$/;"	f	namespace:lm::ngram
MissingUnknown	lm/vocab.cc	/^void MissingUnknown(const Config &config) throw(SpecialWordMissingException) {$/;"	f	namespace:lm::ngram
Model	lm/model.hh	/^typedef ProbingModel Model;$/;"	t	namespace:lm::ngram
Model	lm/virtual_interface.hh	/^    explicit Model(size_t state_size) : state_size_(state_size) {}$/;"	f	class:lm::base::Model
Model	lm/virtual_interface.hh	/^class Model {$/;"	c	namespace:lm::base
Model	lm/wrappers/nplm.cc	/^Model::Model(const std::string &file, std::size_t cache) $/;"	f	class:lm::np::Model
Model	lm/wrappers/nplm.hh	/^class Model : public lm::base::ModelFacade<Model, State, Vocabulary> {$/;"	c	namespace:lm::np
ModelFacade	lm/facade.hh	/^    ModelFacade() : Model(sizeof(State)) {}$/;"	f	class:lm::base::ModelFacade
ModelFacade	lm/facade.hh	/^template <class Child, class StateT, class VocabularyT> class ModelFacade : public Model {$/;"	c	namespace:lm::base
ModelType	lm/model_type.hh	/^typedef enum {PROBING=0, REST_PROBING=1, TRIE=2, QUANT_TRIE=3, ARRAY_TRIE=4, QUANT_ARRAY_TRIE=5} ModelType;$/;"	t	namespace:lm::ngram	typeref:enum:lm::ngram::__anon16
More	util/pool.cc	/^void *Pool::More(std::size_t size) {$/;"	f	class:util::Pool
MoveRead	lm/filter/thread.hh	/^    void MoveRead() {$/;"	f	class:lm::Controller
MultiCharacter	util/tokenize_piece.hh	/^    MultiCharacter() {}$/;"	f	class:util::MultiCharacter
MultiCharacter	util/tokenize_piece.hh	/^    explicit MultiCharacter(const StringPiece &delimiter) : delimiter_(delimiter) {}$/;"	f	class:util::MultiCharacter
MultiCharacter	util/tokenize_piece.hh	/^class MultiCharacter {$/;"	c	namespace:util
MultiProgress	util/stream/multi_progress.cc	/^MultiProgress::MultiProgress() : active_(false), complete_(std::numeric_limits<uint64_t>::max()), character_handout_(0) {}$/;"	f	class:util::stream::MultiProgress
MultiProgress	util/stream/multi_progress.hh	/^class MultiProgress {$/;"	c	namespace:util::stream
Multiple	lm/filter/format.hh	/^  typedef MultipleARPAOutput Multiple;$/;"	t	struct:lm::ARPAFormat
Multiple	lm/filter/format.hh	/^  typedef MultipleOutput<Output> Multiple;$/;"	t	struct:lm::CountFormat
Multiple	lm/filter/phrase.hh	/^    explicit Multiple(const Substrings &substrings) : detail::ConditionCommon(substrings) {}$/;"	f	class:lm::phrase::Multiple
Multiple	lm/filter/phrase.hh	/^class Multiple : public detail::ConditionCommon {$/;"	c	namespace:lm::phrase
Multiple	lm/filter/vocab.hh	/^    Multiple(const Words &vocabs) : vocabs_(vocabs) {}$/;"	f	class:lm::vocab::Multiple
Multiple	lm/filter/vocab.hh	/^class Multiple {$/;"	c	namespace:lm::vocab
MultipleARPAOutput	lm/filter/format.hh	/^    MultipleARPAOutput(const char *prefix, size_t number) : MultipleOutput<ARPAOutput>(prefix, number) {}$/;"	f	class:lm::MultipleARPAOutput
MultipleARPAOutput	lm/filter/format.hh	/^class MultipleARPAOutput : public MultipleOutput<ARPAOutput> {$/;"	c	namespace:lm
MultipleOutput	lm/filter/format.hh	/^    MultipleOutput(const char *prefix, size_t number) {$/;"	f	class:lm::MultipleOutput
MultipleOutput	lm/filter/format.hh	/^template <class Single> class MultipleOutput {$/;"	c	namespace:lm
MultipleOutputBuffer	lm/filter/format.hh	/^    MultipleOutputBuffer() : last_(NULL) {}$/;"	f	class:lm::MultipleOutputBuffer
MultipleOutputBuffer	lm/filter/format.hh	/^class MultipleOutputBuffer {$/;"	c	namespace:lm
Multiply	util/double-conversion/diy-fp.cc	/^void DiyFp::Multiply(const DiyFp& other) {$/;"	f	class:double_conversion::DiyFp
Multiply	util/double-conversion/fixed-dtoa.cc	/^  void Multiply(uint32_t multiplicand) {$/;"	f	class:double_conversion::UInt128
MultiplyByPowerOfTen	util/double-conversion/bignum.cc	/^void Bignum::MultiplyByPowerOfTen(int exponent) {$/;"	f	class:double_conversion::Bignum
MultiplyByUInt32	util/double-conversion/bignum.cc	/^void Bignum::MultiplyByUInt32(uint32_t factor) {$/;"	f	class:double_conversion::Bignum
MultiplyByUInt64	util/double-conversion/bignum.cc	/^void Bignum::MultiplyByUInt64(uint64_t factor) {$/;"	f	class:double_conversion::Bignum
MurmurHash64A	util/murmur_hash.cc	/^uint64_t MurmurHash64A ( const void * key, std::size_t len, uint64_t seed )$/;"	f	namespace:util
MurmurHash64B	util/murmur_hash.cc	/^uint64_t MurmurHash64B ( const void * key, std::size_t len, uint64_t seed )$/;"	f	namespace:util
MurmurHashNative	util/murmur_hash.cc	/^uint64_t MurmurHashNative(const void * key, std::size_t len, uint64_t seed) {$/;"	f	namespace:util
MurmurHashNativeBackend	util/murmur_hash.cc	/^template <> inline uint64_t MurmurHashNativeBackend<4>(const void * key, std::size_t len, uint64_t seed) {$/;"	f	namespace:util::__anon39
MurmurHashNativeBackend	util/murmur_hash.cc	/^template <unsigned L> inline uint64_t MurmurHashNativeBackend(const void * key, std::size_t len, uint64_t seed) {$/;"	f	namespace:util::__anon39
MustFind	util/probing_hash_table.hh	/^    template <class Key> ConstIterator MustFind(const Key key) const {$/;"	f	class:util::AutoProbing
MustFind	util/probing_hash_table.hh	/^    template <class Key> ConstIterator MustFind(const Key key) const {$/;"	f	class:util::ProbingHashTable
MutableChains	lm/builder/pipeline.cc	/^    util::stream::Chains &MutableChains() { return chains_; }$/;"	f	class:lm::builder::__anon9::Master
MutableIterator	util/probing_hash_table.hh	/^    typedef Entry *MutableIterator;$/;"	t	class:util::AutoProbing
MutableIterator	util/probing_hash_table.hh	/^    typedef Entry *MutableIterator;$/;"	t	class:util::ProbingHashTable
NGram	lm/builder/ngram.hh	/^    NGram(void *begin, std::size_t order)$/;"	f	class:lm::builder::NGram
NGram	lm/builder/ngram.hh	/^class NGram {$/;"	c	namespace:lm::builder
NGramIter	lm/trie_sort.cc	/^typedef util::SizedIterator NGramIter;$/;"	t	namespace:lm::ngram::trie::__anon22	file:
NGramStream	lm/builder/ngram_stream.hh	/^    NGramStream() : gram_(NULL, 0) {}$/;"	f	class:lm::builder::NGramStream
NGramStream	lm/builder/ngram_stream.hh	/^    NGramStream(const util::stream::ChainPosition &position) : gram_(NULL, 0) {$/;"	f	class:lm::builder::NGramStream
NGramStream	lm/builder/ngram_stream.hh	/^class NGramStream {$/;"	c	namespace:lm::builder
NGramStreams	lm/builder/ngram_stream.hh	/^typedef util::stream::GenericStreams<NGramStream> NGramStreams;$/;"	t	namespace:lm::builder
NONE	lm/config.hh	/^  enum ARPALoadComplain {ALL, EXPENSIVE, NONE};$/;"	e	enum:lm::ngram::Config::ARPALoadComplain
NONE_ALLOCATED	util/mmap.hh	/^    typedef enum {MMAP_ALLOCATED, ARRAY_ALLOCATED, MALLOC_ALLOCATED, NONE_ALLOCATED} Alloc;$/;"	e	enum:util::scoped_memory::__anon37
NO_FLAGS	util/double-conversion/double-conversion.h	/^    NO_FLAGS = 0,$/;"	e	enum:double_conversion::DoubleToStringConverter::Flags
NO_FLAGS	util/double-conversion/double-conversion.h	/^    NO_FLAGS = 0,$/;"	e	enum:double_conversion::StringToDoubleConverter::Flags
NPLM_MAX_ORDER	lm/wrappers/nplm.hh	46;"	d
NULL	util/getopt.c	15;"	d	file:
NUMBER_OF_HOOKS	lm/builder/output.hh	/^  NUMBER_OF_HOOKS \/\/ Keep this last so we know how many values there are.$/;"	e	enum:lm::builder::HookType
NaN	util/double-conversion/ieee.h	/^  static double NaN() {$/;"	f	class:double_conversion::Double
NaN	util/double-conversion/ieee.h	/^  static float NaN() {$/;"	f	class:double_conversion::Single
NameFromFD	util/file.cc	/^std::string NameFromFD(int fd) {$/;"	f	namespace:util
NameGuess	util/file.hh	/^    const std::string &NameGuess() const { return name_guess_; }$/;"	f	class:util::FDException
NamePossiblyFind	util/file_piece.cc	/^std::string NamePossiblyFind(int fd, const char *name) {$/;"	f	namespace:util::__anon34
NeverCombine	util/stream/sort.hh	/^struct NeverCombine {$/;"	s	namespace:util::stream
NewInput	lm/filter/thread.hh	/^    void NewInput() {$/;"	f	class:lm::Controller
Next	lm/trie.hh	/^  uint64_t Next() const { return next; }$/;"	f	struct:lm::ngram::trie::UnigramValue
Next	lm/value.hh	/^    uint64_t Next() const { return next; }$/;"	f	struct:lm::ngram::BackoffValue::TrieUnigramValue
Next	lm/value.hh	/^    uint64_t Next() const { return next; }$/;"	f	struct:lm::ngram::RestValue::TrieUnigramValue
Next	util/stream/multi_progress.cc	/^uint64_t Next(unsigned char stone, uint64_t complete) {$/;"	f	namespace:util::stream::__anon43
NextDouble	util/double-conversion/ieee.h	/^  double NextDouble() const {$/;"	f	class:double_conversion::Double
NextInMemory	lm/builder/ngram.hh	/^    void NextInMemory() {$/;"	f	class:lm::builder::NGram
NextSize	util/stream/sort.hh	/^    uint64_t NextSize() {$/;"	f	class:util::stream::Offsets
NoOpUniqueWords	lm/vocab.hh	/^    NoOpUniqueWords() {}$/;"	f	class:lm::ngram::NoOpUniqueWords
NoOpUniqueWords	lm/vocab.hh	/^class NoOpUniqueWords {$/;"	c	namespace:lm::ngram
NoRestBuild	lm/value_build.hh	/^    NoRestBuild() {}$/;"	f	class:lm::ngram::NoRestBuild
NoRestBuild	lm/value_build.hh	/^class NoRestBuild {$/;"	c	namespace:lm::ngram
Node	lm/search_hashed.hh	/^    typedef uint64_t Node;$/;"	t	class:lm::ngram::detail::HashedSearch
Node	lm/search_trie.hh	/^    typedef NodeRange Node;$/;"	t	class:lm::ngram::trie::TrieSearch
NodeRange	lm/trie.hh	/^struct NodeRange {$/;"	s	namespace:lm::ngram::trie
NonTerminal	lm/left.hh	/^    void NonTerminal(const ChartState &in, float prob = 0.0) {$/;"	f	class:lm::ngram::RuleScore
Normalize	util/double-conversion/diy-fp.h	/^  static DiyFp Normalize(const DiyFp& a) {$/;"	f	class:double_conversion::DiyFp
Normalize	util/double-conversion/diy-fp.h	/^  void Normalize() {$/;"	f	class:double_conversion::DiyFp
NormalizeTempPrefix	util/file.cc	/^void NormalizeTempPrefix(std::string &base) {$/;"	f	namespace:util
NormalizedBoundaries	util/double-conversion/ieee.h	/^  void NormalizedBoundaries(DiyFp* out_m_minus, DiyFp* out_m_plus) const {$/;"	f	class:double_conversion::Double
NormalizedBoundaries	util/double-conversion/ieee.h	/^  void NormalizedBoundaries(DiyFp* out_m_minus, DiyFp* out_m_plus) const {$/;"	f	class:double_conversion::Single
NormalizedExponent	util/double-conversion/bignum-dtoa.cc	/^static int NormalizedExponent(uint64_t significand, int exponent) {$/;"	f	namespace:double_conversion
NotFound	lm/virtual_interface.hh	/^    WordIndex NotFound() const { return not_found_; }$/;"	f	class:lm::base::Vocabulary
NullContextMemory	lm/virtual_interface.hh	/^    const void *NullContextMemory() const { return null_context_memory_; }$/;"	f	class:lm::base::Model
NullContextState	lm/facade.hh	/^    const State &NullContextState() const { return null_context_; }$/;"	f	class:lm::base::ModelFacade
NullContextWrite	lm/virtual_interface.hh	/^    void NullContextWrite(void *to) const { memcpy(to, null_context_memory_, StateSize()); }$/;"	f	class:lm::base::Model
NullWord	lm/wrappers/nplm.hh	/^    lm::WordIndex NullWord() const { return null_word_; }$/;"	f	class:lm::np::Vocabulary
ObtainBackoffs	lm/search_trie.cc	/^    void ObtainBackoffs(unsigned char total_order, FILE *unigram_file, RecordReader *reader) {$/;"	f	class:lm::ngram::trie::__anon20::SRISucks
Offset	util/file_piece.hh	/^    uint64_t Offset() const {$/;"	f	class:util::FilePiece
Offsets	util/stream/sort.hh	/^    explicit Offsets(int fd) : log_(fd) {$/;"	f	class:util::stream::Offsets
Offsets	util/stream/sort.hh	/^class Offsets {$/;"	c	namespace:util::stream
OldSanity	lm/binary_format.cc	/^struct OldSanity {$/;"	s	namespace:lm::ngram::__anon3	file:
OnlyGamma	lm/builder/initial_probabilities.cc	/^    OnlyGamma(bool pruning) : pruning_(pruning) {}$/;"	f	class:lm::builder::__anon7::OnlyGamma
OnlyGamma	lm/builder/initial_probabilities.cc	/^class OnlyGamma {$/;"	c	namespace:lm::builder::__anon7	file:
OpenReadOrThrow	util/file.cc	/^int OpenReadOrThrow(const char *name) {$/;"	f	namespace:util
Order	lm/builder/ngram.hh	/^    std::size_t Order() const { return end_ - begin_; }$/;"	f	class:lm::builder::NGram
Order	lm/builder/sort.hh	/^    std::size_t Order() const { return order_; }$/;"	f	class:lm::builder::Comparator
Order	lm/interpolate/arpa_to_stream.hh	/^    std::size_t Order() const { return counts_.size(); }$/;"	f	class:lm::interpolate::ARPAToStream
Order	lm/search_hashed.hh	/^    unsigned char Order() const {$/;"	f	class:lm::ngram::detail::HashedSearch
Order	lm/search_trie.hh	/^    unsigned char Order() const {$/;"	f	class:lm::ngram::trie::TrieSearch
Order	lm/virtual_interface.hh	/^    unsigned char Order() const { return order_; }$/;"	f	class:lm::base::Model
OrderFromSize	lm/builder/ngram.hh	/^    static std::size_t OrderFromSize(std::size_t size) {$/;"	f	class:lm::builder::NGram
OrderStat	lm/builder/adjust_counts.cc	/^    struct OrderStat {$/;"	s	class:lm::builder::__anon4::StatCollector	file:
OutOfTokens	util/tokenize_piece.hh	/^    OutOfTokens() throw() {}$/;"	f	class:util::OutOfTokens
OutOfTokens	util/tokenize_piece.hh	/^class OutOfTokens : public Exception {$/;"	c	namespace:util
Output	lm/builder/output.hh	/^    Output() {}$/;"	f	class:lm::builder::Output
Output	lm/builder/output.hh	/^class Output : boost::noncopyable {$/;"	c	namespace:lm::builder
Output	lm/filter/format.hh	/^  typedef ARPAOutput Output;$/;"	t	struct:lm::ARPAFormat
Output	lm/filter/format.hh	/^  typedef CountOutput Output;$/;"	t	struct:lm::CountFormat
Output	util/stream/sort.hh	/^    void Output(Chain &out) {$/;"	f	class:util::stream::Sort
Output	util/stream/sort.hh	/^    void Output(Chain &out, std::size_t lazy_memory) {$/;"	f	class:util::stream::Sort
OutputHook	lm/builder/output.hh	/^    explicit OutputHook(HookType hook_type) : type_(hook_type), master_(NULL) {}$/;"	f	class:lm::builder::OutputHook
OutputHook	lm/builder/output.hh	/^class OutputHook {$/;"	c	namespace:lm::builder
OutputProbBackoff	lm/builder/interpolate.cc	/^    explicit OutputProbBackoff(std::size_t \/*order*\/) {}$/;"	f	class:lm::builder::__anon8::OutputProbBackoff
OutputProbBackoff	lm/builder/interpolate.cc	/^class OutputProbBackoff {$/;"	c	namespace:lm::builder::__anon8	file:
OutputQ	lm/builder/interpolate.cc	/^    explicit OutputQ(std::size_t order) : q_delta_(order) {}$/;"	f	class:lm::builder::__anon8::OutputQ
OutputQ	lm/builder/interpolate.cc	/^class OutputQ {$/;"	c	namespace:lm::builder::__anon8	file:
OutputWorker	lm/filter/thread.hh	/^    OutputWorker(Output &output, util::PCQueue<Request> &done) : output_(output), done_(done), base_sequence_(0) {}$/;"	f	class:lm::OutputWorker
OutputWorker	lm/filter/thread.hh	/^template <class Batch, class Output> class OutputWorker {$/;"	c	namespace:lm
OverflowException	util/exception.cc	/^OverflowException::OverflowException() throw() {}$/;"	f	class:util::OverflowException
OverflowException	util/exception.hh	/^class OverflowException : public Exception {$/;"	c	namespace:util
Overwrite	lm/trie_sort.cc	/^void RecordReader::Overwrite(const void *start, std::size_t amount) {$/;"	f	class:lm::ngram::trie::RecordReader
OwningMergingReader	util/stream/sort.hh	/^    OwningMergingReader(int data, const Offsets &offsets, std::size_t buffer, std::size_t lazy, const Compare &compare, const Combine &combine) $/;"	f	class:util::stream::OwningMergingReader
OwningMergingReader	util/stream/sort.hh	/^template <class Compare, class Combine> class OwningMergingReader : public MergingReader<Compare, Combine> {$/;"	c	namespace:util::stream
P	lm/builder/sort.hh	/^    typedef util::FixedArray<S> P;$/;"	t	class:lm::builder::Sorts
P	lm/model.hh	/^    typedef base::ModelFacade<GenericModel<Search, VocabularyT>, State, VocabularyT> P;$/;"	t	class:lm::ngram::detail::GenericModel
P	lm/wrappers/nplm.hh	/^    typedef lm::base::ModelFacade<Model, State, Vocabulary> P;$/;"	t	class:lm::np::Model
P	util/stream/multi_stream.hh	/^    typedef util::FixedArray<T> P;$/;"	t	class:util::stream::GenericStreams
P	util/stream/sort.hh	/^    typedef MergingReader<Compare, Combine> P;$/;"	t	class:util::stream::OwningMergingReader
PARALLEL_READ	util/mmap.hh	/^  PARALLEL_READ,$/;"	e	enum:util::__anon38
PCQueue	util/pcqueue.hh	/^  explicit PCQueue(size_t size)$/;"	f	class:util::PCQueue
PCQueue	util/pcqueue.hh	/^template <class T> class PCQueue : boost::noncopyable {$/;"	c	namespace:util
PFN_MS_EX	util/usage.cc	/^typedef WINBOOL (WINAPI *PFN_MS_EX) (lMEMORYSTATUSEX*);$/;"	t	file:
POPULATE_OR_LAZY	util/mmap.hh	/^  POPULATE_OR_LAZY,$/;"	e	enum:util::__anon38
POPULATE_OR_READ	util/mmap.hh	/^  POPULATE_OR_READ,$/;"	e	enum:util::__anon38
PRECISION	util/double-conversion/double-conversion.h	/^    PRECISION$/;"	e	enum:double_conversion::DoubleToStringConverter::DtoaMode
PROBING	lm/model_type.hh	/^typedef enum {PROBING=0, REST_PROBING=1, TRIE=2, QUANT_TRIE=3, ARRAY_TRIE=4, QUANT_ARRAY_TRIE=5} ModelType;$/;"	e	enum:lm::ngram::__anon16
PROB_PARALLEL_HOOK	lm/builder/output.hh	/^  PROB_PARALLEL_HOOK, \/\/ Probability and backoff (or just q).  Output must process the orders in parallel or there will be a deadlock.$/;"	e	enum:lm::builder::HookType
PROB_SEQUENTIAL_HOOK	lm/builder/output.hh	/^  PROB_SEQUENTIAL_HOOK, \/\/ Probability and backoff (or just q).  Output can process orders any way it likes.  This requires writing the data to disk then reading.  Useful for ARPA files, which put unigrams first etc.$/;"	e	enum:lm::builder::HookType
PRead	util/stream/io.hh	/^    explicit PRead(int fd, bool take_own = false) : file_(fd), own_(take_own) {}$/;"	f	class:util::stream::PRead
PRead	util/stream/io.hh	/^class PRead {$/;"	c	namespace:util::stream
PWriteAndRecycle	util/stream/io.hh	/^    explicit PWriteAndRecycle(int fd) : file_(fd) {}$/;"	f	class:util::stream::PWriteAndRecycle
PWriteAndRecycle	util/stream/io.hh	/^class PWriteAndRecycle {$/;"	c	namespace:util::stream
PairedIterator	util/joint_sort.hh	/^    PairedIterator(const KeyIter &key, const ValueIter &value) :$/;"	f	class:util::PairedIterator
PairedIterator	util/joint_sort.hh	/^template <class KeyIter, class ValueIter> class PairedIterator : public ProxyIterator<detail::JointProxy<KeyIter, ValueIter> > {$/;"	c	namespace:util
ParallelRead	util/parallel_read.cc	/^void ParallelRead(int fd, void *to, std::size_t amount, uint64_t offset) {$/;"	f	namespace:util
Parameters	lm/binary_format.hh	/^struct Parameters {$/;"	s	namespace:lm::ngram
ParseNum	util/usage.cc	/^template <class Num> uint64_t ParseNum(const std::string &arg) {$/;"	f	namespace:util::__anon46
ParseNumber	util/file_piece.cc	/^void ParseNumber(const char *begin, const char *&end, double &out) {$/;"	f	namespace:util::__anon35
ParseNumber	util/file_piece.cc	/^void ParseNumber(const char *begin, const char *&end, float &out) {$/;"	f	namespace:util::__anon35
ParseNumber	util/file_piece.cc	/^void ParseNumber(const char *begin, const char *&end, long int &out) {$/;"	f	namespace:util::__anon35
ParseNumber	util/file_piece.cc	/^void ParseNumber(const char *begin, const char *&end, unsigned long int &out) {$/;"	f	namespace:util::__anon35
ParseNumberException	util/file_piece.cc	/^ParseNumberException::ParseNumberException(StringPiece value) throw() {$/;"	f	class:util::ParseNumberException
ParseNumberException	util/file_piece.hh	/^class ParseNumberException : public Exception {$/;"	c	namespace:util
ParseSize	util/usage.cc	/^uint64_t ParseSize(const std::string &arg) {$/;"	f	namespace:util
PartialIter	lm/trie_sort.cc	/^typedef util::ProxyIterator<PartialViewProxy> PartialIter;$/;"	t	namespace:lm::ngram::trie::__anon22	file:
PartialRead	util/file.cc	/^std::size_t PartialRead(int fd, void *to, std::size_t amount) {$/;"	f	namespace:util
PartialViewProxy	lm/trie_sort.cc	/^    PartialViewProxy() : attention_size_(0), inner_() {}$/;"	f	class:lm::ngram::trie::__anon22::PartialViewProxy
PartialViewProxy	lm/trie_sort.cc	/^    PartialViewProxy(void *ptr, std::size_t block_size, std::size_t attention_size) : attention_size_(attention_size), inner_(ptr, block_size) {}$/;"	f	class:lm::ngram::trie::__anon22::PartialViewProxy
PartialViewProxy	lm/trie_sort.cc	/^class PartialViewProxy {$/;"	c	namespace:lm::ngram::trie::__anon22	file:
PassNGram	lm/filter/phrase.hh	/^    template <class Iterator> bool PassNGram(const Iterator &begin, const Iterator &end) {$/;"	f	class:lm::phrase::Union
PassNGram	lm/filter/vocab.hh	/^    template <class Iterator> bool PassNGram(const Iterator &begin, const Iterator &end) {$/;"	f	class:lm::vocab::Single
PassNGram	lm/filter/vocab.hh	/^    template <class Iterator> bool PassNGram(const Iterator &begin, const Iterator &end) {$/;"	f	class:lm::vocab::Union
Payload	lm/builder/ngram.hh	/^union Payload {$/;"	u	namespace:lm::builder
PeekSize	util/stream/sort.hh	/^    uint64_t PeekSize() const {$/;"	f	class:util::stream::Offsets
Pipeline	lm/builder/pipeline.cc	/^void Pipeline(PipelineConfig &config, int text_file, Output &output) {$/;"	f	namespace:lm::builder
PipelineConfig	lm/builder/pipeline.hh	/^struct PipelineConfig {$/;"	s	namespace:lm::builder
Pivot32	util/sorted_uniform.hh	/^struct Pivot32 {$/;"	s	namespace:util
Pivot64	util/sorted_uniform.hh	/^struct Pivot64 {$/;"	s	namespace:util
PivotSelect	util/sorted_uniform.hh	/^template <> struct PivotSelect<2> { typedef Pivot32 T; };$/;"	s	namespace:util
PivotSelect	util/sorted_uniform.hh	/^template <> struct PivotSelect<4> { typedef Pivot32 T; };$/;"	s	namespace:util
PivotSelect	util/sorted_uniform.hh	/^template <> struct PivotSelect<8> { typedef Pivot64 T; };$/;"	s	namespace:util
PlusCompare	util/double-conversion/bignum.cc	/^int Bignum::PlusCompare(const Bignum& a, const Bignum& b, const Bignum& c) {$/;"	f	class:double_conversion::Bignum
PlusEqual	util/double-conversion/bignum.h	/^  static bool PlusEqual(const Bignum& a, const Bignum& b, const Bignum& c) {$/;"	f	class:double_conversion::Bignum
PlusLess	util/double-conversion/bignum.h	/^  static bool PlusLess(const Bignum& a, const Bignum& b, const Bignum& c) {$/;"	f	class:double_conversion::Bignum
PlusLessEqual	util/double-conversion/bignum.h	/^  static bool PlusLessEqual(const Bignum& a, const Bignum& b, const Bignum& c) {$/;"	f	class:double_conversion::Bignum
Poison	lm/builder/ngram_stream.hh	/^    void Poison() { stream_.Poison(); }$/;"	f	class:lm::builder::NGramStream
Poison	util/stream/chain.cc	/^void Link::Poison() {$/;"	f	class:util::stream::Link
Poison	util/stream/stream.hh	/^    void Poison() {$/;"	f	class:util::stream::Stream
Pool	util/pool.cc	/^Pool::Pool() {$/;"	f	class:util::Pool
Pool	util/pool.hh	/^class Pool {$/;"	c	namespace:util
Pop	util/stream/sort.hh	/^    void Pop() {$/;"	f	class:util::stream::MergeQueue
PopFront	lm/trie_sort.cc	/^    void PopFront() {$/;"	f	class:lm::ngram::trie::__anon23::Closer
Populate	lm/quantize.hh	/^        float *Populate() { return begin_; }$/;"	f	class:lm::ngram::SeparatelyQuantize::Bins
PopulateUnigramWeights	lm/search_trie.cc	/^void PopulateUnigramWeights(FILE *file, WordIndex unigram_count, RecordReader &contexts, UnigramValue *unigrams) {$/;"	f	namespace:lm::ngram::trie::__anon20
PositiveProbWarn	lm/read_arpa.hh	/^    PositiveProbWarn() : action_(THROW_UP) {}$/;"	f	class:lm::PositiveProbWarn
PositiveProbWarn	lm/read_arpa.hh	/^    explicit PositiveProbWarn(WarningAction action) : action_(action) {}$/;"	f	class:lm::PositiveProbWarn
PositiveProbWarn	lm/read_arpa.hh	/^class PositiveProbWarn {$/;"	c	namespace:lm
PowersOfTenCache	util/double-conversion/cached-powers.h	/^class PowersOfTenCache {$/;"	c	namespace:double_conversion
PrefixOrder	lm/builder/sort.hh	/^    explicit PrefixOrder(std::size_t order) : Comparator<PrefixOrder>(order) {}$/;"	f	class:lm::builder::PrefixOrder
PrefixOrder	lm/builder/sort.hh	/^class PrefixOrder : public Comparator<PrefixOrder> {$/;"	c	namespace:lm::builder
PreviousDouble	util/double-conversion/ieee.h	/^  double PreviousDouble() const {$/;"	f	class:double_conversion::Double
Print	lm/builder/print.hh	/^    explicit Print(const VocabReconstitute &vocab, int fd) : vocab_(vocab), to_(fd) {}$/;"	f	class:lm::builder::Print
Print	lm/builder/print.hh	/^template <class V> class Print {$/;"	c	namespace:lm::builder
PrintARPA	lm/builder/print.hh	/^    explicit PrintARPA(int fd, bool verbose_header)$/;"	f	class:lm::builder::PrintARPA
PrintARPA	lm/builder/print.hh	/^class PrintARPA : public OutputHook {$/;"	c	namespace:lm::builder
PrintPayload	lm/builder/print.hh	/^template <> inline void PrintPayload<ProbBackoff>(util::FakeOFStream &to, const Payload &payload) {$/;"	f	namespace:lm::builder
PrintPayload	lm/builder/print.hh	/^template <> inline void PrintPayload<Uninterpolated>(util::FakeOFStream &to, const Payload &payload) {$/;"	f	namespace:lm::builder
PrintPayload	lm/builder/print.hh	/^template <> inline void PrintPayload<uint64_t>(util::FakeOFStream &to, const Payload &payload) {$/;"	f	namespace:lm::builder
PrintStatistics	lm/builder/pipeline.cc	/^void PrintStatistics(const std::vector<uint64_t> &counts, const std::vector<uint64_t> &counts_pruned, const std::vector<Discount> &discounts) {$/;"	f	namespace:lm::builder::__anon9
PrintUsage	util/usage.cc	/^void PrintUsage(std::ostream &out) {$/;"	f	namespace:util
Prob	lm/quantize.hh	/^        float Prob() const {$/;"	f	class:lm::ngram::DontQuantize::LongestPointer
Prob	lm/quantize.hh	/^        float Prob() const {$/;"	f	class:lm::ngram::DontQuantize::MiddlePointer
Prob	lm/quantize.hh	/^        float Prob() const {$/;"	f	class:lm::ngram::SeparatelyQuantize::LongestPointer
Prob	lm/quantize.hh	/^        float Prob() const {$/;"	f	class:lm::ngram::SeparatelyQuantize::MiddlePointer
Prob	lm/search_hashed.hh	/^    float Prob() const {$/;"	f	class:lm::ngram::detail::LongestPointer
Prob	lm/trie.hh	/^    float Prob() const { return to_->prob; }$/;"	f	class:lm::ngram::trie::UnigramPointer
Prob	lm/value.hh	/^    float Prob() const { return to_->prob; }$/;"	f	class:lm::ngram::GenericTrieUnigramProxy
Prob	lm/value.hh	/^    float Prob() const {$/;"	f	class:lm::ngram::GenericProbingProxy
Prob	lm/weights.hh	/^struct Prob {$/;"	s	namespace:lm
ProbBackoff	lm/weights.hh	/^struct ProbBackoff {$/;"	s	namespace:lm
ProbBins	lm/quantize.hh	/^        const Bins &ProbBins() const { return bins_[0]; }$/;"	f	class:lm::ngram::SeparatelyQuantize::MiddlePointer
ProbEntry	lm/search_hashed.hh	/^struct ProbEntry {$/;"	s	namespace:lm::ngram::detail
ProbPointer	lm/search_trie.cc	/^struct ProbPointer {$/;"	s	namespace:lm::ngram::trie::__anon20	file:
ProbingEntry	lm/value.hh	/^  struct ProbingEntry {$/;"	s	struct:lm::ngram::BackoffValue
ProbingEntry	lm/value.hh	/^  struct ProbingEntry {$/;"	s	struct:lm::ngram::RestValue
ProbingHashTable	util/probing_hash_table.hh	/^    ProbingHashTable() : entries_(0)$/;"	f	class:util::ProbingHashTable
ProbingHashTable	util/probing_hash_table.hh	/^    ProbingHashTable(void *start, std::size_t allocated, const Key &invalid = Key(), const Hash &hash_func = Hash(), const Equal &equal_func = Equal())$/;"	f	class:util::ProbingHashTable
ProbingHashTable	util/probing_hash_table.hh	/^template <class EntryT, class HashT, class EqualT = std::equal_to<typename EntryT::Key> > class ProbingHashTable {$/;"	c	namespace:util
ProbingProxy	lm/value.hh	/^      ProbingProxy() {}$/;"	f	class:lm::ngram::BackoffValue::ProbingProxy
ProbingProxy	lm/value.hh	/^      ProbingProxy() {}$/;"	f	class:lm::ngram::RestValue::ProbingProxy
ProbingProxy	lm/value.hh	/^      explicit ProbingProxy(const Weights &to) : GenericProbingProxy<RestWeights>(to) {}$/;"	f	class:lm::ngram::RestValue::ProbingProxy
ProbingProxy	lm/value.hh	/^      explicit ProbingProxy(const Weights &to) : GenericProbingProxy<Weights>(to) {}$/;"	f	class:lm::ngram::BackoffValue::ProbingProxy
ProbingProxy	lm/value.hh	/^  class ProbingProxy : public GenericProbingProxy<RestWeights> {$/;"	c	struct:lm::ngram::RestValue
ProbingProxy	lm/value.hh	/^  class ProbingProxy : public GenericProbingProxy<Weights> {$/;"	c	struct:lm::ngram::BackoffValue
ProbingSizeException	util/probing_hash_table.hh	/^    ProbingSizeException() throw() {}$/;"	f	class:util::ProbingSizeException
ProbingSizeException	util/probing_hash_table.hh	/^class ProbingSizeException : public Exception {$/;"	c	namespace:util
ProbingVocabulary	lm/vocab.cc	/^ProbingVocabulary::ProbingVocabulary() : enumerate_(NULL) {}$/;"	f	class:lm::ngram::ProbingVocabulary
ProbingVocabulary	lm/vocab.hh	/^class ProbingVocabulary : public base::Vocabulary {$/;"	c	namespace:lm::ngram
ProbingVocabularyEntry	lm/vocab.hh	/^struct ProbingVocabularyEntry {$/;"	s	namespace:lm::ngram
ProbingVocabularyHeader	lm/vocab.cc	/^struct ProbingVocabularyHeader {$/;"	s	namespace:lm::ngram::detail	file:
Process	util/read_compressed.cc	/^    bool Process() {$/;"	f	class:util::__anon41::BZip
Process	util/read_compressed.cc	/^    bool Process() {$/;"	f	class:util::__anon41::GZip
Process	util/read_compressed.cc	/^    bool Process() {$/;"	f	class:util::__anon41::XZip
ProcessRet	lm/left.hh	/^    void ProcessRet(const FullScoreReturn &ret) {$/;"	f	class:lm::ngram::RuleScore
Produce	util/pcqueue.hh	/^  void Produce(const T &val) {$/;"	f	class:util::PCQueue
Produce	util/thread_pool.hh	/^    void Produce(const Request &request) {$/;"	f	class:util::ThreadPool
ProgressMessages	lm/config.hh	/^  std::ostream *ProgressMessages() const {$/;"	f	struct:lm::ngram::Config
PronId	lm/model.hh	/^    typedef unsigned int PronId;$/;"	t	class:lm::ngram::detail::GenericModel
ProxyIterator	util/proxy_iterator.hh	/^    ProxyIterator() {}$/;"	f	class:util::ProxyIterator
ProxyIterator	util/proxy_iterator.hh	/^    explicit ProxyIterator(const Proxy &p) : p_(p) {}$/;"	f	class:util::ProxyIterator
ProxyIterator	util/proxy_iterator.hh	/^    template <class AlternateProxy> ProxyIterator(const ProxyIterator<AlternateProxy> &in) : p_(*in) {}$/;"	f	class:util::ProxyIterator
ProxyIterator	util/proxy_iterator.hh	/^template <class Proxy> class ProxyIterator {$/;"	c	namespace:util
PruneNGramStream	lm/builder/initial_probabilities.cc	/^    PruneNGramStream(const util::stream::ChainPosition &position) :$/;"	f	class:lm::builder::__anon7::PruneNGramStream
PruneNGramStream	lm/builder/initial_probabilities.cc	/^class PruneNGramStream {$/;"	c	namespace:lm::builder::__anon7	file:
Push	util/stream/sort.hh	/^    void Push(void *base, uint64_t offset, uint64_t amount) {$/;"	f	class:util::stream::MergeQueue
QUANT_ARRAY_TRIE	lm/model_type.hh	/^typedef enum {PROBING=0, REST_PROBING=1, TRIE=2, QUANT_TRIE=3, ARRAY_TRIE=4, QUANT_ARRAY_TRIE=5} ModelType;$/;"	e	enum:lm::ngram::__anon16
QUANT_ARRAY_TRIE_SORTED	lm/model_type.hh	/^const ModelType QUANT_ARRAY_TRIE_SORTED = QUANT_ARRAY_TRIE;$/;"	m	namespace:lm::ngram
QUANT_TRIE	lm/model_type.hh	/^typedef enum {PROBING=0, REST_PROBING=1, TRIE=2, QUANT_TRIE=3, ARRAY_TRIE=4, QUANT_ARRAY_TRIE=5} ModelType;$/;"	e	enum:lm::ngram::__anon16
QUANT_TRIE_SORTED	lm/model_type.hh	/^const ModelType QUANT_TRIE_SORTED = QUANT_TRIE;$/;"	m	namespace:lm::ngram
Query	lm/ngram_query.hh	/^template <class Model, class Printer> void Query(const Model &model, bool sentence_context) {$/;"	f	namespace:lm::ngram
Query	lm/ngram_query.hh	/^template <class Model> void Query(const char *file, const Config &config, bool sentence_context, bool show_words) {$/;"	f	namespace:lm::ngram
Queue	util/stream/sort.hh	/^    typedef std::priority_queue<Entry, std::vector<Entry>, Greater> Queue;$/;"	t	class:util::stream::MergeQueue
READ	util/mmap.hh	/^  READ,$/;"	e	enum:util::__anon38
REST_LOWER	lm/config.hh	/^    REST_LOWER, \/\/ Use lower-order files given below.$/;"	e	enum:lm::ngram::Config::RestFunction
REST_MAX	lm/config.hh	/^    REST_MAX,   \/\/ Maximum of any score to the left$/;"	e	enum:lm::ngram::Config::RestFunction
REST_PROBING	lm/model_type.hh	/^typedef enum {PROBING=0, REST_PROBING=1, TRIE=2, QUANT_TRIE=3, ARRAY_TRIE=4, QUANT_ARRAY_TRIE=5} ModelType;$/;"	e	enum:lm::ngram::__anon16
RadixStringToIeee	util/double-conversion/double-conversion.cc	/^static double RadixStringToIeee(const char* current,$/;"	f	namespace:double_conversion
RangeLessBySize	util/multi_intersection.hh	/^template <class Range> struct RangeLessBySize : public std::binary_function<const Range &, const Range &, bool> {$/;"	s	namespace:util::detail
Raw	lm/search_hashed.hh	/^        typename Value::Weights *Raw() { return unigram_; }$/;"	f	class:lm::ngram::detail::HashedSearch::Unigram
Raw	lm/trie.hh	/^    UnigramValue *Raw() {$/;"	f	class:lm::ngram::trie::Unigram
RawAmount	util/read_compressed.hh	/^    uint64_t RawAmount() const { return raw_amount_; }$/;"	f	class:util::ReadCompressed
ReBase	lm/builder/ngram.hh	/^    void ReBase(void *to) {$/;"	f	class:lm::builder::NGram
Read	lm/filter/count_io.hh	/^    void Read(std::istream &in) {$/;"	f	class:lm::CountBatch
Read	util/read_compressed.cc	/^    std::size_t Read(void *, std::size_t, ReadCompressed &) {$/;"	f	class:util::__anon41::Complete
Read	util/read_compressed.cc	/^    std::size_t Read(void *to, std::size_t amount, ReadCompressed &thunk) {$/;"	f	class:util::__anon41::IStreamReader
Read	util/read_compressed.cc	/^    std::size_t Read(void *to, std::size_t amount, ReadCompressed &thunk) {$/;"	f	class:util::__anon41::StreamCompressed
Read	util/read_compressed.cc	/^    std::size_t Read(void *to, std::size_t amount, ReadCompressed &thunk) {$/;"	f	class:util::__anon41::Uncompressed
Read	util/read_compressed.cc	/^    std::size_t Read(void *to, std::size_t amount, ReadCompressed &thunk) {$/;"	f	class:util::__anon41::UncompressedWithHeader
Read	util/read_compressed.cc	/^std::size_t ReadCompressed::Read(void *to, std::size_t amount) {$/;"	f	class:util::ReadCompressed
Read	util/stream/io.hh	/^    explicit Read(int fd) : file_(fd) {}$/;"	f	class:util::stream::Read
Read	util/stream/io.hh	/^class Read {$/;"	c	namespace:util::stream
Read	util/stream/sort.hh	/^        bool Read(int fd, std::size_t buf_size) {$/;"	f	class:util::stream::MergeQueue::Entry
Read1Gram	lm/read_arpa.hh	/^template <class Voc, class Weights> void Read1Gram(util::FilePiece &f, Voc &vocab, Weights *unigrams, PositiveProbWarn &warn) {$/;"	f	namespace:lm
Read1Grams	lm/read_arpa.hh	/^template <class Voc, class Weights> void Read1Grams(util::FilePiece &f, std::size_t count, Voc &vocab, Weights *unigrams, PositiveProbWarn &warn) {$/;"	f	namespace:lm
ReadARPA	lm/filter/arpa_io.hh	/^template <class Output> void ReadARPA(util::FilePiece &in_lm, Output &out) {$/;"	f	namespace:lm
ReadARPACounts	lm/read_arpa.cc	/^void ReadARPACounts(util::FilePiece &in, std::vector<uint64_t> &number) {$/;"	f	namespace:lm
ReadBackoff	lm/read_arpa.cc	/^void ReadBackoff(util::FilePiece &in, Prob &\/*weights*\/) {$/;"	f	namespace:lm
ReadBackoff	lm/read_arpa.cc	/^void ReadBackoff(util::FilePiece &in, float &backoff) {$/;"	f	namespace:lm
ReadBackoff	lm/read_arpa.hh	/^inline void ReadBackoff(util::FilePiece &in, ProbBackoff &weights) {$/;"	f	namespace:lm
ReadBackoff	lm/read_arpa.hh	/^inline void ReadBackoff(util::FilePiece &in, RestWeights &weights) {$/;"	f	namespace:lm
ReadBase	util/read_compressed.cc	/^class ReadBase {$/;"	c	namespace:util	file:
ReadCompressed	util/read_compressed.cc	/^ReadCompressed::ReadCompressed() {}$/;"	f	class:util::ReadCompressed
ReadCompressed	util/read_compressed.cc	/^ReadCompressed::ReadCompressed(int fd) {$/;"	f	class:util::ReadCompressed
ReadCompressed	util/read_compressed.cc	/^ReadCompressed::ReadCompressed(std::istream &in) {$/;"	f	class:util::ReadCompressed
ReadCompressed	util/read_compressed.hh	/^class ReadCompressed {$/;"	c	namespace:util
ReadCount	lm/filter/count_io.hh	/^template <class Output> void ReadCount(util::FilePiece &in_file, Output &out) {$/;"	f	namespace:lm
ReadCount	lm/read_arpa.cc	/^uint64_t ReadCount(const std::string &from) {$/;"	f	namespace:lm::__anon18
ReadCount	util/read_compressed.cc	/^    static uint64_t &ReadCount(ReadCompressed &thunk) {$/;"	f	class:util::ReadBase
ReadDelimited	util/file_piece.hh	/^    StringPiece ReadDelimited(const bool *delim = kSpaces) {$/;"	f	class:util::FilePiece
ReadDiyFp	util/double-conversion/strtod.cc	/^static void ReadDiyFp(Vector<const char> buffer,$/;"	f	namespace:double_conversion
ReadDouble	util/file_piece.cc	/^double FilePiece::ReadDouble() {$/;"	f	class:util::FilePiece
ReadEnd	lm/read_arpa.cc	/^void ReadEnd(util::FilePiece &in) {$/;"	f	namespace:lm
ReadEntry	lm/trie.hh	/^    util::BitAddress ReadEntry(uint64_t pointer, NodeRange &range) {$/;"	f	class:lm::ngram::trie::BitPackedMiddle
ReadFactory	util/read_compressed.cc	/^ReadBase *ReadFactory(int fd, uint64_t &raw_amount, const void *already_data, const std::size_t already_size, bool require_compressed) {$/;"	f	namespace:util::__anon41
ReadFloat	util/file_piece.cc	/^float FilePiece::ReadFloat() {$/;"	f	class:util::FilePiece
ReadFloat32	util/bit_packing.hh	/^inline float ReadFloat32(const void *base, uint64_t bit_off) {$/;"	f	namespace:util
ReadForConfig	lm/binary_format.cc	/^void BinaryFormat::ReadForConfig(void *to, std::size_t amount, uint64_t offset_excluding_header) const {$/;"	f	class:lm::ngram::BinaryFormat
ReadHeader	lm/binary_format.cc	/^void ReadHeader(int fd, Parameters &out) {$/;"	f	namespace:lm::ngram
ReadInput	util/read_compressed.cc	/^    void ReadInput(ReadCompressed &thunk) {$/;"	f	class:util::__anon41::StreamCompressed	file:
ReadInt25	util/bit_packing.hh	/^inline uint32_t ReadInt25(const void *base, uint64_t bit_off, uint8_t length, uint32_t mask) {$/;"	f	namespace:util
ReadInt57	util/bit_packing.hh	/^inline uint64_t ReadInt57(const void *base, uint64_t bit_off, uint8_t length, uint64_t mask) {$/;"	f	namespace:util
ReadLine	util/file_piece.cc	/^StringPiece FilePiece::ReadLine(char delim) {$/;"	f	class:util::FilePiece
ReadLineOrEOF	util/file_piece.cc	/^bool FilePiece::ReadLineOrEOF(StringPiece &to, char delim) {$/;"	f	class:util::FilePiece
ReadLong	util/file_piece.cc	/^long int FilePiece::ReadLong() {$/;"	f	class:util::FilePiece
ReadMultiple	lm/filter/phrase.cc	/^unsigned int ReadMultiple(std::istream &in, Substrings &out) {$/;"	f	namespace:lm::phrase
ReadMultiple	lm/filter/vocab.cc	/^unsigned int ReadMultiple(std::istream &in, boost::unordered_map<std::string, std::vector<unsigned int> > &out) {$/;"	f	namespace:lm::vocab
ReadNGram	lm/read_arpa.hh	/^template <class Voc, class Weights, class Iterator> void ReadNGram(util::FilePiece &f, const unsigned char n, const Voc &vocab, Iterator indices_out, Weights &weights, PositiveProbWarn &warn) {$/;"	f	namespace:lm
ReadNGramHeader	lm/read_arpa.cc	/^void ReadNGramHeader(util::FilePiece &in, unsigned int length) {$/;"	f	namespace:lm
ReadNGrams	lm/filter/arpa_io.hh	/^template <class Output> void ReadNGrams(util::FilePiece &in, unsigned int length, uint64_t number, Output &out) {$/;"	f	namespace:lm
ReadNGrams	lm/search_hashed.cc	/^template <class Build, class Activate, class Store> void ReadNGrams($/;"	f	namespace:lm::ngram::__anon19
ReadNext	lm/bhiksha.hh	/^    void ReadNext(const void *base, uint64_t bit_offset, uint64_t \/*index*\/, uint8_t total_bits, NodeRange &out) const {$/;"	f	class:lm::ngram::trie::DontBhiksha
ReadNext	lm/bhiksha.hh	/^    void ReadNext(const void *base, uint64_t bit_offset, uint64_t index, uint8_t total_bits, NodeRange &out) const {$/;"	f	class:lm::ngram::trie::ArrayBhiksha
ReadNonPositiveFloat31	util/bit_packing.hh	/^inline float ReadNonPositiveFloat31(const void *base, uint64_t bit_off) {$/;"	f	namespace:util
ReadNumber	util/file_piece.cc	/^template <class T> T FilePiece::ReadNumber() {$/;"	f	class:util::FilePiece
ReadOff	util/bit_packing.hh	/^inline uint64_t ReadOff(const void *base, uint64_t bit_off) {$/;"	f	namespace:util
ReadOrEOF	util/file.cc	/^std::size_t ReadOrEOF(int fd, void *to_void, std::size_t amount) {$/;"	f	namespace:util
ReadOrEOF	util/read_compressed.cc	/^std::size_t ReadCompressed::ReadOrEOF(void *const to_in, std::size_t amount) {$/;"	f	class:util::ReadCompressed
ReadOrThrow	lm/search_trie.cc	/^void ReadOrThrow(FILE *from, void *data, size_t size) {$/;"	f	namespace:lm::ngram::trie::__anon20
ReadOrThrow	util/file.cc	/^void ReadOrThrow(int fd, void *to_void, std::size_t amount) {$/;"	f	namespace:util
ReadShift	util/file_piece.cc	/^void FilePiece::ReadShift() {$/;"	f	class:util::FilePiece
ReadSingle	lm/filter/vocab.cc	/^void ReadSingle(std::istream &in, boost::unordered_set<std::string> &out) {$/;"	f	namespace:lm::vocab
ReadSingle	util/stream/sort.hh	/^    void ReadSingle(uint64_t offset, const uint64_t size, const ChainPosition &position) {$/;"	f	class:util::stream::MergingReader
ReadSizeException	util/stream/io.cc	/^ReadSizeException::ReadSizeException() throw() {}$/;"	f	class:util::stream::ReadSizeException
ReadSizeException	util/stream/io.hh	/^class ReadSizeException : public util::Exception {$/;"	c	namespace:util::stream
ReadUInt64	util/double-conversion/bignum.cc	/^static uint64_t ReadUInt64(Vector<const char> buffer,$/;"	f	namespace:double_conversion
ReadULong	util/file_piece.cc	/^unsigned long int FilePiece::ReadULong() {$/;"	f	class:util::FilePiece
ReadUint64	util/double-conversion/strtod.cc	/^static uint64_t ReadUint64(Vector<const char> buffer,$/;"	f	namespace:double_conversion
ReadWordSameLine	util/file_piece.hh	/^    bool ReadWordSameLine(StringPiece &to, const bool *delim = kSpaces) {$/;"	f	class:util::FilePiece
ReadWords	lm/vocab.cc	/^void ReadWords(int fd, EnumerateVocab *enumerate, WordIndex expected_count, uint64_t offset) {$/;"	f	namespace:lm::ngram::__anon24
Reader	util/parallel_read.cc	/^    explicit Reader(int fd) : fd_(fd) {}$/;"	f	class:util::__anon40::Reader
Reader	util/parallel_read.cc	/^class Reader {$/;"	c	namespace:util::__anon40	file:
Recognize	lm/wrappers/nplm.cc	/^bool Model::Recognize(const std::string &name) {$/;"	f	class:lm::np::Model
RecognizeBinary	lm/binary_format.cc	/^bool RecognizeBinary(const char *file, ModelType &recognized) {$/;"	f	namespace:lm::ngram
RecordReader	lm/trie_sort.hh	/^    RecordReader() : remains_(true) {}$/;"	f	class:lm::ngram::trie::RecordReader
RecordReader	lm/trie_sort.hh	/^class RecordReader {$/;"	c	namespace:lm::ngram::trie
RecordStart	util/usage.cc	/^    RecordStart() {$/;"	f	class:util::__anon45::RecordStart
RecordStart	util/usage.cc	/^class RecordStart {$/;"	c	namespace:util::__anon45	file:
RecursiveInsert	lm/search_trie.cc	/^template <class Doing> void RecursiveInsert(const unsigned char total_order, const WordIndex unigram_count, RecordReader *input, std::ostream *progress_out, const char *message, Doing &doing) {$/;"	f	namespace:lm::ngram::trie::__anon20
Recycler	util/stream/chain.hh	/^class Recycler {$/;"	c	namespace:util::stream
Relocate	lm/vocab.cc	/^void ProbingVocabulary::Relocate(void *new_start) {$/;"	f	class:lm::ngram::ProbingVocabulary
Relocate	lm/vocab.cc	/^void SortedVocabulary::Relocate(void *new_start) {$/;"	f	class:lm::ngram::SortedVocabulary
Relocate	util/probing_hash_table.hh	/^    void Relocate(void *new_base) {$/;"	f	class:util::ProbingHashTable
RemainingBlocks	util/stream/sort.hh	/^    uint64_t RemainingBlocks() const { return block_count_; }$/;"	f	class:util::stream::Offsets
ReplaceThis	util/read_compressed.cc	/^    static void ReplaceThis(ReadBase *with, ReadCompressed &thunk) {$/;"	f	class:util::ReadBase
Request	lm/filter/thread.hh	/^    typedef Batch *Request;$/;"	t	class:lm::FilterWorker
Request	lm/filter/thread.hh	/^    typedef Batch *Request;$/;"	t	class:lm::OutputWorker
Request	util/parallel_read.cc	/^    struct Request {$/;"	s	class:util::__anon40::Reader	file:
Request	util/thread_pool.hh	/^    typedef typename Handler::Request Request;$/;"	t	class:util::ThreadPool
Request	util/thread_pool.hh	/^    typedef typename Handler::Request Request;$/;"	t	class:util::Worker
RequiredBits	util/bit_packing.cc	/^uint8_t RequiredBits(uint64_t max_value) {$/;"	f	namespace:util
Reserve	lm/filter/format.hh	/^    void Reserve(size_t size) { lines_.reserve(size); }$/;"	f	class:lm::InputBuffer
Reserve	lm/filter/format.hh	/^    void Reserve(size_t size) {$/;"	f	class:lm::BinaryOutputBuffer
Reserve	lm/filter/format.hh	/^    void Reserve(size_t size) {$/;"	f	class:lm::MultipleOutputBuffer
Reserve	lm/filter/thread.hh	/^    void Reserve(size_t size) {$/;"	f	class:lm::ThreadBatch
ReserveForCounts	lm/filter/arpa_io.cc	/^void ARPAOutput::ReserveForCounts(std::streampos reserve) {$/;"	f	class:lm::ARPAOutput
ReserveForCounts	lm/filter/format.hh	/^    void ReserveForCounts(std::streampos reserve) { B::output_.ReserveForCounts(reserve); }$/;"	f	class:lm::DispatchARPAInput
ReserveForCounts	lm/filter/format.hh	/^    void ReserveForCounts(std::streampos reserve) {$/;"	f	class:lm::MultipleARPAOutput
Reset	lm/left.hh	/^    void Reset() {$/;"	f	class:lm::ngram::RuleScore
Reset	lm/left.hh	/^    void Reset(ChartState &replacement) {$/;"	f	class:lm::ngram::RuleScore
Reset	util/double-conversion/utils.h	/^  void Reset() { position_ = 0; }$/;"	f	class:double_conversion::StringBuilder
Reset	util/read_compressed.cc	/^void ReadCompressed::Reset(int fd) {$/;"	f	class:util::ReadCompressed
Reset	util/read_compressed.cc	/^void ReadCompressed::Reset(std::istream &in) {$/;"	f	class:util::ReadCompressed
Reset	util/stream/sort.hh	/^    void Reset() {$/;"	f	class:util::stream::Offsets
Resize	lm/search_trie.cc	/^    void Resize(std::size_t to) {$/;"	f	class:lm::ngram::trie::__anon20::BackoffMessages	file:
ResizeOrThrow	util/file.cc	/^void ResizeOrThrow(int fd, uint64_t to) {$/;"	f	namespace:util
Rest	lm/quantize.hh	/^        float Rest() const { return Prob(); }$/;"	f	class:lm::ngram::DontQuantize::MiddlePointer
Rest	lm/quantize.hh	/^        float Rest() const { return Prob(); }$/;"	f	class:lm::ngram::SeparatelyQuantize::MiddlePointer
Rest	lm/trie.hh	/^    float Rest() const { return Prob(); }$/;"	f	class:lm::ngram::trie::UnigramPointer
Rest	lm/value.hh	/^      float Rest() const { return Prob(); }$/;"	f	class:lm::ngram::BackoffValue::ProbingProxy
Rest	lm/value.hh	/^      float Rest() const { return Prob(); }$/;"	f	class:lm::ngram::BackoffValue::TrieUnigramProxy
Rest	lm/value.hh	/^      float Rest() const { return to_->rest; }$/;"	f	class:lm::ngram::RestValue::ProbingProxy
Rest	lm/value.hh	/^      float Rest() const { return to_->rest; }$/;"	f	class:lm::ngram::RestValue::TrieUnigramProxy
Rest	lm/value.hh	/^    float Rest() const { return Prob(); }$/;"	f	class:lm::ngram::GenericTrieUnigramProxy
RestFunction	lm/config.hh	/^  enum RestFunction {$/;"	g	struct:lm::ngram::Config
RestValue	lm/value.hh	/^struct RestValue {$/;"	s	namespace:lm::ngram
RestWeights	lm/weights.hh	/^struct RestWeights {$/;"	s	namespace:lm
ResumeScore	lm/model.cc	/^template <class Search, class VocabularyT> void GenericModel<Search, VocabularyT>::ResumeScore(const WordIndex *hist_iter, const WordIndex *const context_rend, unsigned char order_minus_2, typename Search::Node &node, float *backoff_out, unsigned char &next_use, FullScoreReturn &ret) const {$/;"	f	class:lm::ngram::detail::GenericModel
RevealAfter	lm/partial.hh	/^template <class Model> float RevealAfter(const Model &model, Left &left, Right &right, const Left &reveal, unsigned char seen) {$/;"	f	namespace:lm::ngram
RevealBefore	lm/partial.hh	/^template <class Model> float RevealBefore(const Model &model, const Right &reveal, const unsigned char seen, bool reveal_full, Left &left, Right &right) {$/;"	f	namespace:lm::ngram
Rewind	lm/trie_sort.cc	/^void RecordReader::Rewind() {$/;"	f	class:lm::ngram::trie::RecordReader
Right	lm/state.hh	/^typedef State Right;$/;"	t	namespace:lm::ngram
Roll	util/mmap.cc	/^void Rolling::Roll(uint64_t index) {$/;"	f	class:util::Rolling
Rolling	util/mmap.cc	/^Rolling::Rolling(const Rolling &copy_from, uint64_t increase) {$/;"	f	class:util::Rolling
Rolling	util/mmap.cc	/^Rolling::Rolling(int fd, bool for_write, std::size_t block, std::size_t read_bound, uint64_t offset, uint64_t amount) {$/;"	f	class:util::Rolling
Rolling	util/mmap.hh	/^    Rolling() {}$/;"	f	class:util::Rolling
Rolling	util/mmap.hh	/^    explicit Rolling(void *data) { Init(data); }$/;"	f	class:util::Rolling
Rolling	util/mmap.hh	/^class Rolling {$/;"	c	namespace:util
RoundUp	util/double-conversion/fixed-dtoa.cc	/^static void RoundUp(Vector<char> buffer, int* length, int* decimal_point) {$/;"	f	namespace:double_conversion
RoundWeed	util/double-conversion/fast-dtoa.cc	/^static bool RoundWeed(Vector<char> buffer,$/;"	f	namespace:double_conversion
RoundWeedCounted	util/double-conversion/fast-dtoa.cc	/^static bool RoundWeedCounted(Vector<char> buffer,$/;"	f	namespace:double_conversion
RuleScore	lm/left.hh	/^    explicit RuleScore(const M &model, ChartState &out) : model_(model), out_(&out), left_done_(false), prob_(0.0) {$/;"	f	class:lm::ngram::RuleScore
RuleScore	lm/left.hh	/^template <class M> class RuleScore {$/;"	c	namespace:lm::ngram
Run	lm/builder/adjust_counts.cc	/^void AdjustCounts::Run(const util::stream::ChainPositions &positions) {$/;"	f	class:lm::builder::AdjustCounts
Run	lm/builder/corpus_count.cc	/^void CorpusCount::Run(const util::stream::ChainPosition &position) {$/;"	f	class:lm::builder::CorpusCount
Run	lm/builder/initial_probabilities.cc	/^    void Run(const util::stream::ChainPosition &output) {$/;"	f	class:lm::builder::__anon7::AddRight
Run	lm/builder/initial_probabilities.cc	/^    void Run(const util::stream::ChainPosition &position) {$/;"	f	class:lm::builder::__anon7::OnlyGamma
Run	lm/builder/initial_probabilities.cc	/^    void Run(const util::stream::ChainPosition &primary) {$/;"	f	class:lm::builder::__anon7::MergeRight
Run	lm/builder/interpolate.cc	/^void Interpolate::Run(const util::stream::ChainPositions &positions) {$/;"	f	class:lm::builder::Interpolate
Run	lm/builder/print.cc	/^void PrintARPA::Run(const util::stream::ChainPositions &positions) {$/;"	f	class:lm::builder::PrintARPA
Run	lm/builder/print.hh	/^    void Run(const util::stream::ChainPosition &position) {$/;"	f	class:lm::builder::Print
Run	lm/builder/print.hh	/^    void Run(const util::stream::ChainPositions &chains) {$/;"	f	class:lm::builder::Print
Run	lm/interpolate/arpa_to_stream.cc	/^void ARPAToStream::Run(const util::stream::ChainPositions &positions) {$/;"	f	class:lm::interpolate::ARPAToStream
Run	util/stream/chain.cc	/^void Recycler::Run(const ChainPosition &position) {$/;"	f	class:util::stream::Recycler
Run	util/stream/io.cc	/^void PRead::Run(const ChainPosition &position) {$/;"	f	class:util::stream::PRead
Run	util/stream/io.cc	/^void PWriteAndRecycle::Run(const ChainPosition &position) {$/;"	f	class:util::stream::PWriteAndRecycle
Run	util/stream/io.cc	/^void Read::Run(const ChainPosition &position) {$/;"	f	class:util::stream::Read
Run	util/stream/io.cc	/^void Write::Run(const ChainPosition &position) {$/;"	f	class:util::stream::Write
Run	util/stream/io.cc	/^void WriteAndRecycle::Run(const ChainPosition &position) {$/;"	f	class:util::stream::WriteAndRecycle
Run	util/stream/line_input.cc	/^void LineInput::Run(const ChainPosition &position) {$/;"	f	class:util::stream::LineInput
Run	util/stream/sort.hh	/^    void Run(const ChainPosition &position) {$/;"	f	class:util::stream::BlockSorter
Run	util/stream/sort.hh	/^    void Run(const ChainPosition &position) {$/;"	f	class:util::stream::MergingReader
Run	util/stream/sort.hh	/^    void Run(const ChainPosition &position) {$/;"	f	class:util::stream::OwningMergingReader
Run	util/stream/sort.hh	/^    void Run(const ChainPosition &position, bool assert_one) {$/;"	f	class:util::stream::MergingReader
RunFilter	lm/filter/format.hh	/^  template <class Filter, class Out> static void RunFilter(util::FilePiece &in, Filter &filter, Out &output) {$/;"	f	struct:lm::ARPAFormat
RunFilter	lm/filter/format.hh	/^  template <class Filter, class Out> static void RunFilter(util::FilePiece &in, Filter &filter, Out &output) {$/;"	f	struct:lm::CountFormat
Running	util/stream/chain.hh	/^    bool Running() const { return !queues_.empty(); }$/;"	f	class:util::stream::Chain
S	lm/builder/sort.hh	/^    typedef util::stream::Sort<Compare> S;$/;"	t	class:lm::builder::Sorts
S	util/proxy_iterator.hh	/^    typedef ProxyIterator<Proxy> S;$/;"	t	class:util::ProxyIterator
SHORTEST	util/double-conversion/double-conversion.h	/^    SHORTEST,$/;"	e	enum:double_conversion::DoubleToStringConverter::DtoaMode
SHORTEST_SINGLE	util/double-conversion/double-conversion.h	/^    SHORTEST_SINGLE,$/;"	e	enum:double_conversion::DoubleToStringConverter::DtoaMode
SILENT	lm/lm_exception.hh	/^typedef enum {THROW_UP, COMPLAIN, SILENT} WarningAction;$/;"	e	enum:lm::__anon13
SRISucks	lm/search_trie.cc	/^    SRISucks() {$/;"	f	class:lm::ngram::trie::__anon20::SRISucks
SRISucks	lm/search_trie.cc	/^class SRISucks {$/;"	c	namespace:lm::ngram::trie::__anon20	file:
STDIN_FILENO	util/unistd.hh	10;"	d
STDOUT_FILENO	util/unistd.hh	11;"	d
Sanity	lm/binary_format.cc	/^struct Sanity {$/;"	s	namespace:lm::ngram::__anon3	file:
SanityCheckCounts	lm/search_trie.cc	/^void SanityCheckCounts(const std::vector<uint64_t> &initial, const std::vector<uint64_t> &fixed) {$/;"	f	namespace:lm::ngram::trie::__anon20
SawUnk	lm/vocab.hh	/^    bool SawUnk() const { return saw_unk_; }$/;"	f	class:lm::ngram::ProbingVocabulary
SawUnk	lm/vocab.hh	/^    bool SawUnk() const { return saw_unk_; }$/;"	f	class:lm::ngram::SortedVocabulary
Score	lm/facade.hh	/^    float Score(const State &in_state, const WordIndex new_word, State &out_state) const {$/;"	f	class:lm::base::ModelFacade
ScoreExceptBackoff	lm/model.cc	/^template <class Search, class VocabularyT> FullScoreReturn GenericModel<Search, VocabularyT>::ScoreExceptBackoff($/;"	f	class:lm::ngram::detail::GenericModel
SeekEnd	util/file.cc	/^void SeekEnd(int fd) {$/;"	f	namespace:util
SeekOrThrow	util/file.cc	/^void SeekOrThrow(int fd, uint64_t off) {$/;"	f	namespace:util
Semaphore	util/pcqueue.hh	/^    explicit Semaphore(int value) : task_(mach_task_self()) {$/;"	f	class:util::Semaphore
Semaphore	util/pcqueue.hh	/^class Semaphore {$/;"	c	namespace:util
Send	lm/filter/count_io.hh	/^    template <class Output> void Send(Output &out) {$/;"	f	class:lm::CountBatch
Send	lm/search_trie.cc	/^    void Send(unsigned char begin, unsigned char order, const WordIndex *to, float prob_basis) {$/;"	f	class:lm::ngram::trie::__anon20::SRISucks
Sentence	lm/filter/phrase.cc	/^typedef unsigned int Sentence;$/;"	t	namespace:lm::phrase::__anon10	file:
SentenceRelation	lm/filter/phrase.hh	/^    struct SentenceRelation {$/;"	s	class:lm::phrase::Substrings
Sentences	lm/filter/phrase.cc	/^typedef std::vector<Sentence> Sentences;$/;"	t	namespace:lm::phrase::__anon10	file:
SeparatelyQuantize	lm/quantize.hh	/^    SeparatelyQuantize() {}$/;"	f	class:lm::ngram::SeparatelyQuantize
SeparatelyQuantize	lm/quantize.hh	/^class SeparatelyQuantize {$/;"	c	namespace:lm::ngram
Sequence	lm/filter/thread.hh	/^    uint64_t Sequence() const { return sequence_; }$/;"	f	class:lm::ThreadBatch
Set	lm/filter/phrase.cc	/^void Arc::Set(Vertex &to, const Sentences &sentences) {$/;"	f	class:lm::phrase::detail::Arc
Set	util/ersatz_progress.hh	/^    void Set(uint64_t to) {$/;"	f	class:util::ErsatzProgress
SetExtension	lm/blank.hh	/^inline void SetExtension(float &backoff) {$/;"	f	namespace:lm::ngram
SetFD	util/fake_ofstream.hh	/^    void SetFD(int to) {$/;"	f	class:util::FakeOFStream
SetHeader	lm/builder/output.hh	/^    void SetHeader(const HeaderInfo &header) { header_ = header; }$/;"	f	class:lm::builder::Output
SetInput	util/read_compressed.cc	/^    void SetInput(const void *base, std::size_t amount) {$/;"	f	class:util::__anon41::BZip
SetInput	util/read_compressed.cc	/^    void SetInput(const void *base, std::size_t amount) {$/;"	f	class:util::__anon41::GZip
SetInput	util/read_compressed.cc	/^    void SetInput(const void *base, std::size_t amount) {$/;"	f	class:util::__anon41::XZip
SetKey	lm/builder/corpus_count.cc	/^  void SetKey(WordIndex *to) { key = to; }$/;"	f	struct:lm::builder::__anon5::DedupeEntry
SetKey	lm/builder/corpus_count.cc	/^  void SetKey(uint64_t to) { key = to; }$/;"	f	struct:lm::builder::__anon5::VocabEntry
SetKey	lm/vocab.hh	/^  void SetKey(uint64_t to) { key = to; }$/;"	f	struct:lm::ngram::ProbingVocabularyEntry
SetLocation	util/exception.cc	/^void Exception::SetLocation(const char *file, unsigned int line, const char *func, const char *child_name, const char *condition) {$/;"	f	class:util::Exception
SetOutput	util/read_compressed.cc	/^    void SetOutput(void *base, std::size_t amount) {$/;"	f	class:util::__anon41::BZip
SetOutput	util/read_compressed.cc	/^    void SetOutput(void *base, std::size_t amount) {$/;"	f	class:util::__anon41::XZip
SetOutput	util/read_compressed.cc	/^    void SetOutput(void *to, std::size_t amount) {$/;"	f	class:util::__anon41::GZip
SetPhrase	lm/filter/phrase.cc	/^    void SetPhrase(detail::Vertex &from, detail::Vertex &to, const Sentences &intersect) {$/;"	f	class:lm::phrase::detail::Arc
SetProgressTarget	util/stream/chain.hh	/^    void SetProgressTarget(uint64_t target) {$/;"	f	class:util::stream::Chain
SetRest	lm/value_build.hh	/^    void SetRest(const WordIndex *, unsigned int, RestWeights &weights) const {$/;"	f	class:lm::ngram::MaxRestBuild
SetRest	lm/value_build.hh	/^    void SetRest(const WordIndex *, unsigned int, const Prob &\/*prob*\/) const {}$/;"	f	class:lm::ngram::LowerRestBuild
SetRest	lm/value_build.hh	/^    void SetRest(const WordIndex *, unsigned int, const Prob &\/*prob*\/) const {}$/;"	f	class:lm::ngram::MaxRestBuild
SetRest	lm/value_build.hh	/^    void SetRest(const WordIndex *, unsigned int, const Prob &\/*prob*\/) const {}$/;"	f	class:lm::ngram::NoRestBuild
SetRest	lm/value_build.hh	/^    void SetRest(const WordIndex *, unsigned int, const ProbBackoff &) const {}$/;"	f	class:lm::ngram::NoRestBuild
SetRest	lm/value_build.hh	/^    void SetRest(const WordIndex *vocab_ids, unsigned int n, RestWeights &weights) const {$/;"	f	class:lm::ngram::LowerRestBuild
SetRight	lm/filter/phrase.cc	/^    void SetRight(detail::Vertex &to, const Sentences &complete) {$/;"	f	class:lm::phrase::detail::Arc
SetSign	util/bit_packing.hh	/^inline void SetSign(float &to) {$/;"	f	namespace:util
SetSpecial	lm/virtual_interface.cc	/^void Vocabulary::SetSpecial(WordIndex begin_sentence, WordIndex end_sentence, WordIndex not_found) {$/;"	f	class:lm::base::Vocabulary
SetTarget	util/stream/multi_progress.cc	/^void MultiProgress::SetTarget(uint64_t complete) {$/;"	f	class:util::stream::MultiProgress
SetToPoison	util/stream/block.hh	/^    void SetToPoison() {$/;"	f	class:util::stream::Block
SetToReference	lm/binary_format.cc	/^  void SetToReference() {$/;"	f	struct:lm::ngram::__anon3::OldSanity
SetToReference	lm/binary_format.cc	/^  void SetToReference() {$/;"	f	struct:lm::ngram::__anon3::Sanity
SetValidSize	util/stream/block.hh	/^    void SetValidSize(std::size_t to) { valid_size_ = to; }$/;"	f	class:util::stream::Block
SetVocabFD	lm/builder/output.hh	/^    void SetVocabFD(int to) { vocab_fd_ = to; }$/;"	f	class:lm::builder::Output
SetupJustVocab	lm/binary_format.cc	/^void *BinaryFormat::SetupJustVocab(std::size_t memory_size, uint8_t order) {$/;"	f	class:lm::ngram::BinaryFormat
SetupMemory	lm/model.cc	/^template <class Search, class VocabularyT> void GenericModel<Search, VocabularyT>::SetupMemory(void *base, const std::vector<uint64_t> &counts, const Config &config) {$/;"	f	class:lm::ngram::detail::GenericModel
SetupMemory	lm/quantize.cc	/^void SeparatelyQuantize::SetupMemory(void *base, unsigned char order, const Config &config) {$/;"	f	class:lm::ngram::SeparatelyQuantize
SetupMemory	lm/quantize.hh	/^    void SetupMemory(void * \/*start*\/, unsigned char \/*order*\/, const Config & \/*config*\/) {}$/;"	f	class:lm::ngram::DontQuantize
SetupMemory	lm/search_hashed.cc	/^template <class Value> uint8_t *HashedSearch<Value>::SetupMemory(uint8_t *start, const std::vector<uint64_t> &counts, const Config &config) {$/;"	f	class:lm::ngram::detail::HashedSearch
SetupMemory	lm/search_trie.cc	/^template <class Quant, class Bhiksha> uint8_t *TrieSearch<Quant, Bhiksha>::SetupMemory(uint8_t *start, const std::vector<uint64_t> &counts, const Config &config) {$/;"	f	class:lm::ngram::trie::TrieSearch
SetupMemory	lm/vocab.cc	/^void ProbingVocabulary::SetupMemory(void *start, std::size_t allocated) {$/;"	f	class:lm::ngram::ProbingVocabulary
SetupMemory	lm/vocab.cc	/^void SortedVocabulary::SetupMemory(void *start, std::size_t allocated, std::size_t entries, const Config &config) {$/;"	f	class:lm::ngram::SortedVocabulary
SetupMemory	lm/vocab.hh	/^    void SetupMemory(void *start, std::size_t allocated, std::size_t \/*entries*\/, const Config &\/*config*\/) {$/;"	f	class:lm::ngram::ProbingVocabulary
SetupSorts	lm/builder/pipeline.cc	/^    template <class Compare> void SetupSorts(Sorts<Compare> &sorts) {$/;"	f	class:lm::builder::__anon9::Master
Shift	util/double-conversion/fixed-dtoa.cc	/^  void Shift(int shift_amount) {$/;"	f	class:double_conversion::UInt128
Shift	util/file_piece.cc	/^void FilePiece::Shift() {$/;"	f	class:util::FilePiece
ShiftLeft	util/double-conversion/bignum.cc	/^void Bignum::ShiftLeft(int shift_amount) {$/;"	f	class:double_conversion::Bignum
ShowSizes	lm/sizes.cc	/^void ShowSizes(const char *file, const lm::ngram::Config &config) {$/;"	f	namespace:lm::ngram
ShowSizes	lm/sizes.cc	/^void ShowSizes(const std::vector<uint64_t> &counts) {$/;"	f	namespace:lm::ngram
ShowSizes	lm/sizes.cc	/^void ShowSizes(const std::vector<uint64_t> &counts, const lm::ngram::Config &config) {$/;"	f	namespace:lm::ngram
Sign	util/double-conversion/ieee.h	/^  int Sign() const {$/;"	f	class:double_conversion::Double
Sign	util/double-conversion/ieee.h	/^  int Sign() const {$/;"	f	class:double_conversion::Single
SignedZero	util/double-conversion/double-conversion.cc	/^static double SignedZero(bool sign) {$/;"	f	namespace:double_conversion
Significand	util/double-conversion/ieee.h	/^  uint32_t Significand() const {$/;"	f	class:double_conversion::Single
Significand	util/double-conversion/ieee.h	/^  uint64_t Significand() const {$/;"	f	class:double_conversion::Double
SignificandSizeForOrderOfMagnitude	util/double-conversion/ieee.h	/^  static int SignificandSizeForOrderOfMagnitude(int order) {$/;"	f	class:double_conversion::Double
Single	lm/filter/vocab.hh	/^    explicit Single(const Words &vocab) : vocab_(vocab) {}$/;"	f	class:lm::vocab::Single
Single	lm/filter/vocab.hh	/^class Single {$/;"	c	namespace:lm::vocab
Single	util/double-conversion/ieee.h	/^  Single() : d32_(0) {}$/;"	f	class:double_conversion::Single
Single	util/double-conversion/ieee.h	/^  explicit Single(float f) : d32_(float_to_uint32(f)) {}$/;"	f	class:double_conversion::Single
Single	util/double-conversion/ieee.h	/^  explicit Single(uint32_t d32) : d32_(d32) {}$/;"	f	class:double_conversion::Single
Single	util/double-conversion/ieee.h	/^class Single {$/;"	c	namespace:double_conversion
SingleAddNGram	lm/filter/format.hh	/^    template <class Iterator> void SingleAddNGram(size_t offset, const Iterator &begin, const Iterator &end, const StringPiece &line) {$/;"	f	class:lm::MultipleOutput
SingleAddNGram	lm/filter/format.hh	/^    void SingleAddNGram(size_t offset, const StringPiece &line) {$/;"	f	class:lm::MultipleOutput
SingleAddNGram	lm/filter/format.hh	/^    void SingleAddNGram(size_t offset, const StringPiece &line) {$/;"	f	class:lm::MultipleOutputBuffer
SingleCharacter	util/tokenize_piece.hh	/^    SingleCharacter() {}$/;"	f	class:util::SingleCharacter
SingleCharacter	util/tokenize_piece.hh	/^    explicit SingleCharacter(char delim) : delim_(delim) {}$/;"	f	class:util::SingleCharacter
SingleCharacter	util/tokenize_piece.hh	/^class SingleCharacter {$/;"	c	namespace:util
Singles	lm/filter/format.hh	/^    typedef boost::ptr_vector<Single> Singles;$/;"	t	class:lm::MultipleOutput
SinglesIterator	lm/filter/format.hh	/^    typedef typename Singles::iterator SinglesIterator;$/;"	t	class:lm::MultipleOutput
Sink	util/stream/io.hh	/^    PWriteAndRecycle Sink() const {$/;"	f	class:util::stream::FileBuffer
Size	lm/bhiksha.cc	/^uint64_t ArrayBhiksha::Size(uint64_t max_offset, uint64_t max_next, const Config &config) {$/;"	f	class:lm::ngram::trie::ArrayBhiksha
Size	lm/bhiksha.hh	/^    static uint64_t Size(uint64_t \/*max_offset*\/, uint64_t \/*max_next*\/, const Config &\/*config*\/) { return 0; }$/;"	f	class:lm::ngram::trie::DontBhiksha
Size	lm/builder/print.hh	/^    std::size_t Size() const {$/;"	f	class:lm::builder::VocabReconstitute
Size	lm/filter/format.hh	/^    size_t Size() { return actual_; }$/;"	f	class:lm::InputBuffer
Size	lm/model.cc	/^template <class Search, class VocabularyT> uint64_t GenericModel<Search, VocabularyT>::Size(const std::vector<uint64_t> &counts, const Config &config) {$/;"	f	class:lm::ngram::detail::GenericModel
Size	lm/quantize.hh	/^    static uint64_t Size(uint8_t \/*order*\/, const Config &\/*config*\/) { return 0; }$/;"	f	class:lm::ngram::DontQuantize
Size	lm/quantize.hh	/^    static uint64_t Size(uint8_t order, const Config &config) {$/;"	f	class:lm::ngram::SeparatelyQuantize
Size	lm/search_hashed.hh	/^        static uint64_t Size(uint64_t count) {$/;"	f	class:lm::ngram::detail::HashedSearch::Unigram
Size	lm/search_hashed.hh	/^    static uint64_t Size(const std::vector<uint64_t> &counts, const Config &config) {$/;"	f	class:lm::ngram::detail::HashedSearch
Size	lm/search_trie.hh	/^    static uint64_t Size(const std::vector<uint64_t> &counts, const Config &config) {$/;"	f	class:lm::ngram::trie::TrieSearch
Size	lm/trie.cc	/^template <class Bhiksha> uint64_t BitPackedMiddle<Bhiksha>::Size(uint8_t quant_bits, uint64_t entries, uint64_t max_vocab, uint64_t max_ptr, const Config &config) {$/;"	f	class:lm::ngram::trie::BitPackedMiddle
Size	lm/trie.hh	/^    static uint64_t Size(uint64_t count) {$/;"	f	class:lm::ngram::trie::Unigram
Size	lm/trie.hh	/^    static uint64_t Size(uint8_t quant_bits, uint64_t entries, uint64_t max_vocab) {$/;"	f	class:lm::ngram::trie::BitPackedLongest
Size	lm/vocab.cc	/^uint64_t ProbingVocabulary::Size(uint64_t entries, const Config &config) {$/;"	f	class:lm::ngram::ProbingVocabulary
Size	lm/vocab.cc	/^uint64_t ProbingVocabulary::Size(uint64_t entries, float probing_multiplier) {$/;"	f	class:lm::ngram::ProbingVocabulary
Size	lm/vocab.cc	/^uint64_t SortedVocabulary::Size(uint64_t entries, const Config &\/*config*\/) {$/;"	f	class:lm::ngram::SortedVocabulary
Size	lm/vocab.hh	/^    WordIndex Size() const { return lookup_.Size(); }$/;"	f	class:lm::ngram::GrowableVocab
Size	util/probing_hash_table.hh	/^    static uint64_t Size(uint64_t entries, float multiplier) {$/;"	f	class:util::ProbingHashTable
Size	util/probing_hash_table.hh	/^    std::size_t Size() const {$/;"	f	class:util::AutoProbing
Size	util/stream/io.hh	/^    uint64_t Size() const {$/;"	f	class:util::stream::FileBuffer
Size	util/stream/sort.hh	/^    std::size_t Size() const {$/;"	f	class:util::stream::MergeQueue
Size	util/stream/sort.hh	/^    uint64_t Size() const {$/;"	f	class:util::stream::Sort
SizeFile	util/file.cc	/^uint64_t SizeFile(int fd) {$/;"	f	namespace:util
SizeInHexChars	util/double-conversion/bignum.cc	/^static int SizeInHexChars(S number) {$/;"	f	namespace:double_conversion
SizeNeededForCounts	lm/filter/arpa_io.cc	/^size_t SizeNeededForCounts(const std::vector<uint64_t> &number) {$/;"	f	namespace:lm
SizeNoSerialization	util/probing_hash_table.hh	/^    std::size_t SizeNoSerialization() const {$/;"	f	class:util::ProbingHashTable
SizeOrThrow	util/file.cc	/^uint64_t SizeOrThrow(int fd) {$/;"	f	namespace:util
SizePage	util/mmap.cc	/^long SizePage() {$/;"	f	namespace:util
SizeParseError	util/usage.cc	/^    explicit SizeParseError(const std::string &str) throw() {$/;"	f	class:util::__anon46::SizeParseError
SizeParseError	util/usage.cc	/^class SizeParseError : public Exception {$/;"	c	namespace:util::__anon46	file:
SizedCompare	util/sized_iterator.hh	/^    explicit SizedCompare(const Delegate &delegate = Delegate()) : delegate_(delegate) {}$/;"	f	class:util::SizedCompare
SizedCompare	util/sized_iterator.hh	/^template <class Delegate, class Proxy = SizedProxy> class SizedCompare : public std::binary_function<const Proxy &, const Proxy &, bool> {$/;"	c	namespace:util
SizedInnerIterator	util/sized_iterator.hh	/^    SizedInnerIterator() {}$/;"	f	class:util::SizedInnerIterator
SizedInnerIterator	util/sized_iterator.hh	/^    SizedInnerIterator(void *ptr, std::size_t size) : ptr_(static_cast<uint8_t*>(ptr)), size_(size) {}$/;"	f	class:util::SizedInnerIterator
SizedInnerIterator	util/sized_iterator.hh	/^class SizedInnerIterator {$/;"	c	namespace:util
SizedIt	util/sized_iterator.hh	/^inline SizedIterator SizedIt(void *ptr, std::size_t size) { return SizedIterator(SizedProxy(ptr, size)); }$/;"	f	namespace:util
SizedIterator	util/sized_iterator.hh	/^typedef ProxyIterator<SizedProxy> SizedIterator;$/;"	t	namespace:util
SizedProxy	util/sized_iterator.hh	/^    SizedProxy() {}$/;"	f	class:util::SizedProxy
SizedProxy	util/sized_iterator.hh	/^    SizedProxy(void *ptr, std::size_t size) : inner_(ptr, size) {}$/;"	f	class:util::SizedProxy
SizedProxy	util/sized_iterator.hh	/^class SizedProxy {$/;"	c	namespace:util
SkipSpaces	util/file_piece.hh	/^    void SkipSpaces(const bool *delim = kSpaces) {$/;"	f	class:util::FilePiece
SkipSpaces	util/usage.cc	/^const char *SkipSpaces(const char *at) {$/;"	f	namespace:util::__anon45
Sort	util/stream/sort.hh	/^    Sort(Chain &in, const SortConfig &config, const Compare &compare = Compare(), const Combine &combine = Combine())$/;"	f	class:util::stream::Sort
Sort	util/stream/sort.hh	/^template <class Compare, class Combine = NeverCombine> class Sort {$/;"	c	namespace:util::stream
SortAndReadTwice	lm/builder/pipeline.cc	/^    void SortAndReadTwice(const std::vector<uint64_t> &counts, Sorts<ContextOrder> &sorts, util::stream::Chains &second, util::stream::ChainConfig second_config) {$/;"	f	class:lm::builder::__anon9::Master
SortConfig	util/stream/config.hh	/^struct SortConfig {$/;"	s	namespace:util::stream
SortedFiles	lm/trie_sort.cc	/^SortedFiles::SortedFiles(const Config &config, util::FilePiece &f, std::vector<uint64_t> &counts, size_t buffer, const std::string &file_prefix, SortedVocabulary &vocab) {$/;"	f	class:lm::ngram::trie::SortedFiles
SortedFiles	lm/trie_sort.hh	/^class SortedFiles {$/;"	c	namespace:lm::ngram::trie
SortedUniformFind	util/sorted_uniform.hh	/^template <class Iterator, class Accessor, class Pivot> bool SortedUniformFind(const Accessor &accessor, Iterator begin, Iterator end, const typename Accessor::Key key, Iterator &out) {$/;"	f	namespace:util
SortedVocabulary	lm/vocab.cc	/^SortedVocabulary::SortedVocabulary() : begin_(NULL), end_(NULL), enumerate_(NULL) {}$/;"	f	class:lm::ngram::SortedVocabulary
SortedVocabulary	lm/vocab.hh	/^class SortedVocabulary : public base::Vocabulary {$/;"	c	namespace:lm::ngram
Sorts	lm/builder/sort.hh	/^    Sorts() {}$/;"	f	class:lm::builder::Sorts
Sorts	lm/builder/sort.hh	/^    explicit Sorts(std::size_t number) : util::FixedArray<util::stream::Sort<Compare> >(number) {}$/;"	f	class:lm::builder::Sorts
Sorts	lm/builder/sort.hh	/^template <class Compare> class Sorts : public util::FixedArray<util::stream::Sort<Compare> > {$/;"	c	namespace:lm::builder
Source	util/stream/io.hh	/^    PRead Source() const {$/;"	f	class:util::stream::FileBuffer
SpecialWordMissingException	lm/lm_exception.cc	/^SpecialWordMissingException::SpecialWordMissingException() throw() {}$/;"	f	class:lm::SpecialWordMissingException
SpecialWordMissingException	lm/lm_exception.hh	/^class SpecialWordMissingException : public VocabLoadException {$/;"	c	namespace:lm
Square	util/double-conversion/bignum.cc	/^void Bignum::Square() {$/;"	f	class:double_conversion::Bignum
Start	util/stream/chain.cc	/^void Chain::Start() {$/;"	f	class:util::stream::Chain
StartBlock	lm/builder/adjust_counts.cc	/^    void StartBlock() {$/;"	f	class:lm::builder::__anon4::CollapseStream	file:
StartBlock	lm/builder/initial_probabilities.cc	/^    void StartBlock() {$/;"	f	class:lm::builder::__anon7::PruneNGramStream	file:
StartBlock	util/stream/stream.hh	/^    void StartBlock() {$/;"	f	class:util::stream::Stream
StartSentence	lm/builder/corpus_count.cc	/^    void StartSentence() {$/;"	f	class:lm::builder::__anon5::Writer
Started	util/usage.cc	/^    const Wall &Started() const {$/;"	f	class:util::__anon45::RecordStart
StatCollector	lm/builder/adjust_counts.cc	/^    StatCollector(std::size_t order, std::vector<uint64_t> &counts, std::vector<uint64_t> &counts_pruned, std::vector<Discount> &discounts)$/;"	f	class:lm::builder::__anon4::StatCollector
StatCollector	lm/builder/adjust_counts.cc	/^class StatCollector {$/;"	c	namespace:lm::builder::__anon4	file:
State	lm/facade.hh	/^    typedef StateT State;$/;"	t	class:lm::base::ModelFacade
State	lm/state.hh	/^class State {$/;"	c	namespace:lm::ngram
State	lm/wrappers/nplm.hh	/^struct State {$/;"	s	namespace:lm::np
StateSize	lm/virtual_interface.hh	/^    size_t StateSize() const { return state_size_; }$/;"	f	class:lm::base::Model
StaticAssertionPassed	util/bit_packing.cc	/^template <> struct StaticCheck<true> { typedef bool StaticAssertionPassed; };$/;"	t	struct:util::__anon26::StaticCheck	file:
StaticCheck	util/bit_packing.cc	/^template <> struct StaticCheck<true> { typedef bool StaticAssertionPassed; };$/;"	s	namespace:util::__anon26	file:
StaticCheck	util/bit_packing.cc	/^template <bool> struct StaticCheck {};$/;"	s	namespace:util::__anon26	file:
StealCompleted	util/stream/sort.hh	/^    int StealCompleted() {$/;"	f	class:util::stream::Sort
StealUnigram	lm/trie_sort.hh	/^    int StealUnigram() {$/;"	f	class:lm::ngram::trie::SortedFiles
Storage	lm/neural/wordvecs.hh	/^    typedef Eigen::Matrix<float, Eigen::Dynamic, Eigen::Dynamic, Eigen::ColMajor> Storage;$/;"	t	class:lm::neural::WordVecs
StrLength	util/double-conversion/utils.h	/^inline int StrLength(const char* string) {$/;"	f	namespace:double_conversion
Stream	util/read_compressed.cc	/^    const bz_stream &Stream() const { return stream_; }$/;"	f	class:util::__anon41::BZip
Stream	util/read_compressed.cc	/^    const lzma_stream &Stream() const { return stream_; }$/;"	f	class:util::__anon41::XZip
Stream	util/read_compressed.cc	/^    const z_stream &Stream() const { return stream_; }$/;"	f	class:util::__anon41::GZip
Stream	util/stream/stream.hh	/^    Stream() : current_(NULL), end_(NULL) {}$/;"	f	class:util::stream::Stream
Stream	util/stream/stream.hh	/^    explicit Stream(const ChainPosition &position) {$/;"	f	class:util::stream::Stream
Stream	util/stream/stream.hh	/^class Stream : boost::noncopyable {$/;"	c	namespace:util::stream
StreamCompressed	util/read_compressed.cc	/^    StreamCompressed(int fd, const void *already_data, std::size_t already_size)$/;"	f	class:util::__anon41::StreamCompressed
StreamCompressed	util/read_compressed.cc	/^template <class Compression> class StreamCompressed : public ReadBase {$/;"	c	namespace:util::__anon41	file:
Streams	util/stream/multi_stream.hh	/^typedef GenericStreams<Stream> Streams;$/;"	t	namespace:util::stream
StringBuilder	util/double-conversion/utils.h	/^  StringBuilder(char* buffer, int size)$/;"	f	class:double_conversion::StringBuilder
StringBuilder	util/double-conversion/utils.h	/^class StringBuilder {$/;"	c	namespace:double_conversion
StringPiece	util/string_piece.hh	/^  StringPiece() : ptr_(NULL), length_(0) { }$/;"	f	class:StringPiece
StringPiece	util/string_piece.hh	/^  StringPiece(const char* offset, size_type len)$/;"	f	class:StringPiece
StringPiece	util/string_piece.hh	/^  StringPiece(const char* str)$/;"	f	class:StringPiece
StringPiece	util/string_piece.hh	/^  StringPiece(const std::string& str)$/;"	f	class:StringPiece
StringPiece	util/string_piece.hh	/^class StringPiece {$/;"	c
StringPieceCompatibleEquals	util/string_piece_hash.hh	/^struct StringPieceCompatibleEquals : public std::binary_function<const StringPiece &, const std::string &, bool> {$/;"	s
StringPieceCompatibleHash	util/string_piece_hash.hh	/^struct StringPieceCompatibleHash : public std::unary_function<const StringPiece &, size_t> {$/;"	s
StringToDouble	util/double-conversion/double-conversion.h	/^  double StringToDouble(const char* buffer,$/;"	f	class:double_conversion::StringToDoubleConverter
StringToDoubleConverter	util/double-conversion/double-conversion.h	/^  StringToDoubleConverter(int flags,$/;"	f	class:double_conversion::StringToDoubleConverter
StringToDoubleConverter	util/double-conversion/double-conversion.h	/^class StringToDoubleConverter {$/;"	c	namespace:double_conversion
StringToFloat	util/double-conversion/double-conversion.h	/^  float StringToFloat(const char* buffer,$/;"	f	class:double_conversion::StringToDoubleConverter
StringToIeee	util/double-conversion/double-conversion.cc	/^double StringToDoubleConverter::StringToIeee($/;"	f	class:double_conversion::StringToDoubleConverter
Strtod	util/double-conversion/strtod.cc	/^double Strtod(Vector<const char> buffer, int exponent) {$/;"	f	namespace:double_conversion
Strtof	util/double-conversion/strtod.cc	/^float Strtof(Vector<const char> buffer, int exponent) {$/;"	f	namespace:double_conversion
SubVector	util/double-conversion/utils.h	/^  Vector<T> SubVector(int from, int to) {$/;"	f	class:double_conversion::Vector
Substrings	lm/filter/phrase.hh	/^    Substrings() {}$/;"	f	class:lm::phrase::Substrings
Substrings	lm/filter/phrase.hh	/^class Substrings {$/;"	c	namespace:lm::phrase
Subsume	lm/partial.hh	/^template <class Model> float Subsume(const Model &model, Left &first_left, const Right &first_right, const Left &second_left, Right &second_right, const unsigned int between_length) {$/;"	f	namespace:lm::ngram
Subtract	util/double-conversion/diy-fp.h	/^  void Subtract(const DiyFp& other) {$/;"	f	class:double_conversion::DiyFp
Subtract	util/usage.cc	/^double Subtract(const struct timespec &first, const struct timespec &second) {$/;"	f	namespace:util::__anon45
Subtract	util/usage.cc	/^double Subtract(const struct timeval &first, const struct timeval &second) {$/;"	f	namespace:util::__anon45
Subtract	util/usage.cc	/^double Subtract(time_t first, time_t second) {$/;"	f	namespace:util::__anon45
SubtractBignum	util/double-conversion/bignum.cc	/^void Bignum::SubtractBignum(const Bignum& other) {$/;"	f	class:double_conversion::Bignum
SubtractTimes	util/double-conversion/bignum.cc	/^void Bignum::SubtractTimes(const Bignum& other, int factor) {$/;"	f	class:double_conversion::Bignum
SuffixOrder	lm/builder/sort.hh	/^    explicit SuffixOrder(std::size_t order) : Comparator<SuffixOrder>(order) {}$/;"	f	class:lm::builder::SuffixOrder
SuffixOrder	lm/builder/sort.hh	/^class SuffixOrder : public Comparator<SuffixOrder> {$/;"	c	namespace:lm::builder
Summary	lm/ngram_query.hh	/^  void Summary(double ppl_including_oov, double ppl_excluding_oov, uint64_t corpus_oov, uint64_t corpus_tokens) {$/;"	f	struct:lm::ngram::FullPrint
Summary	lm/ngram_query.hh	/^  void Summary(double, double, uint64_t, uint64_t) {}$/;"	f	struct:lm::ngram::BasicPrint
SyncOrThrow	util/mmap.cc	/^void SyncOrThrow(void *start, size_t length) {$/;"	f	namespace:util
T	util/sorted_uniform.hh	/^template <> struct PivotSelect<2> { typedef Pivot32 T; };$/;"	t	struct:util::PivotSelect
T	util/sorted_uniform.hh	/^template <> struct PivotSelect<4> { typedef Pivot32 T; };$/;"	t	struct:util::PivotSelect
T	util/sorted_uniform.hh	/^template <> struct PivotSelect<8> { typedef Pivot64 T; };$/;"	t	struct:util::PivotSelect
THROW_UP	lm/lm_exception.hh	/^typedef enum {THROW_UP, COMPLAIN, SILENT} WarningAction;$/;"	e	enum:lm::__anon13
TRIE	lm/model_type.hh	/^typedef enum {PROBING=0, REST_PROBING=1, TRIE=2, QUANT_TRIE=3, ARRAY_TRIE=4, QUANT_ARRAY_TRIE=5} ModelType;$/;"	e	enum:lm::ngram::__anon16
TRIE_SORTED	lm/model_type.hh	/^const ModelType TRIE_SORTED = TRIE;$/;"	m	namespace:lm::ngram
Table	lm/filter/phrase.hh	/^    typedef boost::unordered_map<Hash, SentenceRelation> Table;$/;"	t	class:lm::phrase::Substrings
TempPrefix	lm/builder/pipeline.hh	/^  const std::string &TempPrefix() const { return sort.temp_prefix; }$/;"	f	struct:lm::builder::PipelineConfig
Terminal	lm/left.hh	/^    void Terminal(WordIndex word) {$/;"	f	class:lm::ngram::RuleScore
Thread	util/stream/chain.hh	/^    template <class Position, class Worker> Thread(const Position &position, const Worker &worker)$/;"	f	class:util::stream::Thread
Thread	util/stream/chain.hh	/^class Thread {$/;"	c	namespace:util::stream
ThreadBatch	lm/filter/thread.hh	/^    ThreadBatch() {}$/;"	f	class:lm::ThreadBatch
ThreadBatch	lm/filter/thread.hh	/^template <class OutputBuffer> class ThreadBatch {$/;"	c	namespace:lm
ThreadPool	util/thread_pool.hh	/^    template <class Construct> ThreadPool(size_t queue_length, size_t workers, Construct handler_construct, Request poison) : in_(queue_length), poison_(poison) {$/;"	f	class:util::ThreadPool
ThreadPool	util/thread_pool.hh	/^template <class HandlerT> class ThreadPool : boost::noncopyable {$/;"	c	namespace:util
ThrowCombine	lm/trie_sort.cc	/^struct ThrowCombine {$/;"	s	namespace:lm::ngram::trie::__anon22	file:
Times	util/double-conversion/diy-fp.h	/^  static DiyFp Times(const DiyFp& a, const DiyFp& b) {$/;"	f	class:double_conversion::DiyFp
Times10	util/double-conversion/bignum.h	/^  void Times10() { return MultiplyByUInt32(10); }$/;"	f	class:double_conversion::Bignum
ToExponential	util/double-conversion/double-conversion.cc	/^bool DoubleToStringConverter::ToExponential($/;"	f	class:double_conversion::DoubleToStringConverter
ToFixed	util/double-conversion/double-conversion.cc	/^bool DoubleToStringConverter::ToFixed(double value,$/;"	f	class:double_conversion::DoubleToStringConverter
ToHexString	util/double-conversion/bignum.cc	/^bool Bignum::ToHexString(char* buffer, int buffer_size) const {$/;"	f	class:double_conversion::Bignum
ToPrecision	util/double-conversion/double-conversion.cc	/^bool DoubleToStringConverter::ToPrecision(double value,$/;"	f	class:double_conversion::DoubleToStringConverter
ToShortest	util/double-conversion/double-conversion.h	/^  bool ToShortest(double value, StringBuilder* result_builder) const {$/;"	f	class:double_conversion::DoubleToStringConverter
ToShortestIeeeNumber	util/double-conversion/double-conversion.cc	/^bool DoubleToStringConverter::ToShortestIeeeNumber($/;"	f	class:double_conversion::DoubleToStringConverter
ToShortestSingle	util/double-conversion/double-conversion.h	/^  bool ToShortestSingle(float value, StringBuilder* result_builder) const {$/;"	f	class:double_conversion::DoubleToStringConverter
TokenIter	util/tokenize_piece.hh	/^    TokenIter() {}$/;"	f	class:util::TokenIter
TokenIter	util/tokenize_piece.hh	/^    template <class Construct> TokenIter(const StringPiece &str, const Construct &construct) : after_(str), finder_(construct) {$/;"	f	class:util::TokenIter
TokenIter	util/tokenize_piece.hh	/^template <class Find, bool SkipEmpty = false> class TokenIter : public boost::iterator_facade<TokenIter<Find, SkipEmpty>, const StringPiece, boost::forward_traversal_tag> {$/;"	c	namespace:util
Top	util/stream/sort.hh	/^    const void *Top() const {$/;"	f	class:util::stream::MergeQueue
TotalHeaderSize	lm/binary_format.cc	/^std::size_t TotalHeaderSize(unsigned char order) {$/;"	f	namespace:lm::ngram::__anon3
TotalMemory	lm/builder/pipeline.hh	/^  std::size_t TotalMemory() const { return sort.total_memory; }$/;"	f	struct:lm::builder::PipelineConfig
TotalOffset	util/stream/sort.hh	/^    uint64_t TotalOffset() const { return output_sum_; }$/;"	f	class:util::stream::Offsets
TotalSize	lm/builder/ngram.hh	/^    static std::size_t TotalSize(std::size_t order) {$/;"	f	class:lm::builder::NGram
TotalSize	lm/builder/ngram.hh	/^    std::size_t TotalSize() const {$/;"	f	class:lm::builder::NGram
Train	lm/quantize.cc	/^void SeparatelyQuantize::Train(uint8_t order, std::vector<float> &prob, std::vector<float> &backoff) {$/;"	f	class:lm::ngram::SeparatelyQuantize
Train	lm/quantize.hh	/^    void Train(uint8_t \/*order*\/, std::vector<float> &\/*prob*\/, std::vector<float> &\/*backoff*\/) {}$/;"	f	class:lm::ngram::DontQuantize
TrainProb	lm/quantize.cc	/^void SeparatelyQuantize::TrainProb(uint8_t order, std::vector<float> &prob) {$/;"	f	class:lm::ngram::SeparatelyQuantize
TrainProb	lm/quantize.hh	/^    void TrainProb(uint8_t, std::vector<float> &\/*prob*\/) {}$/;"	f	class:lm::ngram::DontQuantize
TrainProbQuantizer	lm/search_trie.cc	/^template <class Quant> void TrainProbQuantizer(uint8_t order, uint64_t count, RecordReader &reader, util::ErsatzProgress &progress, Quant &quant) {$/;"	f	namespace:lm::ngram::trie::__anon20
TrainQuantizer	lm/search_trie.cc	/^template <class Quant> void TrainQuantizer(uint8_t order, uint64_t count, const std::vector<float> &additional, RecordReader &reader, util::ErsatzProgress &progress, Quant &quant) {$/;"	f	namespace:lm::ngram::trie::__anon20
TransitionToRead	util/file_piece.cc	/^void FilePiece::TransitionToRead() {$/;"	f	class:util::FilePiece
TrieSearch	lm/search_trie.hh	/^    TrieSearch() : middle_begin_(NULL), middle_end_(NULL) {}$/;"	f	class:lm::ngram::trie::TrieSearch
TrieSearch	lm/search_trie.hh	/^template <class Quant, class Bhiksha> class TrieSearch {$/;"	c	namespace:lm::ngram::trie
TrieUnigramProxy	lm/value.hh	/^      TrieUnigramProxy() {}$/;"	f	class:lm::ngram::BackoffValue::TrieUnigramProxy
TrieUnigramProxy	lm/value.hh	/^      TrieUnigramProxy() {}$/;"	f	class:lm::ngram::RestValue::TrieUnigramProxy
TrieUnigramProxy	lm/value.hh	/^      explicit TrieUnigramProxy(const Weights &to) : GenericTrieUnigramProxy<Weights>(to) {}$/;"	f	class:lm::ngram::BackoffValue::TrieUnigramProxy
TrieUnigramProxy	lm/value.hh	/^      explicit TrieUnigramProxy(const Weights &to) : GenericTrieUnigramProxy<Weights>(to) {}$/;"	f	class:lm::ngram::RestValue::TrieUnigramProxy
TrieUnigramProxy	lm/value.hh	/^  class TrieUnigramProxy : public GenericTrieUnigramProxy<Weights> {$/;"	c	struct:lm::ngram::BackoffValue
TrieUnigramProxy	lm/value.hh	/^  class TrieUnigramProxy : public GenericTrieUnigramProxy<Weights> {$/;"	c	struct:lm::ngram::RestValue
TrieUnigramValue	lm/value.hh	/^  struct TrieUnigramValue {$/;"	s	struct:lm::ngram::BackoffValue
TrieUnigramValue	lm/value.hh	/^  struct TrieUnigramValue {$/;"	s	struct:lm::ngram::RestValue
TrimAndCut	util/double-conversion/strtod.cc	/^static void TrimAndCut(Vector<const char> buffer, int exponent,$/;"	f	namespace:double_conversion
TrimLeadingZeros	util/double-conversion/strtod.cc	/^static Vector<const char> TrimLeadingZeros(Vector<const char> buffer) {$/;"	f	namespace:double_conversion
TrimTrailingZeros	util/double-conversion/strtod.cc	/^static Vector<const char> TrimTrailingZeros(Vector<const char> buffer) {$/;"	f	namespace:double_conversion
TrimZeros	util/double-conversion/fixed-dtoa.cc	/^static void TrimZeros(Vector<char> buffer, int* length, int* decimal_point) {$/;"	f	namespace:double_conversion
True	util/file.cc	/^  struct True {};$/;"	s	struct:util::__anon32::CheckOffT	file:
TryName	util/file.cc	/^bool TryName(int fd, std::string &out) {$/;"	f	namespace:util::__anon33
UINT64_2PART_C	util/double-conversion/utils.h	96;"	d
UInt128	util/double-conversion/fixed-dtoa.cc	/^  UInt128() : high_bits_(0), low_bits_(0) { }$/;"	f	class:double_conversion::UInt128
UInt128	util/double-conversion/fixed-dtoa.cc	/^  UInt128(uint64_t high, uint64_t low) : high_bits_(high), low_bits_(low) { }$/;"	f	class:double_conversion::UInt128
UInt128	util/double-conversion/fixed-dtoa.cc	/^class UInt128 {$/;"	c	namespace:double_conversion	file:
UNIMPLEMENTED	util/double-conversion/utils.h	39;"	d
UNIQUE_ZERO	util/double-conversion/double-conversion.h	/^    UNIQUE_ZERO = 8$/;"	e	enum:double_conversion::DoubleToStringConverter::Flags
UNREACHABLE	util/double-conversion/utils.h	42;"	d
UTIL_BIT_PACKING_H	util/bit_packing.hh	2;"	d
UTIL_BZIP	util/read_compressed.cc	/^  UTIL_UNKNOWN, UTIL_GZIP, UTIL_BZIP, UTIL_XZIP$/;"	e	enum:util::__anon41::MagicResult	file:
UTIL_ERSATZ_PROGRESS_H	util/ersatz_progress.hh	2;"	d
UTIL_EXCEPTION_H	util/exception.hh	2;"	d
UTIL_FAKE_OFSTREAM_H	util/fake_ofstream.hh	6;"	d
UTIL_FILE_H	util/file.hh	2;"	d
UTIL_FILE_PIECE_H	util/file_piece.hh	2;"	d
UTIL_FIXED_ARRAY_H	util/fixed_array.hh	2;"	d
UTIL_FUNC_NAME	util/exception.hh	56;"	d
UTIL_FUNC_NAME	util/exception.hh	59;"	d
UTIL_FUNC_NAME	util/exception.hh	61;"	d
UTIL_GETOPT_H	util/getopt.hh	15;"	d
UTIL_GZIP	util/read_compressed.cc	/^  UTIL_UNKNOWN, UTIL_GZIP, UTIL_BZIP, UTIL_XZIP$/;"	e	enum:util::__anon41::MagicResult	file:
UTIL_HAVE_H	util/have.hh	3;"	d
UTIL_JOINT_SORT_H	util/joint_sort.hh	2;"	d
UTIL_MMAP_H	util/mmap.hh	2;"	d
UTIL_MULTI_INTERSECTION_H	util/multi_intersection.hh	2;"	d
UTIL_MURMUR_HASH_H	util/murmur_hash.hh	2;"	d
UTIL_PARALLEL_READ__	util/parallel_read.hh	2;"	d
UTIL_PCQUEUE_H	util/pcqueue.hh	2;"	d
UTIL_POOL_H	util/pool.hh	5;"	d
UTIL_PROBING_HASH_TABLE_H	util/probing_hash_table.hh	2;"	d
UTIL_PROXY_ITERATOR_H	util/proxy_iterator.hh	2;"	d
UTIL_READ_COMPRESSED_H	util/read_compressed.hh	2;"	d
UTIL_SCOPED_H	util/scoped.hh	2;"	d
UTIL_SIZED_ITERATOR_H	util/sized_iterator.hh	2;"	d
UTIL_SORTED_UNIFORM_H	util/sorted_uniform.hh	2;"	d
UTIL_STREAM_BLOCK_H	util/stream/block.hh	2;"	d
UTIL_STREAM_CHAIN_H	util/stream/chain.hh	2;"	d
UTIL_STREAM_CONFIG_H	util/stream/config.hh	2;"	d
UTIL_STREAM_IO_H	util/stream/io.hh	2;"	d
UTIL_STREAM_LINE_INPUT_H	util/stream/line_input.hh	2;"	d
UTIL_STREAM_MULTI_PROGRESS_H	util/stream/multi_progress.hh	3;"	d
UTIL_STREAM_MULTI_STREAM_H	util/stream/multi_stream.hh	2;"	d
UTIL_STREAM_SORT_H	util/stream/sort.hh	19;"	d
UTIL_STREAM_STREAM_H	util/stream/stream.hh	2;"	d
UTIL_STREAM_TIMER_H	util/stream/timer.hh	2;"	d
UTIL_STRING_PIECE_H	util/string_piece.hh	49;"	d
UTIL_STRING_PIECE_HASH_H	util/string_piece_hash.hh	2;"	d
UTIL_THREAD_POOL_H	util/thread_pool.hh	2;"	d
UTIL_THROW	util/exception.hh	83;"	d
UTIL_THROW2	util/exception.hh	86;"	d
UTIL_THROW_ARG	util/exception.hh	80;"	d
UTIL_THROW_BACKEND	util/exception.hh	73;"	d
UTIL_THROW_IF	util/exception.hh	101;"	d
UTIL_THROW_IF2	util/exception.hh	104;"	d
UTIL_THROW_IF_ARG	util/exception.hh	95;"	d
UTIL_TIMER	util/stream/timer.hh	13;"	d
UTIL_TOKENIZE_PIECE_H	util/tokenize_piece.hh	2;"	d
UTIL_UNISTD_H	util/unistd.hh	2;"	d
UTIL_UNKNOWN	util/read_compressed.cc	/^  UTIL_UNKNOWN, UTIL_GZIP, UTIL_BZIP, UTIL_XZIP$/;"	e	enum:util::__anon41::MagicResult	file:
UTIL_UNLIKELY	util/exception.hh	90;"	d
UTIL_UNLIKELY	util/exception.hh	92;"	d
UTIL_USAGE_H	util/usage.hh	2;"	d
UTIL_XZIP	util/read_compressed.cc	/^  UTIL_UNKNOWN, UTIL_GZIP, UTIL_BZIP, UTIL_XZIP$/;"	e	enum:util::__anon41::MagicResult	file:
UnRest	lm/model.hh	/^    float UnRest(const uint64_t *pointers_begin, const uint64_t *pointers_end, unsigned char first_length) const {$/;"	f	class:lm::ngram::detail::GenericModel
UncheckedInsert	util/probing_hash_table.hh	/^    template <class T> MutableIterator UncheckedInsert(const T &t) {$/;"	f	class:util::ProbingHashTable
Uncompressed	util/read_compressed.cc	/^    explicit Uncompressed(int fd) : fd_(fd) {}$/;"	f	class:util::__anon41::Uncompressed
Uncompressed	util/read_compressed.cc	/^class Uncompressed : public ReadBase {$/;"	c	namespace:util::__anon41	file:
UncompressedWithHeader	util/read_compressed.cc	/^    UncompressedWithHeader(int fd, const void *already_data, std::size_t already_size) : fd_(fd) {$/;"	f	class:util::__anon41::UncompressedWithHeader
UncompressedWithHeader	util/read_compressed.cc	/^class UncompressedWithHeader : public ReadBase {$/;"	c	namespace:util::__anon41	file:
UnhandledException	util/stream/chain.cc	/^void Thread::UnhandledException(const std::exception &e) {$/;"	f	class:util::stream::Thread
Unigram	lm/search_hashed.hh	/^        Unigram() {}$/;"	f	class:lm::ngram::detail::HashedSearch::Unigram
Unigram	lm/search_hashed.hh	/^        Unigram(void *start, uint64_t count) :$/;"	f	class:lm::ngram::detail::HashedSearch::Unigram
Unigram	lm/search_hashed.hh	/^    class Unigram {$/;"	c	class:lm::ngram::detail::HashedSearch
Unigram	lm/search_trie.cc	/^    void Unigram(WordIndex \/*index*\/) {$/;"	f	class:lm::ngram::trie::__anon20::FindBlanks
Unigram	lm/search_trie.cc	/^    void Unigram(WordIndex word) {$/;"	f	class:lm::ngram::trie::__anon20::WriteEntries
Unigram	lm/search_trie.hh	/^    typedef ::lm::ngram::trie::Unigram Unigram;$/;"	t	class:lm::ngram::trie::TrieSearch
Unigram	lm/trie.hh	/^    Unigram() {}$/;"	f	class:lm::ngram::trie::Unigram
Unigram	lm/trie.hh	/^class Unigram {$/;"	c	namespace:lm::ngram::trie
UnigramPointer	lm/search_hashed.hh	/^    typedef typename Value::ProbingProxy UnigramPointer;$/;"	t	class:lm::ngram::detail::HashedSearch
UnigramPointer	lm/search_trie.hh	/^    typedef ::lm::ngram::trie::UnigramPointer UnigramPointer;$/;"	t	class:lm::ngram::trie::TrieSearch
UnigramPointer	lm/trie.hh	/^    UnigramPointer() : to_(NULL) {}$/;"	f	class:lm::ngram::trie::UnigramPointer
UnigramPointer	lm/trie.hh	/^    explicit UnigramPointer(const ProbBackoff &to) : to_(&to) {}$/;"	f	class:lm::ngram::trie::UnigramPointer
UnigramPointer	lm/trie.hh	/^class UnigramPointer {$/;"	c	namespace:lm::ngram::trie
UnigramProb	lm/search_trie.cc	/^    float UnigramProb(WordIndex index) const { return unigrams_[index].weights.prob; }$/;"	f	class:lm::ngram::trie::__anon20::WriteEntries
UnigramProb	lm/search_trie.cc	/^    float UnigramProb(WordIndex index) const {$/;"	f	class:lm::ngram::trie::__anon20::FindBlanks
UnigramValue	lm/trie.hh	/^struct UnigramValue {$/;"	s	namespace:lm::ngram::trie
Uninterpolated	lm/builder/ngram.hh	/^struct Uninterpolated {$/;"	s	namespace:lm::builder
Union	lm/filter/phrase.hh	/^    explicit Union(const Substrings &substrings) : detail::ConditionCommon(substrings) {}$/;"	f	class:lm::phrase::Union
Union	lm/filter/phrase.hh	/^class Union : public detail::ConditionCommon {$/;"	c	namespace:lm::phrase
Union	lm/filter/vocab.hh	/^    explicit Union(const Words &vocabs) : vocabs_(vocabs) {}$/;"	f	class:lm::vocab::Union
Union	lm/filter/vocab.hh	/^class Union {$/;"	c	namespace:lm::vocab
UnkCountChangePadding	lm/vocab.hh	/^    std::size_t UnkCountChangePadding() const { return 0; }$/;"	f	class:lm::ngram::ProbingVocabulary
UnkCountChangePadding	lm/vocab.hh	/^    std::size_t UnkCountChangePadding() const { return SawUnk() ? 0 : sizeof(uint64_t); }$/;"	f	class:lm::ngram::SortedVocabulary
Unknown	lm/search_hashed.hh	/^        typename Value::Weights &Unknown() { return unigram_[0]; }$/;"	f	class:lm::ngram::detail::HashedSearch::Unigram
Unknown	lm/trie.hh	/^    ProbBackoff &Unknown() { return unigram_[0].weights; }$/;"	f	class:lm::ngram::trie::Unigram
UnknownUnigram	lm/search_hashed.hh	/^    typename Value::Weights &UnknownUnigram() { return unigram_.Unknown(); }$/;"	f	class:lm::ngram::detail::HashedSearch
UnknownUnigram	lm/search_trie.hh	/^    ProbBackoff &UnknownUnigram() { return unigram_.Unknown(); }$/;"	f	class:lm::ngram::trie::TrieSearch
UnmapOrThrow	util/mmap.cc	/^void UnmapOrThrow(void *start, size_t length) {$/;"	f	namespace:util
Unmark	lm/builder/ngram.hh	/^    void Unmark() {$/;"	f	class:lm::builder::NGram
UnmarkedCount	lm/builder/ngram.hh	/^    uint64_t UnmarkedCount() const {$/;"	f	class:lm::builder::NGram
Unpack	lm/search_hashed.hh	/^    MiddlePointer Unpack(uint64_t extend_pointer, unsigned char extend_length, Node &node) const {$/;"	f	class:lm::ngram::detail::HashedSearch
Unpack	lm/search_trie.hh	/^    MiddlePointer Unpack(uint64_t extend_pointer, unsigned char extend_length, Node &node) const {$/;"	f	class:lm::ngram::trie::TrieSearch
UnsafeMutableFind	util/probing_hash_table.hh	/^    template <class Key> bool UnsafeMutableFind(const Key key, MutableIterator &out) {$/;"	f	class:util::AutoProbing
UnsafeMutableFind	util/probing_hash_table.hh	/^    template <class Key> bool UnsafeMutableFind(const Key key, MutableIterator &out) {$/;"	f	class:util::ProbingHashTable
UnsafeMutableMustFind	util/probing_hash_table.hh	/^    template <class Key> MutableIterator UnsafeMutableMustFind(const Key key) {$/;"	f	class:util::AutoProbing
UnsafeMutableMustFind	util/probing_hash_table.hh	/^    template <class Key> MutableIterator UnsafeMutableMustFind(const Key key) {$/;"	f	class:util::ProbingHashTable
UnsetSign	util/bit_packing.hh	/^inline void UnsetSign(float &to) {$/;"	f	namespace:util
UpdateConfigFromBinary	lm/bhiksha.cc	/^void ArrayBhiksha::UpdateConfigFromBinary(const BinaryFormat &file, uint64_t offset, Config &config) {$/;"	f	class:lm::ngram::trie::ArrayBhiksha
UpdateConfigFromBinary	lm/bhiksha.hh	/^    static void UpdateConfigFromBinary(const BinaryFormat &, uint64_t, Config &\/*config*\/) {}$/;"	f	class:lm::ngram::trie::DontBhiksha
UpdateConfigFromBinary	lm/quantize.cc	/^void SeparatelyQuantize::UpdateConfigFromBinary(const BinaryFormat &file, uint64_t offset, Config &config) {$/;"	f	class:lm::ngram::SeparatelyQuantize
UpdateConfigFromBinary	lm/quantize.hh	/^    static void UpdateConfigFromBinary(const BinaryFormat &, uint64_t, Config &) {}$/;"	f	class:lm::ngram::DontQuantize
UpdateConfigFromBinary	lm/search_hashed.hh	/^    static void UpdateConfigFromBinary(const BinaryFormat &, const std::vector<uint64_t> &, uint64_t, Config &) {}$/;"	f	class:lm::ngram::detail::HashedSearch
UpdateConfigFromBinary	lm/search_trie.hh	/^    static void UpdateConfigFromBinary(const BinaryFormat &file, const std::vector<uint64_t> &counts, uint64_t offset, Config &config) {$/;"	f	class:lm::ngram::trie::TrieSearch
UpdateCopyFrom	lm/builder/adjust_counts.cc	/^    void UpdateCopyFrom() {$/;"	f	class:lm::builder::__anon4::CollapseStream	file:
UpperBoundary	util/double-conversion/ieee.h	/^  DiyFp UpperBoundary() const {$/;"	f	class:double_conversion::Double
UpperBoundary	util/double-conversion/ieee.h	/^  DiyFp UpperBoundary() const {$/;"	f	class:double_conversion::Single
ValidEnd	util/stream/block.hh	/^    const void *ValidEnd() const { $/;"	f	class:util::stream::Block
ValidSize	util/stream/block.hh	/^    std::size_t ValidSize() const { return valid_size_; }$/;"	f	class:util::stream::Block
Value	lm/builder/ngram.hh	/^    Payload &Value() { return *reinterpret_cast<Payload *>(end_); }$/;"	f	class:lm::builder::NGram
Value	lm/builder/ngram.hh	/^    const Payload &Value() const { return *reinterpret_cast<const Payload *>(end_); }$/;"	f	class:lm::builder::NGram
Value	lm/search_hashed.hh	/^  typedef Prob Value;$/;"	t	struct:lm::ngram::detail::ProbEntry
Value	lm/value.hh	/^    typedef Weights Value;$/;"	t	struct:lm::ngram::BackoffValue::ProbingEntry
Value	lm/value.hh	/^    typedef Weights Value;$/;"	t	struct:lm::ngram::RestValue::ProbingEntry
Value	lm/value_build.hh	/^    typedef BackoffValue Value;$/;"	t	class:lm::ngram::NoRestBuild
Value	lm/value_build.hh	/^    typedef RestValue Value;$/;"	t	class:lm::ngram::LowerRestBuild
Value	lm/value_build.hh	/^    typedef RestValue Value;$/;"	t	class:lm::ngram::MaxRestBuild
Values	lm/search_trie.cc	/^    const std::vector<float> &Values(unsigned char order) const {$/;"	f	class:lm::ngram::trie::__anon20::SRISucks
Vector	util/double-conversion/utils.h	/^  Vector() : start_(NULL), length_(0) {}$/;"	f	class:double_conversion::Vector
Vector	util/double-conversion/utils.h	/^  Vector(T* data, int length) : start_(data), length_(length) {$/;"	f	class:double_conversion::Vector
Vector	util/double-conversion/utils.h	/^class Vector {$/;"	c	namespace:double_conversion
Vectors	lm/neural/wordvecs.hh	/^    const Storage &Vectors() const { return vecs_; }$/;"	f	class:lm::neural::WordVecs
Vertex	lm/filter/phrase.cc	/^    Vertex() : current_(0) {}$/;"	f	class:lm::phrase::detail::Vertex
Vertex	lm/filter/phrase.cc	/^class Vertex {$/;"	c	namespace:lm::phrase::detail	file:
Visit	lm/search_trie.cc	/^    void Visit(const WordIndex *to, unsigned char length, float prob) {$/;"	f	class:lm::ngram::trie::__anon20::BlankManager
VocabEntry	lm/builder/corpus_count.cc	/^struct VocabEntry {$/;"	s	namespace:lm::builder::__anon5	file:
VocabLoadException	lm/lm_exception.cc	/^VocabLoadException::VocabLoadException() throw() {}$/;"	f	class:lm::VocabLoadException
VocabLoadException	lm/lm_exception.hh	/^class VocabLoadException : public LoadException {$/;"	c	namespace:lm
VocabReconstitute	lm/builder/print.cc	/^VocabReconstitute::VocabReconstitute(int fd) {$/;"	f	class:lm::builder::VocabReconstitute
VocabReconstitute	lm/builder/print.hh	/^class VocabReconstitute {$/;"	c	namespace:lm::builder
VocabStringReadingOffset	lm/binary_format.hh	/^    uint64_t VocabStringReadingOffset() const {$/;"	f	class:lm::ngram::BinaryFormat
VocabUsage	lm/builder/corpus_count.cc	/^std::size_t CorpusCount::VocabUsage(std::size_t vocab_estimate) {$/;"	f	class:lm::builder::CorpusCount
Vocabulary	lm/facade.hh	/^    typedef VocabularyT Vocabulary;$/;"	t	class:lm::base::ModelFacade
Vocabulary	lm/model.hh	/^typedef ::lm::ngram::ProbingVocabulary Vocabulary;$/;"	t	namespace:lm::ngram
Vocabulary	lm/virtual_interface.hh	/^    Vocabulary() {}$/;"	f	class:lm::base::Vocabulary
Vocabulary	lm/virtual_interface.hh	/^    Vocabulary(WordIndex begin_sentence, WordIndex end_sentence, WordIndex not_found) {$/;"	f	class:lm::base::Vocabulary
Vocabulary	lm/virtual_interface.hh	/^class Vocabulary {$/;"	c	namespace:lm::base
Vocabulary	lm/wrappers/nplm.cc	/^Vocabulary::Vocabulary(const nplm::vocabulary &vocab) $/;"	f	class:lm::np::Vocabulary
Vocabulary	lm/wrappers/nplm.hh	/^class Vocabulary : public base::Vocabulary {$/;"	c	namespace:lm::np
WIN32_LEAN_AND_MEAN	util/usage.cc	17;"	d	file:
WINBOOL	util/usage.cc	/^typedef int WINBOOL;$/;"	t	file:
WRITE_AFTER	lm/config.hh	/^    WRITE_AFTER \/\/ Write after we're done.$/;"	e	enum:lm::ngram::Config::WriteMethod
WRITE_MMAP	lm/config.hh	/^    WRITE_MMAP, \/\/ Map the file directly.$/;"	e	enum:lm::ngram::Config::WriteMethod
Wait	util/stream/chain.cc	/^void Chain::Wait(bool release_memory) {$/;"	f	class:util::stream::Chain
Wait	util/stream/multi_stream.hh	/^    void Wait(bool release_memory = true) {$/;"	f	class:util::stream::Chains
WaitSemaphore	util/pcqueue.hh	/^inline void WaitSemaphore(Semaphore &semaphore) {$/;"	f	namespace:util
Wall	util/usage.cc	/^typedef struct timeval Wall;$/;"	t	namespace:util::__anon45	typeref:struct:util::__anon45::timeval	file:
WallTime	util/usage.cc	/^double WallTime() {$/;"	f	namespace:util
Warn	lm/read_arpa.cc	/^void PositiveProbWarn::Warn(float prob) {$/;"	f	class:lm::PositiveProbWarn
WarningAction	lm/lm_exception.hh	/^typedef enum {THROW_UP, COMPLAIN, SILENT} WarningAction;$/;"	t	namespace:lm	typeref:enum:lm::__anon13
Weights	lm/value.hh	/^  typedef ProbBackoff Weights;$/;"	t	struct:lm::ngram::BackoffValue
Weights	lm/value.hh	/^  typedef RestWeights Weights;$/;"	t	struct:lm::ngram::RestValue
Word	lm/ngram_query.hh	/^  void Word(StringPiece surface, WordIndex vocab, const FullScoreReturn &ret) const {$/;"	f	struct:lm::ngram::FullPrint
Word	lm/ngram_query.hh	/^  void Word(StringPiece, WordIndex, const FullScoreReturn &) const {}$/;"	f	struct:lm::ngram::BasicPrint
WordIndex	lm/word_index.hh	/^typedef unsigned int WordIndex;$/;"	t	namespace:lm
WordVecs	lm/neural/wordvecs.cc	/^WordVecs::WordVecs(util::FilePiece &f) {$/;"	f	class:lm::neural::WordVecs
WordVecs	lm/neural/wordvecs.hh	/^class WordVecs {$/;"	c	namespace:lm::neural
Words	lm/filter/vocab.hh	/^    typedef boost::unordered_map<std::string, std::vector<unsigned int> > Words;$/;"	t	class:lm::vocab::Multiple
Words	lm/filter/vocab.hh	/^    typedef boost::unordered_map<std::string, std::vector<unsigned int> > Words;$/;"	t	class:lm::vocab::Union
Words	lm/filter/vocab.hh	/^    typedef boost::unordered_set<std::string> Words;$/;"	t	class:lm::vocab::Single
Worker	util/thread_pool.hh	/^    template <class Construct> Worker(PCQueue<Request> &in, Construct &construct, const Request &poison)$/;"	f	class:util::Worker
Worker	util/thread_pool.hh	/^template <class HandlerT> class Worker : boost::noncopyable {$/;"	c	namespace:util
WorkerProgress	util/stream/multi_progress.hh	/^    WorkerProgress() : parent_(NULL) {}$/;"	f	class:util::stream::WorkerProgress
WorkerProgress	util/stream/multi_progress.hh	/^    WorkerProgress(uint64_t next, MultiProgress &parent, char character) $/;"	f	class:util::stream::WorkerProgress
WorkerProgress	util/stream/multi_progress.hh	/^class WorkerProgress {$/;"	c	namespace:util::stream
Write	lm/quantize.hh	/^        void Write(float prob) const {$/;"	f	class:lm::ngram::SeparatelyQuantize::LongestPointer
Write	lm/quantize.hh	/^        void Write(float prob) {$/;"	f	class:lm::ngram::DontQuantize::LongestPointer
Write	lm/quantize.hh	/^        void Write(float prob, float backoff) const {$/;"	f	class:lm::ngram::SeparatelyQuantize::MiddlePointer
Write	lm/quantize.hh	/^        void Write(float prob, float backoff) {$/;"	f	class:lm::ngram::DontQuantize::MiddlePointer
Write	util/stream/io.hh	/^    explicit Write(int fd) : file_(fd) {}$/;"	f	class:util::stream::Write
Write	util/stream/io.hh	/^class Write {$/;"	c	namespace:util::stream
WriteAndRecycle	util/stream/io.hh	/^    explicit WriteAndRecycle(int fd) : file_(fd) {}$/;"	f	class:util::stream::WriteAndRecycle
WriteAndRecycle	util/stream/io.hh	/^class WriteAndRecycle {$/;"	c	namespace:util::stream
WriteContextFile	lm/trie_sort.cc	/^FILE *WriteContextFile(uint8_t *begin, uint8_t *end, const std::string &temp_prefix, std::size_t entry_size, unsigned char order) {$/;"	f	namespace:lm::ngram::trie::__anon22
WriteCounts	lm/filter/arpa_io.cc	/^void WriteCounts(std::ostream &out, const std::vector<uint64_t> &number) {$/;"	f	namespace:lm
WriteEntries	lm/search_trie.cc	/^    WriteEntries(RecordReader *contexts, const Quant &quant, UnigramValue *unigrams, BitPackedMiddle<Bhiksha> *middle, BitPackedLongest &longest, unsigned char order, SRISucks &sri) :$/;"	f	class:lm::ngram::trie::__anon20::WriteEntries
WriteEntries	lm/search_trie.cc	/^template <class Quant, class Bhiksha> class WriteEntries {$/;"	c	namespace:lm::ngram::trie::__anon20	file:
WriteFloat32	util/bit_packing.hh	/^inline void WriteFloat32(void *base, uint64_t bit_off, float value) {$/;"	f	namespace:util
WriteHeader	lm/binary_format.cc	/^void WriteHeader(void *to, const Parameters &params) {$/;"	f	namespace:lm::ngram::__anon3
WriteInt25	util/bit_packing.hh	/^inline void WriteInt25(void *base, uint64_t bit_off, uint8_t length, uint32_t value) {$/;"	f	namespace:util
WriteInt57	util/bit_packing.hh	/^inline void WriteInt57(void *base, uint64_t bit_off, uint8_t length, uint64_t value) {$/;"	f	namespace:util
WriteMethod	lm/config.hh	/^  enum WriteMethod {$/;"	g	struct:lm::ngram::Config
WriteNext	lm/bhiksha.hh	/^    void WriteNext(void *base, uint64_t bit_offset, uint64_t \/*index*\/, uint64_t value) {$/;"	f	class:lm::ngram::trie::DontBhiksha
WriteNext	lm/bhiksha.hh	/^    void WriteNext(void *base, uint64_t bit_offset, uint64_t index, uint64_t value) {$/;"	f	class:lm::ngram::trie::ArrayBhiksha
WriteNonPositiveFloat31	util/bit_packing.hh	/^inline void WriteNonPositiveFloat31(void *base, uint64_t bit_off, float value) {$/;"	f	namespace:util
WriteOrThrow	util/file.cc	/^void WriteOrThrow(FILE *to, const void *data, std::size_t size) {$/;"	f	namespace:util
WriteOrThrow	util/file.cc	/^void WriteOrThrow(int fd, const void *data_void, std::size_t size) {$/;"	f	namespace:util
WriteUniqueWords	lm/vocab.hh	/^    explicit WriteUniqueWords(int fd) : word_list_(fd) {}$/;"	f	class:lm::ngram::WriteUniqueWords
WriteUniqueWords	lm/vocab.hh	/^class WriteUniqueWords {$/;"	c	namespace:lm::ngram
WriteVocabWords	lm/binary_format.cc	/^void BinaryFormat::WriteVocabWords(const std::string &buffer, void *&vocab_base, void *&search_base) {$/;"	f	class:lm::ngram::BinaryFormat
WriteWordsWrapper	lm/vocab.cc	/^WriteWordsWrapper::WriteWordsWrapper(EnumerateVocab *inner) : inner_(inner) {}$/;"	f	class:lm::ngram::WriteWordsWrapper
WriteWordsWrapper	lm/vocab.hh	/^class WriteWordsWrapper : public EnumerateVocab {$/;"	c	namespace:lm::ngram
Writer	lm/builder/corpus_count.cc	/^    Writer(std::size_t order, const util::stream::ChainPosition &position, void *dedupe_mem, std::size_t dedupe_mem_size) $/;"	f	class:lm::builder::__anon5::Writer
Writer	lm/builder/corpus_count.cc	/^class Writer {$/;"	c	namespace:lm::builder::__anon5	file:
XZException	util/read_compressed.cc	/^XZException::XZException() throw() {}$/;"	f	class:util::XZException
XZException	util/read_compressed.hh	/^class XZException : public CompressedException {$/;"	c	namespace:util
XZip	util/read_compressed.cc	/^    XZip(const void *base, std::size_t amount)$/;"	f	class:util::__anon41::XZip
XZip	util/read_compressed.cc	/^class XZip {$/;"	c	namespace:util::__anon41	file:
Zero	util/double-conversion/bignum.cc	/^void Bignum::Zero() {$/;"	f	class:double_conversion::Bignum
ZeroRemaining	lm/state.hh	/^    void ZeroRemaining() {$/;"	f	class:lm::ngram::State
ZeroRemaining	lm/state.hh	/^  void ZeroRemaining() {$/;"	f	struct:lm::ngram::ChartState
ZeroRemaining	lm/state.hh	/^  void ZeroRemaining() {$/;"	f	struct:lm::ngram::Left
_FILE_OFFSET_BITS	util/file.cc	2;"	d	file:
_LARGEFILE64_SOURCE	util/file.cc	1;"	d	file:
action_	lm/read_arpa.hh	/^    WarningAction action_;$/;"	m	class:lm::PositiveProbWarn
action_	util/read_compressed.cc	/^    lzma_action action_;$/;"	m	class:util::__anon41::XZip	file:
active_	util/stream/multi_progress.hh	/^    bool active_;$/;"	m	class:util::stream::MultiProgress
actual_	lm/filter/format.hh	/^    size_t actual_;$/;"	m	class:lm::InputBuffer
actual_base_	lm/quantize.hh	/^    uint8_t *actual_base_;$/;"	m	class:lm::ngram::SeparatelyQuantize
adder_in	lm/builder/initial_probabilities.hh	/^  util::stream::ChainConfig adder_in;$/;"	m	struct:lm::builder::InitialProbabilitiesConfig
adder_out	lm/builder/initial_probabilities.hh	/^  util::stream::ChainConfig adder_out;$/;"	m	struct:lm::builder::InitialProbabilitiesConfig
address_	lm/quantize.hh	/^        util::BitAddress address_;$/;"	m	class:lm::ngram::DontQuantize::LongestPointer
address_	lm/quantize.hh	/^        util::BitAddress address_;$/;"	m	class:lm::ngram::DontQuantize::MiddlePointer
address_	lm/quantize.hh	/^        util::BitAddress address_;$/;"	m	class:lm::ngram::SeparatelyQuantize::LongestPointer
address_	lm/quantize.hh	/^        util::BitAddress address_;$/;"	m	class:lm::ngram::SeparatelyQuantize::MiddlePointer
adjust	lm/partial.hh	/^  float adjust;$/;"	m	struct:lm::ngram::ExtendReturn
after_	util/tokenize_piece.hh	/^    StringPiece after_;$/;"	m	class:util::TokenIter
allocated_	lm/search_trie.cc	/^    uint8_t *current_, *allocated_;$/;"	m	class:lm::ngram::trie::__anon20::BackoffMessages	file:
allocated_	util/probing_hash_table.hh	/^    std::size_t allocated_;$/;"	m	class:util::AutoProbing
allocated_end_	util/fixed_array.hh	/^    T *allocated_end_;$/;"	m	class:util::FixedArray
amount	lm/builder/discount.hh	/^  float amount[4];$/;"	m	struct:lm::builder::Discount
annotated_	lm/filter/format.hh	/^    std::vector<Annotated> annotated_;$/;"	m	class:lm::MultipleOutputBuffer
arcs_	lm/filter/phrase.hh	/^    std::vector<detail::Arc> arcs_;$/;"	m	class:lm::phrase::detail::ConditionCommon
arpa_complain	lm/config.hh	/^  ARPALoadComplain arpa_complain;$/;"	m	struct:lm::ngram::Config
array	lm/search_trie.cc	/^  unsigned char array;$/;"	m	struct:lm::ngram::trie::__anon20::ProbPointer	file:
as_string	util/string_piece.hh	/^  std::string as_string() const {$/;"	f	class:StringPiece
at_end_	util/file_piece.hh	/^    bool at_end_;$/;"	m	class:util::FilePiece
attention_size_	lm/trie_sort.cc	/^    const std::size_t attention_size_;$/;"	m	class:lm::ngram::trie::__anon22::PartialViewProxy	file:
back	util/fixed_array.hh	/^    T &back() { return *(end() - 1); }$/;"	f	class:util::FixedArray
back	util/fixed_array.hh	/^    const T &back() const { return *(end() - 1); }$/;"	f	class:util::FixedArray
back_	util/pcqueue.hh	/^    semaphore_t back_;$/;"	m	class:util::Semaphore
back_	util/read_compressed.cc	/^    Compression back_;$/;"	m	class:util::__anon41::StreamCompressed	file:
backend_	lm/filter/wrapper.hh	/^    Filter backend_;$/;"	m	class:lm::ContextFilter
backend_	lm/wrappers/nplm.hh	/^    mutable boost::thread_specific_ptr<nplm::neuralLM> backend_;$/;"	m	class:lm::np::Model
backend_	util/probing_hash_table.hh	/^    Backend backend_;$/;"	m	class:util::AutoProbing
backing_	lm/model.hh	/^    BinaryFormat backing_;$/;"	m	class:lm::ngram::detail::GenericModel
backing_	lm/search_trie.cc	/^    util::scoped_malloc backing_;$/;"	m	class:lm::ngram::trie::__anon20::BackoffMessages	file:
backoff	lm/state.hh	/^    float backoff[KENLM_MAX_ORDER - 1];$/;"	m	class:lm::ngram::State
backoff	lm/weights.hh	/^  float backoff;$/;"	m	struct:lm::ProbBackoff
backoff	lm/weights.hh	/^  float backoff;$/;"	m	struct:lm::RestWeights
backoff_bits	lm/config.hh	/^  uint8_t prob_bits, backoff_bits;$/;"	m	struct:lm::ngram::Config
backoff_bits_	lm/quantize.hh	/^    uint8_t prob_bits_, backoff_bits_;$/;"	m	class:lm::ngram::SeparatelyQuantize
backoffs_	lm/builder/interpolate.cc	/^    util::FixedArray<util::stream::Stream> backoffs_;$/;"	m	class:lm::builder::__anon8::Callback	file:
backoffs_	lm/builder/interpolate.hh	/^    util::stream::ChainPositions backoffs_;$/;"	m	class:lm::builder::Interpolate
bad_action	lm/builder/adjust_counts.hh	/^  WarningAction bad_action;$/;"	m	struct:lm::builder::DiscountConfig
base	lm/facade.hh	/^namespace base {$/;"	n	namespace:lm
base	lm/virtual_interface.cc	/^namespace base {$/;"	n	namespace:lm	file:
base	lm/virtual_interface.hh	/^namespace base {$/;"	n	namespace:lm
base	util/bit_packing.hh	/^  void *base;$/;"	m	struct:util::BitAddress
base_	lm/trie.cc	/^    const uint8_t *const base_;$/;"	m	class:lm::ngram::trie::__anon21::KeyAccessor	file:
base_	lm/trie.hh	/^    uint8_t *base_;$/;"	m	class:lm::ngram::trie::BitPacked
base_instance_	lm/wrappers/nplm.hh	/^    boost::scoped_ptr<nplm::neuralLM> base_instance_;$/;"	m	class:lm::np::Model
base_sequence_	lm/filter/thread.hh	/^    uint64_t base_sequence_;$/;"	m	class:lm::OutputWorker
base_vocab_	lm/virtual_interface.hh	/^    const Vocabulary *base_vocab_;$/;"	m	class:lm::base::Model
basis_	lm/search_trie.cc	/^    float basis_[KENLM_MAX_ORDER];$/;"	m	class:lm::ngram::trie::__anon20::BlankManager	file:
batch_size_	lm/filter/thread.hh	/^    const size_t batch_size_;$/;"	m	class:lm::Controller
batches_	lm/filter/thread.hh	/^    std::vector<Batch> batches_;$/;"	m	class:lm::Controller
been_	lm/search_trie.cc	/^    WordIndex been_[KENLM_MAX_ORDER];$/;"	m	class:lm::ngram::trie::__anon20::BlankManager	file:
been_length_	lm/search_trie.cc	/^    unsigned char been_length_;$/;"	m	class:lm::ngram::trie::__anon20::BlankManager	file:
begin	lm/builder/ngram.hh	/^    WordIndex *begin() { return begin_; }$/;"	f	class:lm::builder::NGram
begin	lm/builder/ngram.hh	/^    const WordIndex *begin() const { return begin_; }$/;"	f	class:lm::builder::NGram
begin	lm/search_trie.cc	/^  const WordIndex *begin, *end;$/;"	m	struct:lm::ngram::trie::__anon20::Gram	file:
begin	lm/trie.hh	/^  uint64_t begin, end;$/;"	m	struct:lm::ngram::trie::NodeRange
begin	util/fixed_array.hh	/^    T *begin() { return static_cast<T*>(block_.get()); }$/;"	f	class:util::FixedArray
begin	util/fixed_array.hh	/^    const T *begin() const { return static_cast<const T*>(block_.get()); }$/;"	f	class:util::FixedArray
begin	util/mmap.hh	/^    const char *begin() const { return reinterpret_cast<char*>(data_); }$/;"	f	class:util::scoped_memory
begin	util/mmap.hh	/^    const uint8_t *begin() const { return reinterpret_cast<uint8_t*>(data_); }$/;"	f	class:util::scoped_mmap
begin	util/string_piece.hh	/^  iterator begin() const { return ptr_; }$/;"	f	class:StringPiece
begin_	lm/builder/ngram.hh	/^    WordIndex *begin_, *end_;$/;"	m	class:lm::builder::NGram
begin_	lm/quantize.hh	/^        float *begin_;$/;"	m	class:lm::ngram::SeparatelyQuantize::Bins
begin_	lm/vocab.hh	/^    uint64_t *begin_, *end_;$/;"	m	class:lm::ngram::SortedVocabulary
begin_	util/probing_hash_table.hh	/^    MutableIterator begin_;$/;"	m	class:util::ProbingHashTable
begin_sentence_	lm/facade.hh	/^    State begin_sentence_, null_context_;$/;"	m	class:lm::base::ModelFacade
begin_sentence_	lm/virtual_interface.hh	/^    WordIndex begin_sentence_, end_sentence_, not_found_;$/;"	m	class:lm::base::Vocabulary
begin_sentence_memory_	lm/virtual_interface.hh	/^    const void *begin_sentence_memory_, *null_context_memory_;$/;"	m	class:lm::base::Model
bhiksha_	lm/trie.hh	/^    Bhiksha bhiksha_;$/;"	m	class:lm::ngram::trie::BitPackedMiddle
bigits_	util/double-conversion/bignum.h	/^  Vector<Chunk> bigits_;$/;"	m	class:double_conversion::Bignum
bigits_buffer_	util/double-conversion/bignum.h	/^  Chunk bigits_buffer_[kBigitCapacity];$/;"	m	class:double_conversion::Bignum
bigram_pack_	lm/search_trie.cc	/^    BitPacked &bigram_pack_;$/;"	m	class:lm::ngram::trie::__anon20::WriteEntries	file:
binary_	lm/filter/wrapper.hh	/^    Binary binary_;$/;"	m	class:lm::BinaryFilter
binary_exponent	util/double-conversion/cached-powers.cc	/^  int16_t binary_exponent;$/;"	m	struct:double_conversion::CachedPower	file:
bins_	lm/quantize.hh	/^        const Bins *bins_;$/;"	m	class:lm::ngram::SeparatelyQuantize::MiddlePointer
bits	util/bit_packing.hh	/^  uint8_t bits;$/;"	m	struct:util::BitsMask
bits_	lm/quantize.hh	/^        uint8_t bits_;$/;"	m	class:lm::ngram::SeparatelyQuantize::Bins
block_	lm/builder/adjust_counts.cc	/^    util::stream::Link block_;$/;"	m	class:lm::builder::__anon4::CollapseStream	file:
block_	lm/builder/corpus_count.cc	/^    util::stream::Link block_;$/;"	m	class:lm::builder::__anon5::Writer	file:
block_	lm/builder/initial_probabilities.cc	/^    util::stream::Link block_;$/;"	m	class:lm::builder::__anon7::PruneNGramStream	file:
block_	util/fixed_array.hh	/^    util::scoped_malloc block_;$/;"	m	class:util::FixedArray
block_	util/mmap.hh	/^    std::size_t block_;$/;"	m	class:util::Rolling
block_count	lm/builder/pipeline.hh	/^  std::size_t block_count;$/;"	m	struct:lm::builder::PipelineConfig
block_count	util/stream/config.hh	/^  std::size_t block_count;$/;"	m	struct:util::stream::ChainConfig
block_count_	util/stream/sort.hh	/^    uint64_t block_count_;$/;"	m	class:util::stream::Offsets
block_it_	util/stream/stream.hh	/^    Link block_it_;$/;"	m	class:util::stream::Stream
block_size_	lm/builder/corpus_count.cc	/^    const std::size_t block_size_;$/;"	m	class:lm::builder::__anon5::Writer	file:
block_size_	util/stream/chain.hh	/^    std::size_t block_size_;$/;"	m	class:util::stream::Chain
block_size_	util/stream/stream.hh	/^    std::size_t block_size_;$/;"	m	class:util::stream::Stream
bound	lm/vocab.cc	/^  WordIndex bound;$/;"	m	struct:lm::ngram::detail::ProbingVocabularyHeader	file:
bound_	lm/vocab.hh	/^    WordIndex bound_;$/;"	m	class:lm::ngram::ProbingVocabulary
bound_	lm/vocab.hh	/^    WordIndex bound_;$/;"	m	class:lm::ngram::SortedVocabulary
buckets_	util/probing_hash_table.hh	/^    std::size_t buckets_;$/;"	m	class:util::ProbingHashTable
buf_	util/fake_ofstream.hh	/^    util::scoped_malloc buf_;$/;"	m	class:util::FakeOFStream
buf_	util/read_compressed.cc	/^    scoped_malloc buf_;$/;"	m	class:util::__anon41::UncompressedWithHeader	file:
buffer_	lm/builder/corpus_count.cc	/^    boost::scoped_array<WordIndex> buffer_;$/;"	m	class:lm::builder::__anon5::Writer	file:
buffer_	lm/filter/arpa_io.hh	/^    boost::scoped_array<char> buffer_;$/;"	m	class:lm::ARPAOutput
buffer_	lm/filter/count_io.hh	/^    std::vector<char> buffer_;$/;"	m	class:lm::CountBatch
buffer_	lm/vocab.hh	/^    std::string buffer_;$/;"	m	class:lm::ngram::WriteWordsWrapper
buffer_	util/double-conversion/utils.h	/^  Vector<char> buffer_;$/;"	m	class:double_conversion::StringBuilder
buffer_end_	util/stream/sort.hh	/^        uint8_t *current_, *buffer_end_;$/;"	m	class:util::stream::MergeQueue::Entry
buffer_size	util/stream/config.hh	/^  std::size_t buffer_size;$/;"	m	struct:util::stream::SortConfig
buffer_size_	util/fake_ofstream.hh	/^    const std::size_t buffer_size_;$/;"	m	class:util::FakeOFStream
buffer_size_	util/stream/sort.hh	/^    const std::size_t buffer_size_;$/;"	m	class:util::stream::MergeQueue
buffer_size_	util/stream/sort.hh	/^    std::size_t buffer_size_;$/;"	m	class:util::stream::MergingReader
builder	lm/builder/adjust_counts.cc	/^namespace lm { namespace builder {$/;"	n	namespace:lm	file:
builder	lm/builder/adjust_counts.hh	/^namespace builder {$/;"	n	namespace:lm
builder	lm/builder/corpus_count.cc	/^namespace builder {$/;"	n	namespace:lm	file:
builder	lm/builder/corpus_count.hh	/^namespace builder {$/;"	n	namespace:lm
builder	lm/builder/discount.hh	/^namespace builder {$/;"	n	namespace:lm
builder	lm/builder/hash_gamma.hh	/^namespace lm { namespace builder {$/;"	n	namespace:lm
builder	lm/builder/initial_probabilities.cc	/^namespace lm { namespace builder {$/;"	n	namespace:lm	file:
builder	lm/builder/initial_probabilities.hh	/^namespace builder {$/;"	n	namespace:lm
builder	lm/builder/interpolate.cc	/^namespace lm { namespace builder {$/;"	n	namespace:lm	file:
builder	lm/builder/interpolate.hh	/^namespace lm { namespace builder {$/;"	n	namespace:lm
builder	lm/builder/joint_order.hh	/^namespace lm { namespace builder {$/;"	n	namespace:lm
builder	lm/builder/ngram.hh	/^namespace builder {$/;"	n	namespace:lm
builder	lm/builder/ngram_stream.hh	/^namespace lm { namespace builder {$/;"	n	namespace:lm
builder	lm/builder/output.cc	/^namespace lm { namespace builder {$/;"	n	namespace:lm	file:
builder	lm/builder/output.hh	/^namespace lm { namespace builder {$/;"	n	namespace:lm
builder	lm/builder/pipeline.cc	/^namespace lm { namespace builder {$/;"	n	namespace:lm	file:
builder	lm/builder/pipeline.hh	/^namespace lm { namespace builder {$/;"	n	namespace:lm
builder	lm/builder/print.cc	/^namespace lm { namespace builder {$/;"	n	namespace:lm	file:
builder	lm/builder/print.hh	/^namespace lm { namespace builder {$/;"	n	namespace:lm
builder	lm/builder/sort.hh	/^namespace builder {$/;"	n	namespace:lm
builder_	util/fake_ofstream.hh	/^    double_conversion::StringBuilder builder_;$/;"	m	class:util::FakeOFStream
building_memory	lm/config.hh	/^  std::size_t building_memory;$/;"	m	struct:lm::ngram::Config
cache_size_	lm/wrappers/nplm.hh	/^    const std::size_t cache_size_;$/;"	m	class:lm::np::Model
call_realloc	util/mmap.cc	/^void scoped_memory::call_realloc(std::size_t size) {$/;"	f	class:util::scoped_memory
call_realloc	util/scoped.cc	/^void scoped_malloc::call_realloc(std::size_t requested) {$/;"	f	class:util::scoped_malloc
capacity	util/string_piece.hh	/^  size_type capacity() const { return length_; }$/;"	f	class:StringPiece
chain_	util/stream/chain.hh	/^    Chain *chain_;$/;"	m	class:util::stream::ChainPosition
chains_	lm/builder/pipeline.cc	/^    util::stream::Chains chains_;$/;"	m	class:lm::builder::__anon9::Master	file:
character_	util/stream/multi_progress.hh	/^    char character_;$/;"	m	class:util::stream::WorkerProgress
character_handout_	util/stream/multi_progress.hh	/^    std::size_t character_handout_;$/;"	m	class:util::stream::MultiProgress
chars_	util/tokenize_piece.hh	/^    StringPiece chars_;$/;"	m	class:util::AnyCharacter
chars_	util/tokenize_piece.hh	/^    StringPiece chars_;$/;"	m	class:util::AnyCharacterLast
clear	util/fixed_array.hh	/^    void clear() {$/;"	f	class:util::FixedArray
clear	util/string_piece.hh	/^  void clear() { ptr_ = NULL; length_ = 0; }$/;"	f	class:StringPiece
combine_	util/stream/sort.hh	/^    Combine combine_;$/;"	m	class:util::stream::MergingReader
combine_	util/stream/sort.hh	/^    const Combine combine_;$/;"	m	class:util::stream::Sort
compare	util/string_piece.hh	/^  int compare(const StringPiece& x) const {$/;"	f	class:StringPiece
compare_	util/stream/sort.hh	/^        const Compare compare_;$/;"	m	class:util::stream::MergeQueue::Greater
compare_	util/stream/sort.hh	/^    Compare compare_;$/;"	m	class:util::stream::MergingReader
compare_	util/stream/sort.hh	/^    SizedCompare<Compare> compare_;$/;"	m	class:util::stream::BlockSorter
compare_	util/stream/sort.hh	/^    const Compare compare_;$/;"	m	class:util::stream::Sort
complete	lm/builder/ngram.hh	/^  ProbBackoff complete;$/;"	m	union:lm::builder::Payload
complete_	util/ersatz_progress.hh	/^    uint64_t current_, next_, complete_;$/;"	m	class:util::ErsatzProgress
complete_	util/stream/multi_progress.hh	/^    uint64_t complete_;$/;"	m	class:util::stream::MultiProgress
complete_called_	util/stream/chain.hh	/^    bool complete_called_;$/;"	m	class:util::stream::Chain
config_	lm/builder/pipeline.cc	/^    PipelineConfig &config_;$/;"	m	class:lm::builder::__anon9::Master	file:
config_	util/stream/chain.hh	/^    ChainConfig config_;$/;"	m	class:util::stream::Chain
config_	util/stream/sort.hh	/^    SortConfig config_;$/;"	m	class:util::stream::Sort
const_iterator	util/string_piece.hh	/^  typedef const char* const_iterator;$/;"	t	class:StringPiece
const_reference	util/string_piece.hh	/^  typedef const char& const_reference;$/;"	t	class:StringPiece
const_reverse_iterator	util/string_piece.hh	/^  typedef std::reverse_iterator<const_iterator> const_reverse_iterator;$/;"	t	class:StringPiece
consume_at_	util/pcqueue.hh	/^  T *consume_at_;$/;"	m	class:util::PCQueue
consume_at_mutex_	util/pcqueue.hh	/^  boost::mutex consume_at_mutex_;$/;"	m	class:util::PCQueue
context_	lm/trie_sort.hh	/^    util::scoped_FILE full_[KENLM_MAX_ORDER - 1], context_[KENLM_MAX_ORDER - 1];$/;"	m	class:lm::ngram::trie::SortedFiles
contexts_	lm/search_trie.cc	/^    RecordReader *contexts_;$/;"	m	class:lm::ngram::trie::__anon20::WriteEntries	file:
convert_	util/fake_ofstream.hh	/^    double_conversion::DoubleToStringConverter convert_;$/;"	m	class:util::FakeOFStream
copy_from_	lm/builder/adjust_counts.cc	/^    uint8_t *copy_from_;$/;"	m	class:lm::builder::__anon4::CollapseStream	file:
count	lm/builder/adjust_counts.cc	/^      uint64_t count;$/;"	m	struct:lm::builder::__anon4::StatCollector::OrderStat	file:
count	lm/builder/ngram.hh	/^  uint64_t count;$/;"	m	union:lm::builder::Payload
count_	lm/search_hashed.hh	/^        uint64_t count_;$/;"	m	class:lm::ngram::detail::HashedSearch::Unigram
count_pruned	lm/builder/adjust_counts.cc	/^      uint64_t count_pruned;$/;"	m	struct:lm::builder::__anon4::StatCollector::OrderStat	file:
counts	lm/binary_format.hh	/^  std::vector<uint64_t> counts;$/;"	m	struct:lm::ngram::Parameters
counts_	lm/builder/adjust_counts.cc	/^    std::vector<uint64_t> &counts_;$/;"	m	class:lm::builder::__anon4::StatCollector	file:
counts_	lm/builder/adjust_counts.hh	/^    std::vector<uint64_t> &counts_;$/;"	m	class:lm::builder::AdjustCounts
counts_	lm/filter/arpa_io.hh	/^    std::vector<uint64_t> counts_;$/;"	m	class:lm::ARPAOutput
counts_	lm/interpolate/arpa_to_stream.hh	/^    std::vector<uint64_t> counts_;$/;"	m	class:lm::interpolate::ARPAToStream
counts_	lm/search_trie.cc	/^    std::vector<uint64_t> counts_;$/;"	m	class:lm::ngram::trie::__anon20::FindBlanks	file:
counts_pruned	lm/builder/header_info.hh	/^  std::vector<uint64_t> counts_pruned;$/;"	m	struct:HeaderInfo
counts_pruned_	lm/builder/adjust_counts.cc	/^    std::vector<uint64_t> &counts_pruned_;$/;"	m	class:lm::builder::__anon4::StatCollector	file:
counts_pruned_	lm/builder/adjust_counts.hh	/^    std::vector<uint64_t> &counts_pruned_;$/;"	m	class:lm::builder::AdjustCounts
cur_	util/stream/sort.hh	/^    Entry cur_;$/;"	m	class:util::stream::Offsets
currentCount_	lm/builder/initial_probabilities.cc	/^    uint64_t currentCount_;$/;"	m	class:lm::builder::__anon7::PruneNGramStream	file:
current_	lm/builder/adjust_counts.cc	/^    NGram current_;$/;"	m	class:lm::builder::__anon4::CollapseStream	file:
current_	lm/builder/initial_probabilities.cc	/^    NGram current_; \/\/ input iterator$/;"	m	class:lm::builder::__anon7::PruneNGramStream	file:
current_	lm/filter/phrase.cc	/^    const Sentence *current_;$/;"	m	class:lm::phrase::detail::Arc	file:
current_	lm/filter/phrase.cc	/^    unsigned int current_;$/;"	m	class:lm::phrase::detail::Vertex	file:
current_	lm/search_trie.cc	/^    uint8_t *current_, *allocated_;$/;"	m	class:lm::ngram::trie::__anon20::BackoffMessages	file:
current_	util/ersatz_progress.hh	/^    uint64_t current_, next_, complete_;$/;"	m	class:util::ErsatzProgress
current_	util/pool.hh	/^    uint8_t *current_, *current_end_;$/;"	m	class:util::Pool
current_	util/stream/chain.hh	/^    Block current_;$/;"	m	class:util::stream::Link
current_	util/stream/multi_progress.hh	/^    uint64_t current_, next_;$/;"	m	class:util::stream::WorkerProgress
current_	util/stream/sort.hh	/^        uint8_t *current_, *buffer_end_;$/;"	m	class:util::stream::MergeQueue::Entry
current_	util/stream/stream.hh	/^    uint8_t *current_, *end_;$/;"	m	class:util::stream::Stream
current_	util/tokenize_piece.hh	/^    StringPiece current_;$/;"	m	class:util::TokenIter
current_begin_	util/mmap.hh	/^    uint64_t current_begin_;$/;"	m	class:util::Rolling
current_end_	util/mmap.hh	/^    uint64_t current_end_;$/;"	m	class:util::Rolling
current_end_	util/pool.hh	/^    uint8_t *current_, *current_end_;$/;"	m	class:util::Pool
d32_	util/double-conversion/ieee.h	/^  const uint32_t d32_;$/;"	m	class:double_conversion::Single
d64_	util/double-conversion/ieee.h	/^  const uint64_t d64_;$/;"	m	class:double_conversion::Double
data	util/string_piece.hh	/^  const char* data() const { return ptr_; }$/;"	f	class:StringPiece
data_	lm/trie_sort.hh	/^    util::scoped_malloc data_;$/;"	m	class:lm::ngram::trie::RecordReader
data_	util/file_piece.hh	/^    scoped_memory data_;$/;"	m	class:util::FilePiece
data_	util/mmap.hh	/^    void *data_;$/;"	m	class:util::scoped_memory
data_	util/mmap.hh	/^    void *data_;$/;"	m	class:util::scoped_mmap
data_	util/stream/sort.hh	/^    int data_;$/;"	m	class:util::stream::OwningMergingReader
data_	util/stream/sort.hh	/^    scoped_fd data_;$/;"	m	class:util::stream::Sort
decimal_exponent	util/double-conversion/cached-powers.cc	/^  int16_t decimal_exponent;$/;"	m	struct:double_conversion::CachedPower	file:
decimal_in_shortest_high_	util/double-conversion/double-conversion.h	/^  const int decimal_in_shortest_high_;$/;"	m	class:double_conversion::DoubleToStringConverter
decimal_in_shortest_low_	util/double-conversion/double-conversion.h	/^  const int decimal_in_shortest_low_;$/;"	m	class:double_conversion::DoubleToStringConverter
dedupe_	lm/builder/corpus_count.cc	/^    Dedupe dedupe_;$/;"	m	class:lm::builder::__anon5::Writer	file:
dedupe_invalid_	lm/builder/corpus_count.cc	/^    std::vector<WordIndex> dedupe_invalid_;$/;"	m	class:lm::builder::__anon5::Writer	file:
dedupe_mem_	lm/builder/corpus_count.hh	/^    util::scoped_malloc dedupe_mem_;$/;"	m	class:lm::builder::CorpusCount
dedupe_mem_size_	lm/builder/corpus_count.hh	/^    std::size_t dedupe_mem_size_;$/;"	m	class:lm::builder::CorpusCount
default_map_size_	util/file_piece.hh	/^    std::size_t default_map_size_;$/;"	m	class:util::FilePiece
delegate_	util/sized_iterator.hh	/^    const Delegate delegate_;$/;"	m	class:util::SizedCompare
delim_	util/tokenize_piece.hh	/^    char delim_;$/;"	m	class:util::SingleCharacter
delimiter_	util/tokenize_piece.hh	/^    StringPiece delimiter_;$/;"	m	class:util::MultiCharacter
delimiter_	util/tokenize_piece.hh	/^    const bool *delimiter_;$/;"	m	class:util::BoolCharacter
denominator	lm/builder/initial_probabilities.cc	/^  float denominator;$/;"	m	struct:lm::builder::__anon7::BufferEntry	file:
dereference	util/tokenize_piece.hh	/^    const StringPiece &dereference() const {$/;"	f	class:util::TokenIter
dest_	lm/builder/initial_probabilities.cc	/^    NGram dest_;    \/\/ output iterator$/;"	m	class:lm::builder::__anon7::PruneNGramStream	file:
detail	lm/filter/phrase.cc	/^namespace detail { $/;"	n	namespace:lm::phrase	file:
detail	lm/filter/phrase.cc	/^namespace detail {$/;"	n	namespace:lm::phrase	file:
detail	lm/filter/phrase.hh	/^namespace detail {$/;"	n	namespace:lm::phrase
detail	lm/model.cc	/^namespace detail {$/;"	n	namespace:lm::ngram	file:
detail	lm/model.hh	/^namespace detail {$/;"	n	namespace:lm::ngram
detail	lm/search_hashed.cc	/^namespace detail {$/;"	n	namespace:lm::ngram	file:
detail	lm/search_hashed.hh	/^namespace detail {$/;"	n	namespace:lm::ngram
detail	lm/vocab.cc	/^namespace detail {$/;"	n	namespace:lm::ngram	file:
detail	lm/vocab.hh	/^namespace detail {$/;"	n	namespace:lm::ngram
detail	util/joint_sort.hh	/^namespace detail {$/;"	n	namespace:util
detail	util/multi_intersection.hh	/^namespace detail {$/;"	n	namespace:util
difference_type	util/proxy_iterator.hh	/^    typedef std::ptrdiff_t difference_type;$/;"	t	class:util::ProxyIterator
difference_type	util/string_piece.hh	/^  typedef ptrdiff_t difference_type;$/;"	t	class:StringPiece
disallowed_symbol_action	lm/builder/pipeline.hh	/^  WarningAction disallowed_symbol_action;$/;"	m	struct:lm::builder::PipelineConfig
disallowed_symbol_action_	lm/builder/corpus_count.hh	/^    WarningAction disallowed_symbol_action_;$/;"	m	class:lm::builder::CorpusCount
discount	lm/builder/pipeline.hh	/^  DiscountConfig discount;$/;"	m	struct:lm::builder::PipelineConfig
discount_	lm/builder/initial_probabilities.cc	/^    Discount discount_;$/;"	m	class:lm::builder::__anon7::MergeRight	file:
discount_	lm/builder/initial_probabilities.cc	/^    const Discount &discount_;$/;"	m	class:lm::builder::__anon7::AddRight	file:
discount_config_	lm/builder/adjust_counts.hh	/^    DiscountConfig discount_config_;$/;"	m	class:lm::builder::AdjustCounts
discounts_	lm/builder/adjust_counts.cc	/^    std::vector<Discount> &discounts_;$/;"	m	class:lm::builder::__anon4::StatCollector	file:
discounts_	lm/builder/adjust_counts.hh	/^    std::vector<Discount> &discounts_;$/;"	m	class:lm::builder::AdjustCounts
display_	util/stream/multi_progress.hh	/^    char display_[kWidth + 1];$/;"	m	class:util::stream::MultiProgress
doing_	lm/search_trie.cc	/^    Doing &doing_;$/;"	m	class:lm::ngram::trie::__anon20::BlankManager	file:
done_	lm/filter/thread.hh	/^    util::PCQueue<Request> &done_;$/;"	m	class:lm::FilterWorker
done_	lm/filter/thread.hh	/^    util::PCQueue<Request> &done_;$/;"	m	class:lm::OutputWorker
double_conversion	util/double-conversion/bignum-dtoa.cc	/^namespace double_conversion {$/;"	n	file:
double_conversion	util/double-conversion/bignum-dtoa.h	/^namespace double_conversion {$/;"	n
double_conversion	util/double-conversion/bignum.cc	/^namespace double_conversion {$/;"	n	file:
double_conversion	util/double-conversion/bignum.h	/^namespace double_conversion {$/;"	n
double_conversion	util/double-conversion/cached-powers.cc	/^namespace double_conversion {$/;"	n	file:
double_conversion	util/double-conversion/cached-powers.h	/^namespace double_conversion {$/;"	n
double_conversion	util/double-conversion/diy-fp.cc	/^namespace double_conversion {$/;"	n	file:
double_conversion	util/double-conversion/diy-fp.h	/^namespace double_conversion {$/;"	n
double_conversion	util/double-conversion/double-conversion.cc	/^namespace double_conversion {$/;"	n	file:
double_conversion	util/double-conversion/double-conversion.h	/^namespace double_conversion {$/;"	n
double_conversion	util/double-conversion/fast-dtoa.cc	/^namespace double_conversion {$/;"	n	file:
double_conversion	util/double-conversion/fast-dtoa.h	/^namespace double_conversion {$/;"	n
double_conversion	util/double-conversion/fixed-dtoa.cc	/^namespace double_conversion {$/;"	n	file:
double_conversion	util/double-conversion/fixed-dtoa.h	/^namespace double_conversion {$/;"	n
double_conversion	util/double-conversion/ieee.h	/^namespace double_conversion {$/;"	n
double_conversion	util/double-conversion/strtod.cc	/^namespace double_conversion {$/;"	n	file:
double_conversion	util/double-conversion/strtod.h	/^namespace double_conversion {$/;"	n
double_conversion	util/double-conversion/utils.h	/^namespace double_conversion {$/;"	n
double_to_uint64	util/double-conversion/ieee.h	/^static uint64_t double_to_uint64(double d) { return BitCast<uint64_t>(d); }$/;"	f	namespace:double_conversion
dwLength	util/usage.cc	/^  DWORD dwLength;$/;"	m	struct:__anon44	file:
dwMemoryLoad	util/usage.cc	/^  DWORD dwMemoryLoad;$/;"	m	struct:__anon44	file:
e	util/double-conversion/diy-fp.h	/^  int e() const { return e_; }$/;"	f	class:double_conversion::DiyFp
e_	util/double-conversion/diy-fp.h	/^  int e_;$/;"	m	class:double_conversion::DiyFp
empty	util/fixed_array.hh	/^    bool empty() const { return begin() == end(); }$/;"	f	class:util::FixedArray
empty	util/string_piece.hh	/^  bool empty() const { return length_ == 0; }$/;"	f	class:StringPiece
empty_	util/pcqueue.hh	/^  Semaphore empty_;$/;"	m	class:util::PCQueue
empty_string_value_	util/double-conversion/double-conversion.h	/^  const double empty_string_value_;$/;"	m	class:double_conversion::StringToDoubleConverter
end	lm/builder/ngram.hh	/^    WordIndex *end() { return end_; }$/;"	f	class:lm::builder::NGram
end	lm/builder/ngram.hh	/^    const WordIndex *end() const { return end_; }$/;"	f	class:lm::builder::NGram
end	lm/search_trie.cc	/^  const WordIndex *begin, *end;$/;"	m	struct:lm::ngram::trie::__anon20::Gram	file:
end	lm/trie.hh	/^  uint64_t begin, end;$/;"	m	struct:lm::ngram::trie::NodeRange
end	util/fixed_array.hh	/^    T *end() { return newed_end_; }$/;"	f	class:util::FixedArray
end	util/fixed_array.hh	/^    const T *end() const { return newed_end_; }$/;"	f	class:util::FixedArray
end	util/mmap.hh	/^    const char *end() const { return reinterpret_cast<char*>(data_) + size_; }$/;"	f	class:util::scoped_memory
end	util/mmap.hh	/^    const uint8_t *end() const { return reinterpret_cast<uint8_t*>(data_) + size_; }$/;"	f	class:util::scoped_mmap
end	util/string_piece.hh	/^  iterator end() const { return ptr_ + length_; }$/;"	f	class:StringPiece
end	util/tokenize_piece.hh	/^    static TokenIter<Find, SkipEmpty> end() {$/;"	f	class:util::TokenIter
end_	lm/builder/ngram.hh	/^    WordIndex *begin_, *end_;$/;"	m	class:lm::builder::NGram
end_	lm/quantize.hh	/^        const float *end_;$/;"	m	class:lm::ngram::SeparatelyQuantize::Bins
end_	lm/vocab.hh	/^    uint64_t *begin_, *end_;$/;"	m	class:lm::ngram::SortedVocabulary
end_	util/pcqueue.hh	/^  T *const end_;$/;"	m	class:util::PCQueue
end_	util/probing_hash_table.hh	/^    MutableIterator end_;$/;"	m	class:util::ProbingHashTable
end_	util/read_compressed.cc	/^    uint8_t *end_;$/;"	m	class:util::__anon41::UncompressedWithHeader	file:
end_	util/stream/stream.hh	/^    uint8_t *current_, *end_;$/;"	m	class:util::stream::Stream
end_sentence_	lm/virtual_interface.hh	/^    WordIndex begin_sentence_, end_sentence_, not_found_;$/;"	m	class:lm::base::Vocabulary
ends_with	util/string_piece.hh	/^  bool ends_with(const StringPiece& x) const {$/;"	f	class:StringPiece
entries_	util/probing_hash_table.hh	/^    std::size_t entries_;$/;"	m	class:util::ProbingHashTable
entry_size	util/stream/config.hh	/^  std::size_t entry_size;$/;"	m	struct:util::stream::ChainConfig
entry_size_	lm/search_trie.cc	/^    std::size_t entry_size_;$/;"	m	class:lm::ngram::trie::__anon20::BackoffMessages	file:
entry_size_	lm/trie_sort.hh	/^    std::size_t entry_size_;$/;"	m	class:lm::ngram::trie::RecordReader
entry_size_	util/stream/sort.hh	/^    const std::size_t entry_size_;$/;"	m	class:util::stream::MergeQueue
entry_size_	util/stream/sort.hh	/^    const std::size_t entry_size_;$/;"	m	class:util::stream::Sort
entry_size_	util/stream/stream.hh	/^    std::size_t entry_size_;$/;"	m	class:util::stream::Stream
enumerate_	lm/vocab.hh	/^    EnumerateVocab *enumerate_;$/;"	m	class:lm::ngram::ProbingVocabulary
enumerate_	lm/vocab.hh	/^    EnumerateVocab *enumerate_;$/;"	m	class:lm::ngram::SortedVocabulary
enumerate_vocab	lm/config.hh	/^  EnumerateVocab *enumerate_vocab;$/;"	m	struct:lm::ngram::Config
equal	util/tokenize_piece.hh	/^    bool equal(const TokenIter<Find, SkipEmpty> &other) const {$/;"	f	class:util::TokenIter
equal_	util/probing_hash_table.hh	/^    Equal equal_;$/;"	m	class:util::ProbingHashTable
errno_	util/exception.hh	/^    int errno_;$/;"	m	class:util::ErrnoException
exact_powers_of_ten	util/double-conversion/strtod.cc	/^static const double exact_powers_of_ten[] = {$/;"	m	namespace:double_conversion	file:
exponent_	util/double-conversion/bignum.h	/^  int exponent_;$/;"	m	class:double_conversion::Bignum
exponent_character_	util/double-conversion/double-conversion.h	/^  const char exponent_character_;$/;"	m	class:double_conversion::DoubleToStringConverter
extend_left	lm/return.hh	/^  uint64_t extend_left; \/\/ Defined only if independent_left$/;"	m	struct:lm::FullScoreReturn
f	util/bit_packing.hh	/^typedef union { float f; uint32_t i; } FloatEnc;$/;"	m	union:util::__anon27
f	util/double-conversion/diy-fp.h	/^  uint64_t f() const { return f_; }$/;"	f	class:double_conversion::DiyFp
f_	util/double-conversion/diy-fp.h	/^  uint64_t f_;$/;"	m	class:double_conversion::DiyFp
fallback	lm/builder/adjust_counts.hh	/^  Discount fallback;$/;"	m	struct:lm::builder::DiscountConfig
fallback_to_read_	util/file_piece.hh	/^    bool fallback_to_read_;$/;"	m	class:util::FilePiece
fast_counter_	lm/filter/arpa_io.hh	/^    size_t fast_counter_;$/;"	m	class:lm::ARPAOutput
fd_	util/fake_ofstream.hh	/^    int fd_;$/;"	m	class:util::FakeOFStream
fd_	util/file.hh	/^    int fd_;$/;"	m	class:util::FDException
fd_	util/file.hh	/^    int fd_;$/;"	m	class:util::scoped_fd
fd_	util/mmap.hh	/^    int fd_;$/;"	m	class:util::Rolling
fd_	util/parallel_read.cc	/^    int fd_;$/;"	m	class:util::__anon40::Reader	file:
fd_	util/read_compressed.cc	/^    scoped_fd fd_;$/;"	m	class:util::__anon41::Uncompressed	file:
fd_	util/read_compressed.cc	/^    scoped_fd fd_;$/;"	m	class:util::__anon41::UncompressedWithHeader	file:
fd_	util/stream/line_input.hh	/^    int fd_;$/;"	m	class:util::stream::LineInput
fell_back_	util/file_piece.hh	/^    ReadCompressed fell_back_;$/;"	m	class:util::FilePiece
file_	lm/binary_format.hh	/^    util::scoped_fd file_;$/;"	m	class:lm::ngram::BinaryFormat
file_	lm/filter/arpa_io.hh	/^    std::fstream file_;$/;"	m	class:lm::ARPAOutput
file_	lm/filter/count_io.hh	/^    util::FakeOFStream file_;$/;"	m	class:lm::CountOutput
file_	lm/trie_sort.hh	/^    FILE *file_;$/;"	m	class:lm::ngram::trie::RecordReader
file_	util/file_piece.hh	/^    scoped_fd file_;$/;"	m	class:util::FilePiece
file_	util/read_compressed.cc	/^    scoped_fd file_;$/;"	m	class:util::__anon41::StreamCompressed	file:
file_	util/stream/io.hh	/^    int file_;$/;"	m	class:util::stream::PRead
file_	util/stream/io.hh	/^    int file_;$/;"	m	class:util::stream::PWriteAndRecycle
file_	util/stream/io.hh	/^    int file_;$/;"	m	class:util::stream::Read
file_	util/stream/io.hh	/^    int file_;$/;"	m	class:util::stream::Write
file_	util/stream/io.hh	/^    int file_;$/;"	m	class:util::stream::WriteAndRecycle
file_	util/stream/io.hh	/^    scoped_fd file_;$/;"	m	class:util::stream::FileBuffer
file_begin_	util/mmap.hh	/^    uint64_t file_begin_;$/;"	m	class:util::Rolling
file_end_	util/mmap.hh	/^    uint64_t file_end_;$/;"	m	class:util::Rolling
file_name_	lm/filter/arpa_io.hh	/^    const std::string file_name_;$/;"	m	class:lm::ARPAOutput
file_name_	lm/filter/arpa_io.hh	/^    const std::string file_name_;$/;"	m	class:lm::ARPAOutputException
file_name_	util/file_piece.hh	/^    std::string file_name_;$/;"	m	class:util::FilePiece
files_	lm/builder/pipeline.cc	/^    util::FixedArray<util::stream::FileBuffer> files_;$/;"	m	class:lm::builder::__anon9::Master	file:
files_	lm/filter/format.hh	/^    Singles files_;$/;"	m	class:lm::MultipleOutput
files_	lm/trie_sort.cc	/^    std::deque<FILE*> &files_;$/;"	m	class:lm::ngram::trie::__anon23::Closer	file:
filter_	lm/filter/format.hh	/^    Filter &filter_;$/;"	m	class:lm::DispatchInput
filter_	lm/filter/thread.hh	/^    Filter filter_;$/;"	m	class:lm::FilterWorker
filter_	lm/filter/thread.hh	/^    util::ThreadPool<FilterWorker<Batch, Filter> > filter_;$/;"	m	class:lm::Controller
find	util/string_piece.cc	/^size_type StringPiece::find(char c, size_type pos) const {$/;"	f	class:StringPiece
find	util/string_piece.cc	/^size_type StringPiece::find(const StringPiece& s, size_type pos) const {$/;"	f	class:StringPiece
find_first_not_of	util/string_piece.cc	/^size_type StringPiece::find_first_not_of(char c, size_type pos) const {$/;"	f	class:StringPiece
find_first_not_of	util/string_piece.cc	/^size_type StringPiece::find_first_not_of(const StringPiece& s,$/;"	f	class:StringPiece
find_first_of	util/string_piece.cc	/^size_type StringPiece::find_first_of(const StringPiece& s,$/;"	f	class:StringPiece
find_first_of	util/string_piece.hh	/^  size_type find_first_of(char c, size_type pos = 0) const {$/;"	f	class:StringPiece
find_last_not_of	util/string_piece.cc	/^size_type StringPiece::find_last_not_of(char c, size_type pos) const {$/;"	f	class:StringPiece
find_last_not_of	util/string_piece.cc	/^size_type StringPiece::find_last_not_of(const StringPiece& s,$/;"	f	class:StringPiece
find_last_of	util/string_piece.cc	/^size_type StringPiece::find_last_of(const StringPiece& s, size_type pos) const {$/;"	f	class:StringPiece
find_last_of	util/string_piece.hh	/^  size_type find_last_of(char c, size_type pos = npos) const {$/;"	f	class:StringPiece
finder_	util/tokenize_piece.hh	/^    Find finder_;$/;"	m	class:util::TokenIter
first	util/double-conversion/utils.h	/^  T& first() { return start_[0]; }$/;"	f	class:double_conversion::Vector
fixed	lm/binary_format.hh	/^  FixedWidthParameters fixed;$/;"	m	struct:lm::ngram::Parameters
flags_	util/double-conversion/double-conversion.h	/^  const int flags_;$/;"	m	class:double_conversion::DoubleToStringConverter
flags_	util/double-conversion/double-conversion.h	/^  const int flags_;$/;"	m	class:double_conversion::StringToDoubleConverter
float_to_uint32	util/double-conversion/ieee.h	/^static uint32_t float_to_uint32(float f) { return BitCast<uint32_t>(f); }$/;"	f	namespace:double_conversion
for_write_	util/mmap.hh	/^    bool for_write_;$/;"	m	class:util::Rolling
free_list_	util/pool.hh	/^    std::vector<void *> free_list_;$/;"	m	class:util::Pool
from_	lm/builder/corpus_count.hh	/^    util::FilePiece &from_;$/;"	m	class:lm::builder::CorpusCount
from_	lm/filter/phrase.cc	/^    detail::Vertex *from_;$/;"	m	class:lm::phrase::detail::Arc	file:
from_adder_	lm/builder/initial_probabilities.cc	/^    util::stream::ChainPosition from_adder_;$/;"	m	class:lm::builder::__anon7::MergeRight	file:
full	lm/state.hh	/^  bool full;$/;"	m	struct:lm::ngram::Left
full_	lm/builder/adjust_counts.cc	/^    OrderStat &full_;$/;"	m	class:lm::builder::__anon4::StatCollector	file:
full_	lm/trie_sort.hh	/^    util::scoped_FILE full_[KENLM_MAX_ORDER - 1], context_[KENLM_MAX_ORDER - 1];$/;"	m	class:lm::ngram::trie::SortedFiles
gamma	lm/builder/hash_gamma.hh	/^    float gamma;$/;"	m	struct:lm::builder::HashGamma
gamma	lm/builder/initial_probabilities.cc	/^  float gamma;$/;"	m	struct:lm::builder::__anon7::BufferEntry	file:
gamma	lm/builder/ngram.hh	/^  float gamma; \/\/ Interpolation weight for lower order.$/;"	m	struct:lm::builder::Uninterpolated
get	util/file.hh	/^    int get() const { return fd_; }$/;"	f	class:util::scoped_fd
get	util/file_piece.hh	/^    char get() {$/;"	f	class:util::FilePiece
get	util/mmap.hh	/^    void *get() const { return data_; }$/;"	f	class:util::scoped_memory
get	util/mmap.hh	/^    void *get() const { return data_; }$/;"	f	class:util::scoped_mmap
get	util/mmap.hh	/^    void *get() const { return ptr_; }$/;"	f	class:util::Rolling
get	util/scoped.hh	/^    T *get() { return p_; }$/;"	f	class:util::scoped_base
get	util/scoped.hh	/^    const T *get() const { return p_; }$/;"	f	class:util::scoped_base
getopt	util/getopt.c	/^getopt(argc, argv, opts)$/;"	f
gram_	lm/builder/corpus_count.cc	/^    NGram gram_;$/;"	m	class:lm::builder::__anon5::Writer	file:
gram_	lm/builder/ngram_stream.hh	/^    NGram gram_;$/;"	m	class:lm::builder::NGramStream
handler_	util/thread_pool.hh	/^    boost::optional<Handler> handler_;$/;"	m	class:util::Worker
has_vocabulary	lm/binary_format.hh	/^  bool has_vocabulary;$/;"	m	struct:lm::ngram::FixedWidthParameters
hash_	util/probing_hash_table.hh	/^    Hash hash_;$/;"	m	class:util::ProbingHashTable
hash_value	lm/builder/hash_gamma.hh	/^    uint64_t hash_value;$/;"	m	struct:lm::builder::HashGamma
hash_value	lm/builder/initial_probabilities.cc	/^  uint64_t hash_value;$/;"	m	struct:lm::builder::__anon7::HashBufferEntry	file:
hash_value	lm/state.hh	/^inline uint64_t hash_value(const ChartState &state) {$/;"	f	namespace:lm::ngram
hash_value	lm/state.hh	/^inline uint64_t hash_value(const Left &left) {$/;"	f	namespace:lm::ngram
hash_value	lm/state.hh	/^inline uint64_t hash_value(const State &state, uint64_t seed = 0) {$/;"	f	namespace:lm::ngram
hash_value	util/string_piece_hash.hh	/^inline size_t hash_value(const StringPiece &str) {$/;"	f
hashes_	lm/filter/phrase.hh	/^    std::vector<Hash> hashes_;$/;"	m	class:lm::phrase::detail::ConditionCommon
header_	lm/builder/output.hh	/^    HeaderInfo header_;$/;"	m	class:lm::builder::Output
header_	lm/vocab.hh	/^    detail::ProbingVocabularyHeader *header_;$/;"	m	class:lm::ngram::ProbingVocabulary
header_size_	lm/binary_format.hh	/^    std::size_t header_size_, vocab_size_, vocab_pad_;$/;"	m	class:lm::ngram::BinaryFormat
high_bits_	util/double-conversion/fixed-dtoa.cc	/^  uint64_t high_bits_;$/;"	m	class:double_conversion::UInt128	file:
i	util/bit_packing.hh	/^typedef union { float f; uint32_t i; } FloatEnc;$/;"	m	union:util::__anon27
in_	lm/interpolate/arpa_to_stream.hh	/^    util::FilePiece in_;$/;"	m	class:lm::interpolate::ARPAToStream
in_	util/stream/chain.hh	/^    PCQueue<Block> *in_, *out_;$/;"	m	class:util::stream::ChainPosition
in_	util/stream/chain.hh	/^    PCQueue<Block> *in_, *out_;$/;"	m	class:util::stream::Link
in_	util/stream/sort.hh	/^    const int in_;$/;"	m	class:util::stream::MergeQueue
in_	util/stream/sort.hh	/^    int in_;$/;"	m	class:util::stream::MergingReader
in_	util/thread_pool.hh	/^    PCQueue<Request> &in_;$/;"	m	class:util::Worker
in_	util/thread_pool.hh	/^    PCQueue<Request> in_;$/;"	m	class:util::ThreadPool
in_buffer_	util/read_compressed.cc	/^    scoped_malloc in_buffer_;$/;"	m	class:util::__anon41::StreamCompressed	file:
in_offsets_	util/stream/sort.hh	/^    Offsets *in_offsets_;$/;"	m	class:util::stream::MergingReader
include_vocab	lm/config.hh	/^  bool include_vocab;$/;"	m	struct:lm::ngram::Config
incoming_	lm/filter/phrase.cc	/^    std::priority_queue<Arc*, std::vector<Arc*>, ArcGreater> incoming_;$/;"	m	class:lm::phrase::detail::Vertex	file:
increment	util/tokenize_piece.hh	/^    void increment() {$/;"	f	class:util::TokenIter
independent_left	lm/return.hh	/^  bool independent_left;$/;"	m	struct:lm::FullScoreReturn
index	lm/search_trie.cc	/^  uint64_t index;$/;"	m	struct:lm::ngram::trie::__anon20::ProbPointer	file:
infinity_symbol_	util/double-conversion/double-conversion.h	/^  const char* const infinity_symbol_;$/;"	m	class:double_conversion::DoubleToStringConverter
infinity_symbol_	util/double-conversion/double-conversion.h	/^  const char* const infinity_symbol_;$/;"	m	class:double_conversion::StringToDoubleConverter
initial_probs	lm/builder/pipeline.hh	/^  InitialProbabilitiesConfig initial_probs;$/;"	m	struct:lm::builder::PipelineConfig
initial_read_	lm/filter/count_io.hh	/^    std::streamsize initial_read_;$/;"	m	class:lm::CountBatch
initialized_	util/probing_hash_table.hh	/^    bool initialized_;$/;"	m	class:util::ProbingHashTable
inner_	lm/trie_sort.cc	/^    InnerIterator inner_;$/;"	m	class:lm::ngram::trie::__anon22::PartialViewProxy	file:
inner_	lm/vocab.hh	/^    EnumerateVocab *inner_;$/;"	m	class:lm::ngram::WriteWordsWrapper
inner_	util/joint_sort.hh	/^    InnerIterator inner_;$/;"	m	class:util::detail::JointProxy
inner_	util/sized_iterator.hh	/^    InnerIterator inner_;$/;"	m	class:util::SizedProxy
input_	lm/builder/initial_probabilities.cc	/^    const util::stream::ChainPosition input_;$/;"	m	class:lm::builder::__anon7::AddRight	file:
input_	lm/filter/thread.hh	/^    InputBuffer *input_;$/;"	m	class:lm::Controller
input_	lm/filter/thread.hh	/^    InputBuffer input_;$/;"	m	class:lm::ThreadBatch
input_file	lm/builder/header_info.hh	/^  std::string input_file;$/;"	m	struct:HeaderInfo
insert_index_	lm/trie.hh	/^    uint64_t insert_index_, max_vocab_;$/;"	m	class:lm::ngram::trie::BitPacked
int16_t	util/double-conversion/utils.h	/^typedef short int16_t;  \/\/ NOLINT$/;"	t
int32_t	util/double-conversion/utils.h	/^typedef int int32_t;$/;"	t
int64_t	util/double-conversion/utils.h	/^typedef __int64 int64_t;$/;"	t
int8_t	util/double-conversion/utils.h	/^typedef signed char int8_t;$/;"	t
internal_	util/read_compressed.hh	/^    scoped_ptr<ReadBase> internal_;$/;"	m	class:util::ReadCompressed
interpolate	lm/interpolate/arpa_to_stream.cc	/^namespace lm { namespace interpolate {$/;"	n	namespace:lm	file:
interpolate	lm/interpolate/arpa_to_stream.hh	/^namespace interpolate {$/;"	n	namespace:lm
interpolate_unigrams	lm/builder/initial_probabilities.hh	/^  bool interpolate_unigrams;$/;"	m	struct:lm::builder::InitialProbabilitiesConfig
interpolate_unigrams_	lm/builder/initial_probabilities.cc	/^    bool interpolate_unigrams_;$/;"	m	class:lm::builder::__anon7::MergeRight	file:
invalid_	util/probing_hash_table.hh	/^    Key invalid_;$/;"	m	class:util::ProbingHashTable
isDigit	util/double-conversion/double-conversion.cc	/^static bool isDigit(int x, int radix) {$/;"	f	namespace:double_conversion
is_empty	util/double-conversion/utils.h	/^  bool is_empty() const { return length_ == 0; }$/;"	f	class:double_conversion::Vector
is_finalized	util/double-conversion/utils.h	/^  bool is_finalized() const { return position_ < 0; }$/;"	f	class:double_conversion::StringBuilder
it_	lm/search_trie.cc	/^    float *it_[KENLM_MAX_ORDER - 1];$/;"	m	class:lm::ngram::trie::__anon20::SRISucks	file:
iterator	util/string_piece.hh	/^  typedef const char* iterator;$/;"	t	class:StringPiece
iterator_category	util/proxy_iterator.hh	/^    typedef std::random_access_iterator_tag iterator_category;$/;"	t	class:util::ProxyIterator
junk_string_value_	util/double-conversion/double-conversion.h	/^  const double junk_string_value_;$/;"	m	class:double_conversion::StringToDoubleConverter
kARPASpaces	lm/read_arpa.cc	/^const bool kARPASpaces[256] = {0,0,0,0,0,0,0,0,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0};$/;"	m	namespace:lm	file:
kArrayAdd	lm/model_type.hh	/^const static ModelType kArrayAdd = static_cast<ModelType>(ARRAY_TRIE - TRIE);$/;"	m	namespace:lm::ngram
kArrayBhikshaVersion	lm/bhiksha.cc	/^const uint8_t kArrayBhikshaVersion = 0;$/;"	m	namespace:lm::ngram::trie	file:
kBOS	lm/builder/ngram.hh	/^const WordIndex kBOS = 1;$/;"	m	namespace:lm::builder
kBadProb	lm/search_trie.cc	/^const float kBadProb = std::numeric_limits<float>::infinity();$/;"	m	namespace:lm::ngram::trie::__anon20	file:
kBadSize	util/file.hh	/^const uint64_t kBadSize = (uint64_t)-1;$/;"	m	namespace:util
kBase10MaximalLength	util/double-conversion/double-conversion.h	/^  static const int kBase10MaximalLength = 17;$/;"	m	class:double_conversion::DoubleToStringConverter
kBigitCapacity	util/double-conversion/bignum.h	/^  static const int kBigitCapacity = kMaxSignificantBits \/ kBigitSize;$/;"	m	class:double_conversion::Bignum
kBigitMask	util/double-conversion/bignum.h	/^  static const Chunk kBigitMask = (1 << kBigitSize) - 1;$/;"	m	class:double_conversion::Bignum
kBigitSize	util/double-conversion/bignum.h	/^  static const int kBigitSize = 28;$/;"	m	class:double_conversion::Bignum
kBinaryMagic	lm/read_arpa.cc	/^const char kBinaryMagic[] = "mmap lm http:\/\/kheafield.com\/code";$/;"	m	namespace:lm::__anon18	file:
kCachedPowers	util/double-conversion/cached-powers.cc	/^static const CachedPower kCachedPowers[] = {$/;"	m	namespace:double_conversion	file:
kCachedPowersLength	util/double-conversion/cached-powers.cc	/^static const int kCachedPowersLength = ARRAY_SIZE(kCachedPowers);$/;"	m	namespace:double_conversion	file:
kCachedPowersOffset	util/double-conversion/cached-powers.cc	/^static const int kCachedPowersOffset = 348;  \/\/ -1 * the first decimal_exponent.$/;"	m	namespace:double_conversion	file:
kCharSize	util/double-conversion/utils.h	/^static const int kCharSize = sizeof(char);$/;"	m	namespace:double_conversion
kChunkSize	util/double-conversion/bignum.h	/^  static const int kChunkSize = sizeof(Chunk) * 8;$/;"	m	class:double_conversion::Bignum
kD_1_LOG2_10	util/double-conversion/cached-powers.cc	/^static const double kD_1_LOG2_10 = 0.30102999566398114;  \/\/  1 \/ lg(10)$/;"	m	namespace:double_conversion	file:
kDecimalExponentDistance	util/double-conversion/cached-powers.cc	/^const int PowersOfTenCache::kDecimalExponentDistance = 8;$/;"	m	class:double_conversion::PowersOfTenCache	file:
kDecimalExponentDistance	util/double-conversion/cached-powers.h	/^  static const int kDecimalExponentDistance;$/;"	m	class:double_conversion::PowersOfTenCache
kDenormalExponent	util/double-conversion/ieee.h	/^  static const int kDenormalExponent = -kExponentBias + 1;$/;"	m	class:double_conversion::Double
kDenormalExponent	util/double-conversion/ieee.h	/^  static const int kDenormalExponent = -kExponentBias + 1;$/;"	m	class:double_conversion::Single
kDifferentRest	lm/search_hashed.hh	/^    static const bool kDifferentRest = Value::kDifferentRest;$/;"	m	class:lm::ngram::detail::HashedSearch
kDifferentRest	lm/search_trie.hh	/^    static const bool kDifferentRest = false;$/;"	m	class:lm::ngram::trie::TrieSearch
kDifferentRest	lm/value.hh	/^  const static bool kDifferentRest = false;$/;"	m	struct:lm::ngram::BackoffValue
kDifferentRest	lm/value.hh	/^  const static bool kDifferentRest = true;$/;"	m	struct:lm::ngram::RestValue
kDisplayCharacters	util/stream/multi_progress.cc	/^const char kDisplayCharacters[] = "-+*#0123456789";$/;"	m	namespace:util::stream::__anon43	file:
kDoubleChunkSize	util/double-conversion/bignum.h	/^  static const int kDoubleChunkSize = sizeof(DoubleChunk) * 8;$/;"	m	class:double_conversion::Bignum
kDoubleSignificandSize	util/double-conversion/fixed-dtoa.cc	/^static const int kDoubleSignificandSize = 53;  \/\/ Includes the hidden bit.$/;"	m	namespace:double_conversion	file:
kEOS	lm/builder/ngram.hh	/^const WordIndex kEOS = 2;$/;"	m	namespace:lm::builder
kExactPowersOfTenSize	util/double-conversion/strtod.cc	/^static const int kExactPowersOfTenSize = ARRAY_SIZE(exact_powers_of_ten);$/;"	m	namespace:double_conversion	file:
kExponentBias	util/double-conversion/ieee.h	/^  static const int kExponentBias = 0x3FF + kPhysicalSignificandSize;$/;"	m	class:double_conversion::Double
kExponentBias	util/double-conversion/ieee.h	/^  static const int kExponentBias = 0x7F + kPhysicalSignificandSize;$/;"	m	class:double_conversion::Single
kExponentMask	util/double-conversion/ieee.h	/^  static const uint32_t kExponentMask = 0x7F800000;$/;"	m	class:double_conversion::Single
kExponentMask	util/double-conversion/ieee.h	/^  static const uint64_t kExponentMask = UINT64_2PART_C(0x7FF00000, 00000000);$/;"	m	class:double_conversion::Double
kExtensionBackoff	lm/blank.hh	/^const float kExtensionBackoff = 0.0;$/;"	m	namespace:lm::ngram
kExtensionQuant	lm/blank.hh	/^const uint64_t kExtensionQuant = 1;$/;"	m	namespace:lm::ngram
kFastDtoaMaximalLength	util/double-conversion/fast-dtoa.h	/^static const int kFastDtoaMaximalLength = 17;$/;"	m	namespace:double_conversion
kFastDtoaMaximalSingleLength	util/double-conversion/fast-dtoa.h	/^static const int kFastDtoaMaximalSingleLength = 9;$/;"	m	namespace:double_conversion
kFileFlags	util/mmap.cc	/^const int kFileFlags =$/;"	m	namespace:util	file:
kHiddenBit	util/double-conversion/ieee.h	/^  static const uint32_t kHiddenBit = 0x00800000;$/;"	m	class:double_conversion::Single
kHiddenBit	util/double-conversion/ieee.h	/^  static const uint64_t kHiddenBit = UINT64_2PART_C(0x00100000, 00000000);$/;"	m	class:double_conversion::Double
kInfinity	util/double-conversion/ieee.h	/^  static const uint32_t kInfinity = 0x7F800000;$/;"	m	class:double_conversion::Single
kInfinity	util/double-conversion/ieee.h	/^  static const uint64_t kInfinity = UINT64_2PART_C(0x7FF00000, 00000000);$/;"	m	class:double_conversion::Double
kInputBuffer	util/read_compressed.cc	/^static const std::size_t kInputBuffer = 16384;$/;"	m	namespace:util::__anon41	file:
kInvalidOffset	lm/binary_format.hh	/^    static const uint64_t kInvalidOffset = (uint64_t)-1;$/;"	m	class:lm::ngram::BinaryFormat
kInvalidSize	lm/binary_format.cc	/^const std::size_t kInvalidSize = static_cast<std::size_t>(-1);$/;"	m	namespace:lm::ngram	file:
kMagicBeforeVersion	lm/binary_format.cc	/^const char kMagicBeforeVersion[] = "mmap lm http:\/\/kheafield.com\/code format version";$/;"	m	namespace:lm::ngram::__anon3	file:
kMagicBytes	lm/binary_format.cc	/^const char kMagicBytes[] = "mmap lm http:\/\/kheafield.com\/code format version 5\\n\\0";$/;"	m	namespace:lm::ngram::__anon3	file:
kMagicIncomplete	lm/binary_format.cc	/^const char kMagicIncomplete[] = "mmap lm http:\/\/kheafield.com\/code incomplete\\n";$/;"	m	namespace:lm::ngram::__anon3	file:
kMagicSize	util/read_compressed.hh	/^    static const std::size_t kMagicSize = 6;$/;"	m	class:util::ReadCompressed
kMagicVersion	lm/binary_format.cc	/^const long int kMagicVersion = 5;$/;"	m	namespace:lm::ngram::__anon3	file:
kMarkEvenLower	lm/value_build.hh	/^    const static bool kMarkEvenLower = false;$/;"	m	class:lm::ngram::LowerRestBuild
kMarkEvenLower	lm/value_build.hh	/^    const static bool kMarkEvenLower = false;$/;"	m	class:lm::ngram::NoRestBuild
kMarkEvenLower	lm/value_build.hh	/^    const static bool kMarkEvenLower = true;$/;"	m	class:lm::ngram::MaxRestBuild
kMask32	util/double-conversion/fixed-dtoa.cc	/^  static const uint64_t kMask32 = 0xFFFFFFFF;$/;"	m	class:double_conversion::UInt128	file:
kMatchOffset	lm/builder/sort.hh	/^    static const unsigned kMatchOffset = 0;$/;"	m	class:lm::builder::PrefixOrder
kMatchOffset	lm/builder/sort.hh	/^    static const unsigned kMatchOffset = 1;$/;"	m	class:lm::builder::SuffixOrder
kMaxDWORD	util/file.cc	/^const std::size_t kMaxDWORD = static_cast<std::size_t>(4294967295UL);$/;"	m	namespace:util::__anon31	file:
kMaxDecimalExponent	util/double-conversion/cached-powers.cc	/^const int PowersOfTenCache::kMaxDecimalExponent = 340;$/;"	m	class:double_conversion::PowersOfTenCache	file:
kMaxDecimalExponent	util/double-conversion/cached-powers.h	/^  static const int kMaxDecimalExponent;$/;"	m	class:double_conversion::PowersOfTenCache
kMaxDecimalPower	util/double-conversion/strtod.cc	/^static const int kMaxDecimalPower = 309;$/;"	m	namespace:double_conversion	file:
kMaxExactDoubleIntegerDecimalDigits	util/double-conversion/strtod.cc	/^static const int kMaxExactDoubleIntegerDecimalDigits = 15;$/;"	m	namespace:double_conversion	file:
kMaxExponent	util/double-conversion/ieee.h	/^  static const int kMaxExponent = 0x7FF - kExponentBias;$/;"	m	class:double_conversion::Double
kMaxExponent	util/double-conversion/ieee.h	/^  static const int kMaxExponent = 0xFF - kExponentBias;$/;"	m	class:double_conversion::Single
kMaxExponentialDigits	util/double-conversion/double-conversion.h	/^  static const int kMaxExponentialDigits = 120;$/;"	m	class:double_conversion::DoubleToStringConverter
kMaxFixedDigitsAfterPoint	util/double-conversion/double-conversion.h	/^  static const int kMaxFixedDigitsAfterPoint = 60;$/;"	m	class:double_conversion::DoubleToStringConverter
kMaxFixedDigitsBeforePoint	util/double-conversion/double-conversion.h	/^  static const int kMaxFixedDigitsBeforePoint = 60;$/;"	m	class:double_conversion::DoubleToStringConverter
kMaxPrecisionDigits	util/double-conversion/double-conversion.h	/^  static const int kMaxPrecisionDigits = 120;$/;"	m	class:double_conversion::DoubleToStringConverter
kMaxSignificantBits	util/double-conversion/bignum.h	/^  static const int kMaxSignificantBits = 3584;$/;"	m	class:double_conversion::Bignum
kMaxSignificantDecimalDigits	util/double-conversion/strtod.cc	/^static const int kMaxSignificantDecimalDigits = 780;$/;"	m	namespace:double_conversion	file:
kMaxSignificantDigits	util/double-conversion/double-conversion.cc	/^const int kMaxSignificantDigits = 772;$/;"	m	namespace:double_conversion	file:
kMaxUint64	util/double-conversion/strtod.cc	/^static const uint64_t kMaxUint64 = UINT64_2PART_C(0xFFFFFFFF, FFFFFFFF);$/;"	m	namespace:double_conversion	file:
kMaxUint64DecimalDigits	util/double-conversion/strtod.cc	/^static const int kMaxUint64DecimalDigits = 19;$/;"	m	namespace:double_conversion	file:
kMaxWordIndex	lm/word_index.hh	/^const WordIndex kMaxWordIndex = UINT_MAX;$/;"	m	namespace:lm
kMaximalTargetExponent	util/double-conversion/fast-dtoa.cc	/^static const int kMaximalTargetExponent = -32;$/;"	m	namespace:double_conversion	file:
kMinDecimalExponent	util/double-conversion/cached-powers.cc	/^const int PowersOfTenCache::kMinDecimalExponent = -348;$/;"	m	class:double_conversion::PowersOfTenCache	file:
kMinDecimalExponent	util/double-conversion/cached-powers.h	/^  static const int kMinDecimalExponent;$/;"	m	class:double_conversion::PowersOfTenCache
kMinDecimalPower	util/double-conversion/strtod.cc	/^static const int kMinDecimalPower = -324;$/;"	m	namespace:double_conversion	file:
kMinPrecisionDigits	util/double-conversion/double-conversion.h	/^  static const int kMinPrecisionDigits = 1;$/;"	m	class:double_conversion::DoubleToStringConverter
kMinimalTargetExponent	util/double-conversion/fast-dtoa.cc	/^static const int kMinimalTargetExponent = -60;$/;"	m	namespace:double_conversion	file:
kModelNames	lm/binary_format.cc	/^const char *kModelNames[6] = {"probing hash tables", "probing hash tables with rest costs", "trie", "trie with quantization", "trie with array-compressed pointers", "trie with quantization and array-compressed pointers"};$/;"	m	namespace:lm::ngram	file:
kModelType	lm/model.cc	/^template <class Search, class VocabularyT> const ModelType GenericModel<Search, VocabularyT>::kModelType = Search::kModelType;$/;"	m	class:lm::ngram::detail::GenericModel	file:
kModelType	lm/model.hh	/^    static const ModelType kModelType;$/;"	m	class:lm::ngram::detail::GenericModel
kModelType	lm/search_hashed.hh	/^    static const ModelType kModelType = Value::kProbingModelType;$/;"	m	class:lm::ngram::detail::HashedSearch
kModelType	lm/search_trie.hh	/^    static const ModelType kModelType = static_cast<ModelType>(TRIE_SORTED + Quant::kModelTypeAdd + Bhiksha::kModelTypeAdd);$/;"	m	class:lm::ngram::trie::TrieSearch
kModelTypeAdd	lm/bhiksha.hh	/^    static const ModelType kModelTypeAdd = kArrayAdd;$/;"	m	class:lm::ngram::trie::ArrayBhiksha
kModelTypeAdd	lm/bhiksha.hh	/^    static const ModelType kModelTypeAdd = static_cast<ModelType>(0);$/;"	m	class:lm::ngram::trie::DontBhiksha
kModelTypeAdd	lm/quantize.hh	/^    static const ModelType kModelTypeAdd = kQuantAdd;$/;"	m	class:lm::ngram::SeparatelyQuantize
kModelTypeAdd	lm/quantize.hh	/^    static const ModelType kModelTypeAdd = static_cast<ModelType>(0);$/;"	m	class:lm::ngram::DontQuantize
kNaN	util/double-conversion/ieee.h	/^  static const uint32_t kNaN = 0x7FC00000;$/;"	m	class:double_conversion::Single
kNaN	util/double-conversion/ieee.h	/^  static const uint64_t kNaN = UINT64_2PART_C(0x7FF80000, 00000000);$/;"	m	class:double_conversion::Double
kNoExtensionBackoff	lm/blank.hh	/^const float kNoExtensionBackoff = -0.0;$/;"	m	namespace:lm::ngram
kNoExtensionQuant	lm/blank.hh	/^const uint64_t kNoExtensionQuant = 0;$/;"	m	namespace:lm::ngram
kPhysicalSignificandSize	util/double-conversion/ieee.h	/^  static const int kPhysicalSignificandSize = 23;  \/\/ Excludes the hidden bit.$/;"	m	class:double_conversion::Single
kPhysicalSignificandSize	util/double-conversion/ieee.h	/^  static const int kPhysicalSignificandSize = 52;  \/\/ Excludes the hidden bit.$/;"	m	class:double_conversion::Double
kProbingModelType	lm/value.hh	/^  static const ModelType kProbingModelType = PROBING;$/;"	m	struct:lm::ngram::BackoffValue
kProbingModelType	lm/value.hh	/^  static const ModelType kProbingModelType = REST_PROBING;$/;"	m	struct:lm::ngram::RestValue
kProbingMultiplier	lm/builder/corpus_count.cc	/^const float kProbingMultiplier = 1.5;$/;"	m	namespace:lm::builder::__anon5	file:
kProbingVocabularyVersion	lm/vocab.cc	/^const unsigned int kProbingVocabularyVersion = 0;$/;"	m	namespace:lm::ngram::__anon25	file:
kProgressBanner	util/ersatz_progress.cc	/^const char kProgressBanner[] = "----5---10---15---20---25---30---35---40---45---50---55---60---65---70---75---80---85---90---95--100\\n";$/;"	m	namespace:util	file:
kQuantAdd	lm/model_type.hh	/^const static ModelType kQuantAdd = static_cast<ModelType>(QUANT_TRIE - TRIE);$/;"	m	namespace:lm::ngram
kRecordStart	util/usage.cc	/^const RecordStart kRecordStart;$/;"	m	namespace:util::__anon45	file:
kRecycle	util/stream/chain.cc	/^const Recycler kRecycle = Recycler();$/;"	m	namespace:util::stream	file:
kSeparatelyQuantizeVersion	lm/quantize.cc	/^const char kSeparatelyQuantizeVersion = 2;$/;"	m	namespace:lm::ngram::__anon17	file:
kSignBit	util/bit_packing.hh	/^const uint32_t kSignBit = 0x80000000;$/;"	m	namespace:util
kSignMask	util/double-conversion/ieee.h	/^  static const uint32_t kSignMask = 0x80000000;$/;"	m	class:double_conversion::Single
kSignMask	util/double-conversion/ieee.h	/^  static const uint64_t kSignMask = UINT64_2PART_C(0x80000000, 00000000);$/;"	m	class:double_conversion::Double
kSignificandMask	util/double-conversion/ieee.h	/^  static const uint32_t kSignificandMask = 0x007FFFFF;$/;"	m	class:double_conversion::Single
kSignificandMask	util/double-conversion/ieee.h	/^  static const uint64_t kSignificandMask = UINT64_2PART_C(0x000FFFFF, FFFFFFFF);$/;"	m	class:double_conversion::Double
kSignificandSize	util/double-conversion/diy-fp.h	/^  static const int kSignificandSize = 64;$/;"	m	class:double_conversion::DiyFp
kSignificandSize	util/double-conversion/ieee.h	/^  static const int kSignificandSize = 24;$/;"	m	class:double_conversion::Single
kSignificandSize	util/double-conversion/ieee.h	/^  static const int kSignificandSize = 53;$/;"	m	class:double_conversion::Double
kSmallPowersOfTen	util/double-conversion/fast-dtoa.cc	/^static unsigned int const kSmallPowersOfTen[] =$/;"	m	namespace:double_conversion	file:
kSpaces	util/file_piece.cc	/^const bool kSpaces[256] = {0,0,0,0,0,0,0,0,0,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0};$/;"	m	namespace:util	file:
kTrain	lm/quantize.hh	/^    static const bool kTrain = false;$/;"	m	class:lm::ngram::DontQuantize
kTrain	lm/quantize.hh	/^    static const bool kTrain = true;$/;"	m	class:lm::ngram::SeparatelyQuantize
kUNK	lm/builder/ngram.hh	/^const WordIndex kUNK = 0;$/;"	m	namespace:lm::builder
kUint64MSB	util/double-conversion/diy-fp.h	/^  static const uint64_t kUint64MSB = UINT64_2PART_C(0x80000000, 00000000);$/;"	m	class:double_conversion::DiyFp
kUnknownCapHash	lm/vocab.cc	/^const uint64_t kUnknownCapHash = detail::HashForVocab("<UNK>", 5);$/;"	m	namespace:lm::ngram::__anon24	file:
kUnknownHash	lm/vocab.cc	/^const uint64_t kUnknownHash = detail::HashForVocab("<unk>", 5);$/;"	m	namespace:lm::ngram::__anon24	file:
kVersion	lm/model.hh	/^    static const unsigned int kVersion = Search::kVersion;$/;"	m	class:lm::ngram::detail::GenericModel
kVersion	lm/search_hashed.hh	/^    static const unsigned int kVersion = 0;$/;"	m	class:lm::ngram::detail::HashedSearch
kVersion	lm/search_trie.hh	/^    static const unsigned int kVersion = 1;$/;"	m	class:lm::ngram::trie::TrieSearch
kWidth	util/ersatz_progress.cc	/^namespace { const unsigned char kWidth = 100; }$/;"	m	namespace:util::__anon28	file:
kWidth	util/stream/multi_progress.hh	/^    static const unsigned char kWidth = 100;$/;"	m	class:util::stream::MultiProgress
key	lm/builder/corpus_count.cc	/^  Key key;$/;"	m	struct:lm::builder::__anon5::DedupeEntry	file:
key	lm/builder/corpus_count.cc	/^  uint64_t key;$/;"	m	struct:lm::builder::__anon5::VocabEntry	file:
key	lm/search_hashed.hh	/^  uint64_t key;$/;"	m	struct:lm::ngram::detail::ProbEntry
key	lm/value.hh	/^    Key key;$/;"	m	struct:lm::ngram::RestValue::ProbingEntry
key	lm/value.hh	/^    uint64_t key;$/;"	m	struct:lm::ngram::BackoffValue::ProbingEntry
key	lm/vocab.hh	/^  uint64_t key;$/;"	m	struct:lm::ngram::ProbingVocabularyEntry
key	util/joint_sort.hh	/^      typename std::iterator_traits<KeyIter>::value_type key;$/;"	m	struct:util::detail::JointProxy::__anon36
key_	util/joint_sort.hh	/^    KeyIter key_;$/;"	m	class:util::detail::JointIter
key_bits_	lm/trie.cc	/^    const uint8_t key_bits_, total_bits_;$/;"	m	class:lm::ngram::trie::__anon21::KeyAccessor	file:
key_mask_	lm/trie.cc	/^    const WordIndex key_mask_;$/;"	m	class:lm::ngram::trie::__anon21::KeyAccessor	file:
lMEMORYSTATUSEX	util/usage.cc	/^} lMEMORYSTATUSEX;$/;"	t	typeref:struct:__anon44	file:
last	util/double-conversion/utils.h	/^  T& last() { return start_[length_ - 1]; }$/;"	f	class:double_conversion::Vector
last_	lm/filter/format.hh	/^    StringPiece last_;$/;"	m	class:lm::MultipleOutputBuffer
last_	lm/filter/phrase.cc	/^    const Sentence *last_;$/;"	m	class:lm::phrase::detail::Arc	file:
last_space_	util/file_piece.hh	/^    const char *position_, *last_space_, *position_end_;$/;"	m	class:util::FilePiece
left	lm/filter/phrase.hh	/^      std::vector<unsigned int> substring, left, right, phrase;$/;"	m	struct:lm::phrase::Substrings::SentenceRelation
left	lm/state.hh	/^  Left left;$/;"	m	struct:lm::ngram::ChartState
left_done_	lm/left.hh	/^    bool left_done_;$/;"	m	class:lm::ngram::RuleScore
length	lm/state.hh	/^    unsigned char length;$/;"	m	class:lm::ngram::State
length	lm/state.hh	/^  unsigned char length;$/;"	m	struct:lm::ngram::Left
length	util/double-conversion/utils.h	/^  int length() const { return length_; }$/;"	f	class:double_conversion::Vector
length	util/stream/sort.hh	/^      uint64_t length;$/;"	m	struct:util::stream::Offsets::Entry
length	util/string_piece.hh	/^  size_type length() const { return length_; }$/;"	f	class:StringPiece
length_	util/double-conversion/utils.h	/^  int length_;$/;"	m	class:double_conversion::Vector
length_	util/string_piece.hh	/^  size_type     length_;$/;"	m	class:StringPiece
less_	util/joint_sort.hh	/^    const Less less_;$/;"	m	class:util::detail::LessWrapper
letters	util/file.cc	/^static const char letters[] =$/;"	m	namespace:util	file:
line	lm/filter/format.hh	/^      StringPiece line;$/;"	m	struct:lm::MultipleOutputBuffer::Annotated
line	lm/filter/format.hh	/^      std::string line;$/;"	m	struct:lm::InputBuffer::Line
line_	lm/filter/vocab.hh	/^        const StringPiece &line_;$/;"	m	class:lm::vocab::Multiple::Callback
lines_	lm/filter/format.hh	/^    std::vector<Line> lines_;$/;"	m	class:lm::InputBuffer
lines_	lm/filter/format.hh	/^    std::vector<StringPiece> lines_;$/;"	m	class:lm::BinaryOutputBuffer
lm	lm/bhiksha.cc	/^namespace lm {$/;"	n	file:
lm	lm/bhiksha.hh	/^namespace lm {$/;"	n
lm	lm/binary_format.cc	/^namespace lm {$/;"	n	file:
lm	lm/binary_format.hh	/^namespace lm {$/;"	n
lm	lm/blank.hh	/^namespace lm {$/;"	n
lm	lm/builder/adjust_counts.cc	/^namespace lm { namespace builder {$/;"	n	file:
lm	lm/builder/adjust_counts.hh	/^namespace lm {$/;"	n
lm	lm/builder/corpus_count.cc	/^namespace lm {$/;"	n	file:
lm	lm/builder/corpus_count.hh	/^namespace lm {$/;"	n
lm	lm/builder/discount.hh	/^namespace lm {$/;"	n
lm	lm/builder/hash_gamma.hh	/^namespace lm { namespace builder {$/;"	n
lm	lm/builder/initial_probabilities.cc	/^namespace lm { namespace builder {$/;"	n	file:
lm	lm/builder/initial_probabilities.hh	/^namespace lm {$/;"	n
lm	lm/builder/interpolate.cc	/^namespace lm { namespace builder {$/;"	n	file:
lm	lm/builder/interpolate.hh	/^namespace lm { namespace builder {$/;"	n
lm	lm/builder/joint_order.hh	/^namespace lm { namespace builder {$/;"	n
lm	lm/builder/ngram.hh	/^namespace lm {$/;"	n
lm	lm/builder/ngram_stream.hh	/^namespace lm { namespace builder {$/;"	n
lm	lm/builder/output.cc	/^namespace lm { namespace builder {$/;"	n	file:
lm	lm/builder/output.hh	/^namespace lm { namespace builder {$/;"	n
lm	lm/builder/pipeline.cc	/^namespace lm { namespace builder {$/;"	n	file:
lm	lm/builder/pipeline.hh	/^namespace lm { namespace builder {$/;"	n
lm	lm/builder/print.cc	/^namespace lm { namespace builder {$/;"	n	file:
lm	lm/builder/print.hh	/^namespace lm { namespace builder {$/;"	n
lm	lm/builder/sort.hh	/^namespace lm {$/;"	n
lm	lm/config.cc	/^namespace lm {$/;"	n	file:
lm	lm/config.hh	/^namespace lm {$/;"	n
lm	lm/enumerate_vocab.hh	/^namespace lm {$/;"	n
lm	lm/facade.hh	/^namespace lm {$/;"	n
lm	lm/filter/arpa_io.cc	/^namespace lm {$/;"	n	file:
lm	lm/filter/arpa_io.hh	/^namespace lm {$/;"	n
lm	lm/filter/count_io.hh	/^namespace lm {$/;"	n
lm	lm/filter/format.hh	/^namespace lm {$/;"	n
lm	lm/filter/phrase.cc	/^namespace lm {$/;"	n	file:
lm	lm/filter/phrase.hh	/^namespace lm {$/;"	n
lm	lm/filter/thread.hh	/^namespace lm {$/;"	n
lm	lm/filter/vocab.cc	/^namespace lm {$/;"	n	file:
lm	lm/filter/vocab.hh	/^namespace lm {$/;"	n
lm	lm/filter/wrapper.hh	/^namespace lm {$/;"	n
lm	lm/interpolate/arpa_to_stream.cc	/^namespace lm { namespace interpolate {$/;"	n	file:
lm	lm/interpolate/arpa_to_stream.hh	/^namespace lm {$/;"	n
lm	lm/left.hh	/^namespace lm {$/;"	n
lm	lm/lm_exception.cc	/^namespace lm {$/;"	n	file:
lm	lm/lm_exception.hh	/^namespace lm {$/;"	n
lm	lm/model.cc	/^namespace lm {$/;"	n	file:
lm	lm/model.hh	/^namespace lm {$/;"	n
lm	lm/model_type.hh	/^namespace lm {$/;"	n
lm	lm/neural/wordvecs.cc	/^namespace lm { namespace neural {$/;"	n	file:
lm	lm/neural/wordvecs.hh	/^namespace lm {$/;"	n
lm	lm/ngram_query.hh	/^namespace lm {$/;"	n
lm	lm/partial.hh	/^namespace lm {$/;"	n
lm	lm/quantize.cc	/^namespace lm {$/;"	n	file:
lm	lm/quantize.hh	/^namespace lm {$/;"	n
lm	lm/read_arpa.cc	/^namespace lm {$/;"	n	file:
lm	lm/read_arpa.hh	/^namespace lm {$/;"	n
lm	lm/return.hh	/^namespace lm {$/;"	n
lm	lm/search_hashed.cc	/^namespace lm {$/;"	n	file:
lm	lm/search_hashed.hh	/^namespace lm {$/;"	n
lm	lm/search_trie.cc	/^namespace lm {$/;"	n	file:
lm	lm/search_trie.hh	/^namespace lm {$/;"	n
lm	lm/sizes.cc	/^namespace lm {$/;"	n	file:
lm	lm/sizes.hh	/^namespace lm { namespace ngram {$/;"	n
lm	lm/state.hh	/^namespace lm {$/;"	n
lm	lm/trie.cc	/^namespace lm {$/;"	n	file:
lm	lm/trie.hh	/^namespace lm {$/;"	n
lm	lm/trie_sort.cc	/^namespace lm {$/;"	n	file:
lm	lm/trie_sort.hh	/^namespace lm {$/;"	n
lm	lm/value.hh	/^namespace lm {$/;"	n
lm	lm/value_build.cc	/^namespace lm { $/;"	n	file:
lm	lm/value_build.hh	/^namespace lm {$/;"	n
lm	lm/virtual_interface.cc	/^namespace lm {$/;"	n	file:
lm	lm/virtual_interface.hh	/^namespace lm {$/;"	n
lm	lm/vocab.cc	/^namespace lm {$/;"	n	file:
lm	lm/vocab.hh	/^namespace lm {$/;"	n
lm	lm/weights.hh	/^namespace lm {$/;"	n
lm	lm/word_index.hh	/^namespace lm {$/;"	n
lm	lm/wrappers/nplm.cc	/^namespace lm {$/;"	n	file:
lm	lm/wrappers/nplm.hh	/^namespace lm {$/;"	n
load_method	lm/config.hh	/^  util::LoadMethod load_method;$/;"	m	struct:lm::ngram::Config
load_method_	lm/binary_format.hh	/^    util::LoadMethod load_method_;$/;"	m	class:lm::ngram::BinaryFormat
local_read_	lm/filter/thread.hh	/^    std::stack<Batch*> local_read_;$/;"	m	class:lm::Controller
log_	util/stream/sort.hh	/^    int log_;$/;"	m	class:util::stream::Offsets
longest_	lm/quantize.hh	/^    Bins longest_;$/;"	m	class:lm::ngram::SeparatelyQuantize
longest_	lm/search_hashed.hh	/^    Longest longest_;$/;"	m	class:lm::ngram::detail::HashedSearch
longest_	lm/search_trie.cc	/^    BitPackedLongest &longest_;$/;"	m	class:lm::ngram::trie::__anon20::WriteEntries	file:
longest_	lm/search_trie.hh	/^    Longest longest_;$/;"	m	class:lm::ngram::trie::TrieSearch
lookup_	lm/vocab.hh	/^    Lookup lookup_;$/;"	m	class:lm::ngram::GrowableVocab
lookup_	lm/vocab.hh	/^    Lookup lookup_;$/;"	m	class:lm::ngram::ProbingVocabulary
low_bits_	util/double-conversion/fixed-dtoa.cc	/^  uint64_t low_bits_;$/;"	m	class:double_conversion::UInt128	file:
m_backoffs	lm/model.hh	/^    float  *m_backoffs;$/;"	m	class:lm::ngram::detail::GenericModel
m_pron2wordIndex	lm/model.hh	/^    PronId *m_pron2wordIndex;$/;"	m	class:lm::ngram::detail::GenericModel
m_unigrams	lm/model.hh	/^    float  *m_unigrams;$/;"	m	class:lm::ngram::detail::GenericModel
magic	lm/binary_format.cc	/^  char magic[ALIGN8(sizeof(kMagicBytes))];$/;"	m	struct:lm::ngram::__anon3::Sanity	file:
magic	lm/binary_format.cc	/^  char magic[sizeof(kMagicBytes)];$/;"	m	struct:lm::ngram::__anon3::OldSanity	file:
make_full	lm/partial.hh	/^  bool make_full;$/;"	m	struct:lm::ngram::ExtendReturn
map_	lm/builder/print.hh	/^    std::vector<const char*> map_;$/;"	m	class:lm::builder::VocabReconstitute
mapped_offset_	util/file_piece.hh	/^    uint64_t mapped_offset_;$/;"	m	class:util::FilePiece
mapping_	lm/binary_format.hh	/^    util::scoped_memory mapping_;$/;"	m	class:lm::ngram::BinaryFormat
mask	util/bit_packing.hh	/^  uint64_t mask;$/;"	m	struct:util::BitsMask
mask_	lm/quantize.hh	/^        uint64_t mask_;$/;"	m	class:lm::ngram::SeparatelyQuantize::Bins
master_	lm/builder/output.hh	/^    const Output *master_;$/;"	m	class:lm::builder::OutputHook
max	util/string_piece.hh	91;"	d
max_leading_padding_zeroes_in_precision_mode_	util/double-conversion/double-conversion.h	/^  const int max_leading_padding_zeroes_in_precision_mode_;$/;"	m	class:double_conversion::DoubleToStringConverter
max_size	util/string_piece.hh	/^  size_type max_size() const { return length_; }$/;"	f	class:StringPiece
max_trailing_padding_zeroes_in_precision_mode_	util/double-conversion/double-conversion.h	/^  const int max_trailing_padding_zeroes_in_precision_mode_;$/;"	m	class:double_conversion::DoubleToStringConverter
max_vocab_	lm/trie.hh	/^    uint64_t insert_index_, max_vocab_;$/;"	m	class:lm::ngram::trie::BitPacked
max_word_index	lm/binary_format.cc	/^  WordIndex one_word_index, max_word_index, padding_to_8;$/;"	m	struct:lm::ngram::__anon3::Sanity	file:
max_word_index	lm/binary_format.cc	/^  WordIndex one_word_index, max_word_index;$/;"	m	struct:lm::ngram::__anon3::OldSanity	file:
mem_	util/mmap.hh	/^    scoped_memory mem_;$/;"	m	class:util::Rolling
mem_	util/probing_hash_table.hh	/^    util::scoped_malloc mem_;$/;"	m	class:util::AutoProbing
mem_	util/stream/block.hh	/^    void *mem_;$/;"	m	class:util::stream::Block
memory_	lm/builder/print.hh	/^    util::scoped_memory memory_;$/;"	m	class:lm::builder::VocabReconstitute
memory_	util/stream/chain.hh	/^    scoped_malloc memory_;$/;"	m	class:util::stream::Chain
memory_search_	lm/binary_format.hh	/^    util::scoped_memory memory_vocab_, memory_search_;$/;"	m	class:lm::ngram::BinaryFormat
memory_vocab_	lm/binary_format.hh	/^    util::scoped_memory memory_vocab_, memory_search_;$/;"	m	class:lm::ngram::BinaryFormat
messages	lm/config.hh	/^  std::ostream *messages;$/;"	m	struct:lm::ngram::Config
messages_	lm/search_trie.cc	/^    BackoffMessages messages_[KENLM_MAX_ORDER - 1];$/;"	m	class:lm::ngram::trie::__anon20::SRISucks	file:
middle_	lm/search_hashed.hh	/^    std::vector<Middle> middle_;$/;"	m	class:lm::ngram::detail::HashedSearch
middle_	lm/search_trie.cc	/^    BitPackedMiddle<Bhiksha> *const middle_;$/;"	m	class:lm::ngram::trie::__anon20::WriteEntries	file:
middle_begin_	lm/search_trie.hh	/^    Middle *middle_begin_, *middle_end_;$/;"	m	class:lm::ngram::trie::TrieSearch
middle_end_	lm/search_trie.hh	/^    Middle *middle_begin_, *middle_end_;$/;"	m	class:lm::ngram::trie::TrieSearch
min	util/string_piece.hh	92;"	d
minimum_block	lm/builder/pipeline.hh	/^  std::size_t minimum_block;$/;"	m	struct:lm::builder::PipelineConfig
minus_half_f	lm/binary_format.cc	/^  float zero_f, one_f, minus_half_f;$/;"	m	struct:lm::ngram::__anon3::OldSanity	file:
minus_half_f	lm/binary_format.cc	/^  float zero_f, one_f, minus_half_f;$/;"	m	struct:lm::ngram::__anon3::Sanity	file:
mkstemp_and_unlink	util/file.cc	/^mkstemp_and_unlink(char *tmpl) {$/;"	f	namespace:util
mkstemp_and_unlink	util/file.cc	/^mkstemp_and_unlink(char *tmpl)$/;"	f	namespace:util
model_	lm/left.hh	/^    const M &model_;$/;"	m	class:lm::ngram::RuleScore
model_type	lm/binary_format.hh	/^  ModelType model_type;$/;"	m	struct:lm::ngram::FixedWidthParameters
models_	lm/value_build.hh	/^    std::vector<const Model*> models_;$/;"	m	class:lm::ngram::LowerRestBuild
modify_	lm/search_hashed.cc	/^    Middle &modify_;$/;"	m	class:lm::ngram::__anon19::ActivateLowerMiddle	file:
modify_	lm/search_hashed.cc	/^    Weights *modify_;$/;"	m	class:lm::ngram::__anon19::ActivateUnigram	file:
mutex_	util/stream/multi_progress.hh	/^    boost::mutex mutex_;$/;"	m	class:util::stream::MultiProgress
n	lm/builder/adjust_counts.cc	/^      uint64_t n[5];$/;"	m	struct:lm::builder::__anon4::StatCollector::OrderStat	file:
name_guess_	util/file.hh	/^    std::string name_guess_;$/;"	m	class:util::FDException
nan_symbol_	util/double-conversion/double-conversion.h	/^  const char* const nan_symbol_;$/;"	m	class:double_conversion::DoubleToStringConverter
nan_symbol_	util/double-conversion/double-conversion.h	/^  const char* const nan_symbol_;$/;"	m	class:double_conversion::StringToDoubleConverter
neural	lm/neural/wordvecs.cc	/^namespace lm { namespace neural {$/;"	n	namespace:lm	file:
neural	lm/neural/wordvecs.hh	/^namespace neural {$/;"	n	namespace:lm
new_word_	lm/vocab.hh	/^    NewWordAction new_word_;$/;"	m	class:lm::ngram::GrowableVocab
newed_end_	util/fixed_array.hh	/^    T *newed_end_;$/;"	m	class:util::FixedArray
next	lm/trie.hh	/^  uint64_t next;$/;"	m	struct:lm::ngram::trie::UnigramValue
next	lm/value.hh	/^    uint64_t next;$/;"	m	struct:lm::ngram::BackoffValue::TrieUnigramValue
next	lm/value.hh	/^    uint64_t next;$/;"	m	struct:lm::ngram::RestValue::TrieUnigramValue
next_	lm/bhiksha.hh	/^    util::BitsMask next_;$/;"	m	class:lm::ngram::trie::DontBhiksha
next_	util/ersatz_progress.hh	/^    uint64_t current_, next_, complete_;$/;"	m	class:util::ErsatzProgress
next_	util/stream/multi_progress.hh	/^    uint64_t current_, next_;$/;"	m	class:util::stream::WorkerProgress
next_inline_	lm/bhiksha.hh	/^    const util::BitsMask next_inline_;$/;"	m	class:lm::ngram::trie::ArrayBhiksha
next_source_	lm/trie.hh	/^    const BitPacked *next_source_;$/;"	m	class:lm::ngram::trie::BitPackedMiddle
next_use	lm/partial.hh	/^  unsigned char next_use;$/;"	m	struct:lm::ngram::ExtendReturn
ngram	lm/bhiksha.cc	/^namespace ngram {$/;"	n	namespace:lm	file:
ngram	lm/bhiksha.hh	/^namespace ngram {$/;"	n	namespace:lm
ngram	lm/binary_format.cc	/^namespace ngram {$/;"	n	namespace:lm	file:
ngram	lm/binary_format.hh	/^namespace ngram {$/;"	n	namespace:lm
ngram	lm/blank.hh	/^namespace ngram {$/;"	n	namespace:lm
ngram	lm/config.cc	/^namespace ngram {$/;"	n	namespace:lm	file:
ngram	lm/config.hh	/^namespace ngram {$/;"	n	namespace:lm
ngram	lm/filter/format.hh	/^      StringPiece ngram;$/;"	m	struct:lm::InputBuffer::Line
ngram	lm/interpolate/arpa_to_stream.hh	/^namespace ngram {$/;"	n	namespace:lm
ngram	lm/left.hh	/^namespace ngram {$/;"	n	namespace:lm
ngram	lm/model.cc	/^namespace ngram {$/;"	n	namespace:lm	file:
ngram	lm/model.hh	/^namespace ngram {$/;"	n	namespace:lm
ngram	lm/model_type.hh	/^namespace ngram {$/;"	n	namespace:lm
ngram	lm/ngram_query.hh	/^namespace ngram {$/;"	n	namespace:lm
ngram	lm/partial.hh	/^namespace ngram {$/;"	n	namespace:lm
ngram	lm/quantize.cc	/^namespace ngram {$/;"	n	namespace:lm	file:
ngram	lm/quantize.hh	/^namespace ngram {$/;"	n	namespace:lm
ngram	lm/search_hashed.cc	/^namespace ngram {$/;"	n	namespace:lm	file:
ngram	lm/search_hashed.hh	/^namespace ngram {$/;"	n	namespace:lm
ngram	lm/search_trie.cc	/^namespace ngram {$/;"	n	namespace:lm	file:
ngram	lm/search_trie.hh	/^namespace ngram {$/;"	n	namespace:lm
ngram	lm/sizes.cc	/^namespace ngram {$/;"	n	namespace:lm	file:
ngram	lm/sizes.hh	/^namespace lm { namespace ngram {$/;"	n	namespace:lm
ngram	lm/state.hh	/^namespace ngram {$/;"	n	namespace:lm
ngram	lm/trie.cc	/^namespace ngram {$/;"	n	namespace:lm	file:
ngram	lm/trie.hh	/^namespace ngram {$/;"	n	namespace:lm
ngram	lm/trie_sort.cc	/^namespace ngram {$/;"	n	namespace:lm	file:
ngram	lm/trie_sort.hh	/^namespace ngram {$/;"	n	namespace:lm
ngram	lm/value.hh	/^namespace ngram {$/;"	n	namespace:lm
ngram	lm/value_build.cc	/^namespace ngram {$/;"	n	namespace:lm	file:
ngram	lm/value_build.hh	/^namespace ngram {$/;"	n	namespace:lm
ngram	lm/vocab.cc	/^namespace ngram {$/;"	n	namespace:lm	file:
ngram	lm/vocab.hh	/^namespace ngram {$/;"	n	namespace:lm
ngram_length	lm/return.hh	/^  unsigned char ngram_length;$/;"	m	struct:lm::FullScoreReturn
not_found_	lm/virtual_interface.hh	/^    WordIndex begin_sentence_, end_sentence_, not_found_;$/;"	m	class:lm::base::Vocabulary
np	lm/wrappers/nplm.cc	/^namespace np {$/;"	n	namespace:lm	file:
np	lm/wrappers/nplm.hh	/^namespace np {$/;"	n	namespace:lm
nplm	lm/wrappers/nplm.hh	/^namespace nplm {$/;"	n
npos	util/string_piece.cc	/^const size_type StringPiece::npos = size_type(-1);$/;"	m	class:StringPiece	file:
npos	util/string_piece.hh	/^  static const size_type npos;$/;"	m	class:StringPiece
null_context_	lm/facade.hh	/^    State begin_sentence_, null_context_;$/;"	m	class:lm::base::ModelFacade
null_context_memory_	lm/virtual_interface.hh	/^    const void *begin_sentence_memory_, *null_context_memory_;$/;"	m	class:lm::base::Model
null_word_	lm/wrappers/nplm.hh	/^    const lm::WordIndex null_word_;$/;"	m	class:lm::np::Vocabulary
null_word_	lm/wrappers/nplm.hh	/^    lm::WordIndex null_word_;$/;"	m	class:lm::np::Model
offset	util/bit_packing.hh	/^  uint64_t offset;$/;"	m	struct:util::BitAddress
offset	util/parallel_read.cc	/^      uint64_t offset;$/;"	m	struct:util::__anon40::Reader::Request	file:
offset_	util/stream/sort.hh	/^        uint64_t remaining_, offset_;$/;"	m	class:util::stream::MergeQueue::Entry
offset_begin_	lm/bhiksha.hh	/^    const uint64_t *const offset_begin_;$/;"	m	class:lm::ngram::trie::ArrayBhiksha
offset_end_	lm/bhiksha.hh	/^    const uint64_t *const offset_end_;$/;"	m	class:lm::ngram::trie::ArrayBhiksha
offsets_	util/stream/sort.hh	/^    Offsets *offsets_;$/;"	m	class:util::stream::BlockSorter
offsets_	util/stream/sort.hh	/^    Offsets offsets_;$/;"	m	class:util::stream::OwningMergingReader
offsets_	util/stream/sort.hh	/^    Offsets offsets_;$/;"	m	class:util::stream::Sort
offsets_file_	util/stream/sort.hh	/^    scoped_fd offsets_file_;$/;"	m	class:util::stream::Sort
one_f	lm/binary_format.cc	/^  float zero_f, one_f, minus_half_f;$/;"	m	struct:lm::ngram::__anon3::OldSanity	file:
one_f	lm/binary_format.cc	/^  float zero_f, one_f, minus_half_f;$/;"	m	struct:lm::ngram::__anon3::Sanity	file:
one_uint64	lm/binary_format.cc	/^  uint64_t one_uint64;$/;"	m	struct:lm::ngram::__anon3::OldSanity	file:
one_uint64	lm/binary_format.cc	/^  uint64_t one_uint64;$/;"	m	struct:lm::ngram::__anon3::Sanity	file:
one_word_index	lm/binary_format.cc	/^  WordIndex one_word_index, max_word_index, padding_to_8;$/;"	m	struct:lm::ngram::__anon3::Sanity	file:
one_word_index	lm/binary_format.cc	/^  WordIndex one_word_index, max_word_index;$/;"	m	struct:lm::ngram::__anon3::OldSanity	file:
operator !	lm/builder/ngram_stream.hh	/^    bool operator!() const { return !stream_; }$/;"	f	class:lm::builder::NGramStream
operator !	util/stream/block.hh	/^    bool operator!() const { return mem_ == NULL; }$/;"	f	class:util::stream::Block
operator !	util/stream/stream.hh	/^    bool operator!() const { return current_ == NULL; }$/;"	f	class:util::stream::Stream
operator !	util/tokenize_piece.hh	/^    bool operator!() const {$/;"	f	class:util::TokenIter
operator !=	lm/state.hh	/^    bool operator!=(const State &other) const {$/;"	f	class:lm::ngram::State
operator !=	util/proxy_iterator.hh	/^    bool operator!=(const S &other) const { return !(*this == other); }$/;"	f	class:util::ProxyIterator
operator !=	util/string_piece.hh	/^inline bool operator!=(const StringPiece& x, const StringPiece& y) {$/;"	f
operator ()	lm/builder/corpus_count.cc	/^    bool operator()(const WordIndex *first, const WordIndex *second) const {$/;"	f	class:lm::builder::__anon5::DedupeEquals
operator ()	lm/builder/corpus_count.cc	/^    std::size_t operator()(const WordIndex *start) const {$/;"	f	class:lm::builder::__anon5::DedupeHash
operator ()	lm/builder/sort.hh	/^    inline bool operator()(const void *lhs, const void *rhs) const {$/;"	f	class:lm::builder::Comparator
operator ()	lm/builder/sort.hh	/^  bool operator()(void *first_void, const void *second_void, const SuffixOrder &compare) const {$/;"	f	struct:lm::builder::AddCombiner
operator ()	lm/filter/phrase.cc	/^  bool operator()(const Arc *first, const Arc *second) const {$/;"	f	struct:lm::phrase::detail::ArcGreater
operator ()	lm/filter/thread.hh	/^    void operator()(Request request) {$/;"	f	class:lm::FilterWorker
operator ()	lm/filter/thread.hh	/^    void operator()(Request request) {$/;"	f	class:lm::OutputWorker
operator ()	lm/filter/vocab.hh	/^        void operator()(unsigned int index) {$/;"	f	class:lm::vocab::Multiple::Callback
operator ()	lm/search_hashed.cc	/^    void operator()(const WordIndex *vocab_ids, const unsigned int \/*n*\/) {$/;"	f	class:lm::ngram::__anon19::ActivateUnigram
operator ()	lm/search_hashed.cc	/^    void operator()(const WordIndex *vocab_ids, const unsigned int n) {$/;"	f	class:lm::ngram::__anon19::ActivateLowerMiddle
operator ()	lm/trie.cc	/^    Key operator()(uint64_t index) const {$/;"	f	class:lm::ngram::trie::__anon21::KeyAccessor
operator ()	lm/trie_sort.cc	/^  void operator()(std::size_t entry_size, unsigned char \/*order*\/, const void *first, const void * \/*second*\/, FILE *out) const {$/;"	f	struct:lm::ngram::trie::__anon22::FirstCombine
operator ()	lm/trie_sort.cc	/^  void operator()(std::size_t entry_size, unsigned char order, const void *first, const void *second, FILE * \/*out*\/) const {$/;"	f	struct:lm::ngram::trie::__anon22::ThrowCombine
operator ()	lm/trie_sort.hh	/^    bool operator()(const void *first_void, const void *second_void) const {$/;"	f	class:lm::ngram::trie::EntryCompare
operator ()	lm/vocab.hh	/^    void operator()(const StringPiece &word) {$/;"	f	class:lm::ngram::WriteUniqueWords
operator ()	lm/vocab.hh	/^    void operator()(const StringPiece &word) {}$/;"	f	class:lm::ngram::NoOpUniqueWords
operator ()	util/joint_sort.hh	/^    bool operator()(const Proxy &left, const Proxy &right) const {$/;"	f	class:util::detail::LessWrapper
operator ()	util/joint_sort.hh	/^    bool operator()(const Proxy &left, const typename Proxy::value_type &right) const {$/;"	f	class:util::detail::LessWrapper
operator ()	util/joint_sort.hh	/^    bool operator()(const typename Proxy::value_type &left, const Proxy &right) const {$/;"	f	class:util::detail::LessWrapper
operator ()	util/joint_sort.hh	/^    bool operator()(const typename Proxy::value_type &left, const typename Proxy::value_type &right) const {$/;"	f	class:util::detail::LessWrapper
operator ()	util/multi_intersection.hh	/^  bool operator()(const Range &left, const Range &right) const {$/;"	f	struct:util::detail::RangeLessBySize
operator ()	util/parallel_read.cc	/^    void operator()(const Request &request) {$/;"	f	class:util::__anon40::Reader
operator ()	util/probing_hash_table.hh	/^  template <class T> T operator()(T arg) const { return arg; }$/;"	f	struct:util::IdentityHash
operator ()	util/sized_iterator.hh	/^    bool operator()(const Proxy &first, const Proxy &second) const {$/;"	f	class:util::SizedCompare
operator ()	util/sized_iterator.hh	/^    bool operator()(const Proxy &first, const std::string &second) const {$/;"	f	class:util::SizedCompare
operator ()	util/sized_iterator.hh	/^    bool operator()(const std::string &first, const Proxy &second) const {$/;"	f	class:util::SizedCompare
operator ()	util/sized_iterator.hh	/^    bool operator()(const std::string &first, const std::string &second) const {$/;"	f	class:util::SizedCompare
operator ()	util/sorted_uniform.hh	/^    T operator()(const T *in) const { return *in; }$/;"	f	class:util::IdentityAccessor
operator ()	util/stream/chain.hh	/^    template <class Position, class Worker> void operator()(const Position &position, Worker &worker) {$/;"	f	class:util::stream::Thread
operator ()	util/stream/sort.hh	/^        bool operator()(const Entry &first, const Entry &second) const {$/;"	f	class:util::stream::MergeQueue::Greater
operator ()	util/stream/sort.hh	/^  template <class Compare> bool operator()(const void *, const void *, const Compare &) const { $/;"	f	struct:util::stream::NeverCombine
operator ()	util/string_piece_hash.hh	/^  bool operator()(const StringPiece &first, const StringPiece &second) const {$/;"	f	struct:StringPieceCompatibleEquals
operator ()	util/string_piece_hash.hh	/^  size_t operator()(const StringPiece &str) const {$/;"	f	struct:StringPieceCompatibleHash
operator ()	util/thread_pool.hh	/^    void operator()() {$/;"	f	class:util::Worker
operator *	lm/builder/adjust_counts.cc	/^    const NGram &operator*() const { return current_; }$/;"	f	class:lm::builder::__anon4::CollapseStream
operator *	lm/builder/initial_probabilities.cc	/^    NGram &operator*() { return current_; }$/;"	f	class:lm::builder::__anon7::PruneNGramStream
operator *	lm/builder/ngram_stream.hh	/^    NGram &operator*() { return gram_; }$/;"	f	class:lm::builder::NGramStream
operator *	lm/builder/ngram_stream.hh	/^    const NGram &operator*() const { return gram_; }$/;"	f	class:lm::builder::NGramStream
operator *	util/file.hh	/^    int operator*() const { return fd_; }$/;"	f	class:util::scoped_fd
operator *	util/proxy_iterator.hh	/^    Proxy operator*() { return p_; }$/;"	f	class:util::ProxyIterator
operator *	util/proxy_iterator.hh	/^    const Proxy operator*() const { return p_; }$/;"	f	class:util::ProxyIterator
operator *	util/scoped.hh	/^    T &operator*() { return *scoped_base<T, Closer>::p_; }$/;"	f	class:util::scoped
operator *	util/scoped.hh	/^    const T&operator*() const { return *scoped_base<T, Closer>::p_; }$/;"	f	class:util::scoped
operator *	util/stream/chain.hh	/^    Block &operator*() { return current_; }$/;"	f	class:util::stream::Link
operator *	util/stream/chain.hh	/^    const Block &operator*() const { return current_; }$/;"	f	class:util::stream::Link
operator +	util/proxy_iterator.hh	/^    S operator+(std::ptrdiff_t amount) const { S ret(*this); ret += amount; return ret; }$/;"	f	class:util::ProxyIterator
operator +	util/proxy_iterator.hh	/^template <class Proxy> ProxyIterator<Proxy> operator+(std::ptrdiff_t amount, const ProxyIterator<Proxy> &it) {$/;"	f	namespace:util
operator ++	lm/builder/adjust_counts.cc	/^    CollapseStream &operator++() {$/;"	f	class:lm::builder::__anon4::CollapseStream
operator ++	lm/builder/initial_probabilities.cc	/^    PruneNGramStream &operator++() {$/;"	f	class:lm::builder::__anon7::PruneNGramStream
operator ++	lm/builder/ngram_stream.hh	/^    NGramStream &operator++() {$/;"	f	class:lm::builder::NGramStream
operator ++	lm/trie_sort.hh	/^    RecordReader &operator++() {$/;"	f	class:lm::ngram::trie::RecordReader
operator ++	util/ersatz_progress.hh	/^    ErsatzProgress &operator++() {$/;"	f	class:util::ErsatzProgress
operator ++	util/proxy_iterator.hh	/^    S &operator++() { return *this += 1; }$/;"	f	class:util::ProxyIterator
operator ++	util/proxy_iterator.hh	/^    S operator++(int) { S ret(*this); ++*this; return ret; }$/;"	f	class:util::ProxyIterator
operator ++	util/stream/chain.cc	/^Link &Link::operator++() {$/;"	f	class:util::stream::Link
operator ++	util/stream/multi_progress.hh	/^    WorkerProgress &operator++() {$/;"	f	class:util::stream::WorkerProgress
operator ++	util/stream/stream.hh	/^    Stream &operator++() {$/;"	f	class:util::stream::Stream
operator +=	util/ersatz_progress.hh	/^    ErsatzProgress &operator+=(uint64_t amount) {$/;"	f	class:util::ErsatzProgress
operator +=	util/joint_sort.hh	/^    JointIter<KeyIter, ValueIter> &operator+=(std::ptrdiff_t amount) {$/;"	f	class:util::detail::JointIter
operator +=	util/proxy_iterator.hh	/^    S &operator+=(std::ptrdiff_t amount) { I() += amount; return *this; }$/;"	f	class:util::ProxyIterator
operator +=	util/sized_iterator.hh	/^    SizedInnerIterator &operator+=(std::ptrdiff_t amount) {$/;"	f	class:util::SizedInnerIterator
operator +=	util/stream/multi_progress.hh	/^    WorkerProgress &operator+=(uint64_t amount) {$/;"	f	class:util::stream::WorkerProgress
operator -	util/joint_sort.hh	/^    std::ptrdiff_t operator-(const JointIter<KeyIter, ValueIter> &other) const { return key_ - other.key_; }$/;"	f	class:util::detail::JointIter
operator -	util/proxy_iterator.hh	/^    S operator-(std::ptrdiff_t amount) const { S ret(*this); ret -= amount; return ret; }$/;"	f	class:util::ProxyIterator
operator -	util/proxy_iterator.hh	/^    std::ptrdiff_t operator-(const S &other) const { return I() - other.I(); }$/;"	f	class:util::ProxyIterator
operator -	util/sized_iterator.hh	/^    std::ptrdiff_t operator-(const SizedInnerIterator &other) const {$/;"	f	class:util::SizedInnerIterator
operator --	util/proxy_iterator.hh	/^    S &operator--() { return *this -= 1; }$/;"	f	class:util::ProxyIterator
operator --	util/proxy_iterator.hh	/^    S operator--(int) { S ret(*this); --*this; return ret; }$/;"	f	class:util::ProxyIterator
operator -=	util/proxy_iterator.hh	/^    S &operator-=(std::ptrdiff_t amount) { I() += (-amount); return *this; }$/;"	f	class:util::ProxyIterator
operator ->	lm/builder/adjust_counts.cc	/^    const NGram *operator->() const { return &current_; }$/;"	f	class:lm::builder::__anon4::CollapseStream
operator ->	lm/builder/initial_probabilities.cc	/^    NGram *operator->() { return &current_; }$/;"	f	class:lm::builder::__anon7::PruneNGramStream
operator ->	lm/builder/ngram_stream.hh	/^    NGram *operator->() { return &gram_; }$/;"	f	class:lm::builder::NGramStream
operator ->	lm/builder/ngram_stream.hh	/^    const NGram *operator->() const { return &gram_; }$/;"	f	class:lm::builder::NGramStream
operator ->	util/proxy_iterator.hh	/^    Proxy *operator->() { return &p_; }$/;"	f	class:util::ProxyIterator
operator ->	util/proxy_iterator.hh	/^    const Proxy *operator->() const { return &p_; }$/;"	f	class:util::ProxyIterator
operator ->	util/scoped.hh	/^    T *operator->() { return p_; }$/;"	f	class:util::scoped_base
operator ->	util/scoped.hh	/^    const T *operator->() const { return p_; }$/;"	f	class:util::scoped_base
operator ->	util/stream/chain.hh	/^    Block *operator->() { return &current_; }$/;"	f	class:util::stream::Link
operator ->	util/stream/chain.hh	/^    const Block *operator->() const { return &current_; }$/;"	f	class:util::stream::Link
operator <	lm/search_trie.cc	/^  bool operator<(const Gram &other) const {$/;"	f	struct:lm::ngram::trie::__anon20::Gram
operator <	lm/state.hh	/^    bool operator<(const State &other) const {$/;"	f	class:lm::ngram::State
operator <	lm/state.hh	/^  bool operator<(const ChartState &other) const {$/;"	f	struct:lm::ngram::ChartState
operator <	lm/state.hh	/^  bool operator<(const Left &other) const {$/;"	f	struct:lm::ngram::Left
operator <	util/joint_sort.hh	/^    bool operator<(const JointIter<KeyIter, ValueIter> &other) const { return (key_ < other.key_); }$/;"	f	class:util::detail::JointIter
operator <	util/proxy_iterator.hh	/^    bool operator<(const S &other) const { return I() < other.I(); }$/;"	f	class:util::ProxyIterator
operator <	util/sized_iterator.hh	/^    bool operator<(const SizedInnerIterator &other) const {$/;"	f	class:util::SizedInnerIterator
operator <	util/string_piece.hh	/^inline bool operator<(const StringPiece& x, const StringPiece& y) {$/;"	f
operator <<	util/exception.hh	/^template <class Except, class Data> typename Except::template ExceptionTag<Except&>::Identity operator<<(Except &e, const Data &data) {$/;"	f	namespace:util
operator <<	util/fake_ofstream.hh	/^    FakeOFStream &operator<<(StringPiece str) {$/;"	f	class:util::FakeOFStream
operator <<	util/fake_ofstream.hh	/^    FakeOFStream &operator<<(char c) {$/;"	f	class:util::FakeOFStream
operator <<	util/fake_ofstream.hh	/^    FakeOFStream &operator<<(double value) {$/;"	f	class:util::FakeOFStream
operator <<	util/fake_ofstream.hh	/^    FakeOFStream &operator<<(float value) {$/;"	f	class:util::FakeOFStream
operator <<	util/fake_ofstream.hh	/^    FakeOFStream &operator<<(unsigned value) {$/;"	f	class:util::FakeOFStream
operator <<	util/string_piece.hh	/^inline std::ostream& operator<<(std::ostream& o, const StringPiece& piece) {$/;"	f
operator <=	util/proxy_iterator.hh	/^    bool operator<=(const S &other) const { return !(*this > other); }$/;"	f	class:util::ProxyIterator
operator <=	util/string_piece.hh	/^inline bool operator<=(const StringPiece& x, const StringPiece& y) {$/;"	f
operator =	lm/trie_sort.cc	/^    PartialViewProxy &operator=(const PartialViewProxy &from) {$/;"	f	class:lm::ngram::trie::__anon22::PartialViewProxy
operator =	lm/trie_sort.cc	/^    PartialViewProxy &operator=(const std::string &from) {$/;"	f	class:lm::ngram::trie::__anon22::PartialViewProxy
operator =	util/exception.cc	/^Exception &Exception::operator=(const Exception &from) {$/;"	f	class:util::Exception
operator =	util/joint_sort.hh	/^    JointProxy &operator=(const JointProxy &other) {$/;"	f	class:util::detail::JointProxy
operator =	util/joint_sort.hh	/^    JointProxy &operator=(const value_type &other) {$/;"	f	class:util::detail::JointProxy
operator =	util/mmap.cc	/^Rolling &Rolling::operator=(const Rolling &copy_from) {$/;"	f	class:util::Rolling
operator =	util/proxy_iterator.hh	/^    S &operator=(const S &other) {$/;"	f	class:util::ProxyIterator
operator =	util/sized_iterator.hh	/^    SizedProxy &operator=(const SizedProxy &from) {$/;"	f	class:util::SizedProxy
operator =	util/sized_iterator.hh	/^    SizedProxy &operator=(const std::string &from) {$/;"	f	class:util::SizedProxy
operator ==	lm/state.hh	/^    bool operator==(const State &other) const {$/;"	f	class:lm::ngram::State
operator ==	lm/state.hh	/^  bool operator==(const ChartState &other) const {$/;"	f	struct:lm::ngram::ChartState
operator ==	lm/state.hh	/^  bool operator==(const Left &other) const {$/;"	f	struct:lm::ngram::Left
operator ==	util/joint_sort.hh	/^    bool operator==(const JointIter<KeyIter, ValueIter> &other) const { return key_ == other.key_; }$/;"	f	class:util::detail::JointIter
operator ==	util/parallel_read.cc	/^      bool operator==(const Request &other) const {$/;"	f	struct:util::__anon40::Reader::Request
operator ==	util/proxy_iterator.hh	/^    bool operator==(const S &other) const { return I() == other.I(); }$/;"	f	class:util::ProxyIterator
operator ==	util/sized_iterator.hh	/^    bool operator==(const SizedInnerIterator &other) const {$/;"	f	class:util::SizedInnerIterator
operator ==	util/string_piece.hh	/^inline bool operator==(const StringPiece& x, const StringPiece& y) {$/;"	f
operator >	util/proxy_iterator.hh	/^    bool operator>(const S &other) const { return other < *this; }$/;"	f	class:util::ProxyIterator
operator >	util/string_piece.hh	/^inline bool operator>(const StringPiece& x, const StringPiece& y) {$/;"	f
operator >=	util/proxy_iterator.hh	/^    bool operator>=(const S &other) const { return !(*this < other); }$/;"	f	class:util::ProxyIterator
operator >=	util/string_piece.hh	/^inline bool operator>=(const StringPiece& x, const StringPiece& y) {$/;"	f
operator >>	lm/builder/ngram_stream.hh	/^inline util::stream::Chain &operator>>(util::stream::Chain &chain, NGramStream &str) {$/;"	f	namespace:lm::builder
operator >>	lm/builder/pipeline.cc	/^    template <class T> Master &operator>>(const T &worker) {$/;"	f	class:lm::builder::__anon9::Master
operator >>	util/stream/chain.cc	/^Chain &Chain::operator>>(const PWriteAndRecycle &writer) {$/;"	f	class:util::stream::Chain
operator >>	util/stream/chain.cc	/^Chain &Chain::operator>>(const WriteAndRecycle &writer) {$/;"	f	class:util::stream::Chain
operator >>	util/stream/chain.hh	/^    Chain &operator>>(const Recycler &) {$/;"	f	class:util::stream::Chain
operator >>	util/stream/chain.hh	/^    template <class Worker> typename CheckForRun<Worker>::type &operator>>(const Worker &worker) {$/;"	f	class:util::stream::Chain
operator >>	util/stream/chain.hh	/^    template <class Worker> typename CheckForRun<Worker>::type &operator>>(const boost::reference_wrapper<Worker> &worker) {$/;"	f	class:util::stream::Chain
operator >>	util/stream/chain.hh	/^inline Chain &operator>>(Chain &chain, Link &link) {$/;"	f	namespace:util::stream
operator >>	util/stream/multi_stream.hh	/^    Chains &operator>>(const util::stream::Recycler &recycler) {$/;"	f	class:util::stream::Chains
operator >>	util/stream/multi_stream.hh	/^    template <class Worker> typename CheckForRun<Worker>::type &operator>>(const Worker &worker) {$/;"	f	class:util::stream::Chains
operator >>	util/stream/multi_stream.hh	/^    template <class Worker> typename CheckForRun<Worker>::type &operator>>(const boost::reference_wrapper<Worker> &worker) {$/;"	f	class:util::stream::Chains
operator >>	util/stream/multi_stream.hh	/^inline Chains &operator>>(Chains &chains, ChainPositions &positions) {$/;"	f	namespace:util::stream
operator >>	util/stream/multi_stream.hh	/^template <class T> inline Chains &operator>>(Chains &chains, GenericStreams<T> &streams) {$/;"	f	namespace:util::stream
operator >>	util/stream/stream.hh	/^inline Chain &operator>>(Chain &chain, Stream &stream) {$/;"	f	namespace:util::stream
operator []	util/double-conversion/utils.h	/^  T& operator[](int index) const {$/;"	f	class:double_conversion::Vector
operator []	util/fixed_array.hh	/^    T &operator[](std::size_t i) { return begin()[i]; }$/;"	f	class:util::FixedArray
operator []	util/fixed_array.hh	/^    const T &operator[](std::size_t i) const { return begin()[i]; }$/;"	f	class:util::FixedArray
operator []	util/proxy_iterator.hh	/^    Proxy operator[](std::ptrdiff_t amount) const { return *(*this + amount); }$/;"	f	class:util::ProxyIterator
operator []	util/scoped.hh	/^    T &operator[](std::size_t idx) { return scoped<T, scoped_delete_array_forward>::p_[idx]; }$/;"	f	class:util::scoped_array
operator []	util/scoped.hh	/^    const T &operator[](std::size_t idx) const { return scoped<T, scoped_delete_array_forward>::p_[idx]; }$/;"	f	class:util::scoped_array
operator []	util/string_piece.hh	/^  char operator[](size_type i) const { return ptr_[i]; }$/;"	f	class:StringPiece
operator bool	lm/builder/adjust_counts.cc	/^    operator bool() const { return block_; }$/;"	f	class:lm::builder::__anon4::CollapseStream
operator bool	lm/builder/initial_probabilities.cc	/^    operator bool() const {$/;"	f	class:lm::builder::__anon7::PruneNGramStream
operator bool	lm/builder/ngram_stream.hh	/^    operator bool() const { return stream_; }$/;"	f	class:lm::builder::NGramStream
operator bool	lm/trie_sort.hh	/^    operator bool() const { return remains_; }$/;"	f	class:lm::ngram::trie::RecordReader
operator bool	util/stream/block.hh	/^    operator bool() const { return mem_ != NULL; }$/;"	f	class:util::stream::Block
operator bool	util/stream/chain.hh	/^    operator bool() const { return current_; }$/;"	f	class:util::stream::Link
operator bool	util/stream/stream.hh	/^    operator bool() const { return current_ != NULL; }$/;"	f	class:util::stream::Stream
operator bool	util/tokenize_piece.hh	/^    operator bool() const {$/;"	f	class:util::TokenIter
operator std::string	lm/trie_sort.cc	/^    operator std::string() const {$/;"	f	class:lm::ngram::trie::__anon22::PartialViewProxy
operator std::string	util/sized_iterator.hh	/^    operator std::string() const {$/;"	f	class:util::SizedProxy
operator value_type	util/joint_sort.hh	/^    operator value_type() const {$/;"	f	class:util::detail::JointProxy
optarg	util/getopt.c	/^char	*optarg;$/;"	v
opterr	util/getopt.c	/^int	opterr = 1;$/;"	v
optind	util/getopt.c	/^int	optind = 1;$/;"	v
optopt	util/getopt.c	/^int	optopt;$/;"	v
order	lm/binary_format.hh	/^  unsigned char order;$/;"	m	struct:lm::ngram::FixedWidthParameters
order	lm/builder/pipeline.hh	/^  std::size_t order;$/;"	m	struct:lm::builder::PipelineConfig
order_	lm/builder/sort.hh	/^    std::size_t order_;$/;"	m	class:lm::builder::Comparator
order_	lm/search_trie.cc	/^    const unsigned char order_;$/;"	m	class:lm::ngram::trie::__anon20::WriteEntries	file:
order_	lm/trie_sort.hh	/^    unsigned char order_;$/;"	m	class:lm::ngram::trie::EntryCompare
order_	lm/virtual_interface.hh	/^    unsigned char order_;$/;"	m	class:lm::base::Model
ordering_	lm/filter/thread.hh	/^    std::deque<Request> ordering_;$/;"	m	class:lm::OutputWorker
orders_	lm/builder/adjust_counts.cc	/^    std::vector<OrderStat> orders_;$/;"	m	class:lm::builder::__anon4::StatCollector	file:
original_base_	lm/bhiksha.hh	/^    void *original_base_;$/;"	m	class:lm::ngram::trie::ArrayBhiksha
out_	lm/filter/vocab.hh	/^        Output &out_;$/;"	m	class:lm::vocab::Multiple::Callback
out_	lm/left.hh	/^    ChartState *out_;$/;"	m	class:lm::ngram::RuleScore
out_	util/ersatz_progress.hh	/^    std::ostream *out_;$/;"	m	class:util::ErsatzProgress
out_	util/stream/chain.hh	/^    PCQueue<Block> *in_, *out_;$/;"	m	class:util::stream::ChainPosition
out_	util/stream/chain.hh	/^    PCQueue<Block> *in_, *out_;$/;"	m	class:util::stream::Link
out_fd_	lm/builder/print.hh	/^    util::scoped_fd out_fd_;$/;"	m	class:lm::builder::PrintARPA
out_offsets_	util/stream/sort.hh	/^    Offsets *out_offsets_;$/;"	m	class:util::stream::MergingReader
output_	lm/builder/interpolate.cc	/^    Output output_;$/;"	m	class:lm::builder::__anon8::Callback	file:
output_	lm/filter/format.hh	/^    Output &output_;$/;"	m	class:lm::DispatchInput
output_	lm/filter/thread.hh	/^    Output &output_;$/;"	m	class:lm::OutputWorker
output_	lm/filter/thread.hh	/^    OutputBuffer output_;$/;"	m	class:lm::ThreadBatch
output_	lm/filter/thread.hh	/^    util::ThreadPool<OutputWorker<Batch, RealOutput> > output_;$/;"	m	class:lm::Controller
output_q	lm/builder/pipeline.hh	/^  bool output_q;$/;"	m	struct:lm::builder::PipelineConfig
output_q_	lm/builder/interpolate.hh	/^    bool output_q_;$/;"	m	class:lm::builder::Interpolate
output_sum_	util/stream/sort.hh	/^    uint64_t output_sum_;$/;"	m	class:util::stream::Offsets
outputs_	lm/builder/output.hh	/^    boost::ptr_vector<OutputHook> outputs_[NUMBER_OF_HOOKS];$/;"	m	class:lm::builder::Output
overwrite	lm/builder/adjust_counts.hh	/^  std::vector<Discount> overwrite;$/;"	m	struct:lm::builder::DiscountConfig
own_	util/stream/io.hh	/^    bool own_;$/;"	m	class:util::stream::PRead
p_	util/proxy_iterator.hh	/^    Proxy p_;$/;"	m	class:util::ProxyIterator
p_	util/scoped.hh	/^    T *p_;$/;"	m	class:util::scoped_base
padding_to_8	lm/binary_format.cc	/^  WordIndex one_word_index, max_word_index, padding_to_8;$/;"	m	struct:lm::ngram::__anon3::Sanity	file:
page_	util/file_piece.hh	/^    const uint64_t page_;$/;"	m	class:util::FilePiece
parent_	util/stream/multi_progress.hh	/^    MultiProgress *parent_;$/;"	m	class:util::stream::WorkerProgress
phrase	lm/filter/phrase.cc	/^namespace phrase {$/;"	n	namespace:lm	file:
phrase	lm/filter/phrase.hh	/^      std::vector<unsigned int> substring, left, right, phrase;$/;"	m	struct:lm::phrase::Substrings::SentenceRelation
phrase	lm/filter/phrase.hh	/^namespace phrase {$/;"	n	namespace:lm
pointer	util/proxy_iterator.hh	/^    typedef ProxyIterator<Proxy> * pointer;$/;"	t	class:util::ProxyIterator
pointer	util/string_piece.hh	/^  typedef const char* pointer;$/;"	t	class:StringPiece
pointer_bhiksha_bits	lm/config.hh	/^  uint8_t pointer_bhiksha_bits;$/;"	m	struct:lm::ngram::Config
pointers	lm/state.hh	/^  uint64_t pointers[KENLM_MAX_ORDER - 1];$/;"	m	struct:lm::ngram::Left
poison_	util/thread_pool.hh	/^    Request poison_;$/;"	m	class:util::ThreadPool
poison_	util/thread_pool.hh	/^    const Request poison_;$/;"	m	class:util::Worker
poisoned_	util/stream/chain.hh	/^    bool poisoned_;$/;"	m	class:util::stream::Link
position	util/double-conversion/utils.h	/^  int position() const {$/;"	f	class:double_conversion::StringBuilder
position_	util/double-conversion/utils.h	/^  int position_;$/;"	m	class:double_conversion::StringBuilder
position_	util/file_piece.hh	/^    const char *position_, *last_space_, *position_end_;$/;"	m	class:util::FilePiece
position_end_	util/file_piece.hh	/^    const char *position_, *last_space_, *position_end_;$/;"	m	class:util::FilePiece
positive_log_probability	lm/config.hh	/^  WarningAction positive_log_probability;$/;"	m	struct:lm::ngram::Config
post	util/pcqueue.hh	/^    void post() {$/;"	f	class:util::Semaphore
prob	lm/builder/ngram.hh	/^  float prob;  \/\/ Uninterpolated probability.$/;"	m	struct:lm::builder::Uninterpolated
prob	lm/return.hh	/^  float prob;$/;"	m	struct:lm::FullScoreReturn
prob	lm/weights.hh	/^  float prob;$/;"	m	struct:lm::Prob
prob	lm/weights.hh	/^  float prob;$/;"	m	struct:lm::ProbBackoff
prob	lm/weights.hh	/^  float prob;$/;"	m	struct:lm::RestWeights
prob_	lm/left.hh	/^    float prob_;$/;"	m	class:lm::ngram::RuleScore
prob_bits	lm/config.hh	/^  uint8_t prob_bits, backoff_bits;$/;"	m	struct:lm::ngram::Config
prob_bits_	lm/quantize.hh	/^    uint8_t prob_bits_, backoff_bits_;$/;"	m	class:lm::ngram::SeparatelyQuantize
probing_multiplier	lm/binary_format.hh	/^  float probing_multiplier;$/;"	m	struct:lm::ngram::FixedWidthParameters
probing_multiplier	lm/config.hh	/^  float probing_multiplier;$/;"	m	struct:lm::ngram::Config
probs_	lm/builder/interpolate.cc	/^    std::vector<float> probs_;$/;"	m	class:lm::builder::__anon8::Callback	file:
produce_at_	util/pcqueue.hh	/^  T *produce_at_;$/;"	m	class:util::PCQueue
produce_at_mutex_	util/pcqueue.hh	/^  boost::mutex produce_at_mutex_;$/;"	m	class:util::PCQueue
progress_	util/file_piece.hh	/^    ErsatzProgress progress_;$/;"	m	class:util::FilePiece
progress_	util/stream/chain.hh	/^    MultiProgress progress_;$/;"	m	class:util::stream::Chain
progress_	util/stream/chain.hh	/^    WorkerProgress progress_;$/;"	m	class:util::stream::ChainPosition
progress_	util/stream/chain.hh	/^    WorkerProgress progress_;$/;"	m	class:util::stream::Link
prune_threshold_	lm/builder/adjust_counts.cc	/^    uint64_t prune_threshold_;$/;"	m	class:lm::builder::__anon4::CollapseStream	file:
prune_thresholds	lm/builder/pipeline.hh	/^  std::vector<uint64_t> prune_thresholds; \/\/mjd$/;"	m	struct:lm::builder::PipelineConfig
prune_thresholds_	lm/builder/adjust_counts.hh	/^    const std::vector<uint64_t> &prune_thresholds_; $/;"	m	class:lm::builder::AdjustCounts
prune_thresholds_	lm/builder/interpolate.cc	/^    const std::vector<uint64_t>& prune_thresholds_;$/;"	m	class:lm::builder::__anon8::Callback	file:
prune_thresholds_	lm/builder/interpolate.hh	/^    const std::vector<uint64_t> prune_thresholds_;$/;"	m	class:lm::builder::Interpolate
prune_vocab	lm/builder/pipeline.hh	/^  bool prune_vocab;$/;"	m	struct:lm::builder::PipelineConfig
prune_vocab_	lm/builder/interpolate.cc	/^    bool prune_vocab_;$/;"	m	class:lm::builder::__anon8::Callback	file:
prune_vocab_	lm/builder/interpolate.hh	/^    bool prune_vocab_;$/;"	m	class:lm::builder::Interpolate
prune_vocab_file	lm/builder/pipeline.hh	/^  std::string prune_vocab_file;$/;"	m	struct:lm::builder::PipelineConfig
prune_vocab_filename_	lm/builder/corpus_count.hh	/^    const std::string& prune_vocab_filename_; $/;"	m	class:lm::builder::CorpusCount
prune_words_	lm/builder/adjust_counts.cc	/^    const std::vector<bool>& prune_words_;$/;"	m	class:lm::builder::__anon4::CollapseStream	file:
prune_words_	lm/builder/adjust_counts.hh	/^    const std::vector<bool> &prune_words_;$/;"	m	class:lm::builder::AdjustCounts
prune_words_	lm/builder/corpus_count.hh	/^    std::vector<bool>& prune_words_;$/;"	m	class:lm::builder::CorpusCount
pruning_	lm/builder/initial_probabilities.cc	/^      bool pruning_;$/;"	m	class:lm::builder::__anon7::OnlyGamma	file:
pruning_	lm/builder/initial_probabilities.cc	/^    bool pruning_;$/;"	m	class:lm::builder::__anon7::AddRight	file:
ptr_	util/mmap.hh	/^    void *ptr_;$/;"	m	class:util::Rolling
ptr_	util/sized_iterator.hh	/^    uint8_t *ptr_;$/;"	m	class:util::SizedInnerIterator
ptr_	util/string_piece.hh	/^  const char*   ptr_;$/;"	m	class:StringPiece
push_back	lm/builder/sort.hh	/^    void push_back(util::stream::Chain &chain, const util::stream::SortConfig &config, const Compare &compare) {$/;"	f	class:lm::builder::Sorts
push_back	util/fixed_array.hh	/^    template <class C> void push_back(const C &c) {$/;"	f	class:util::FixedArray
q_delta_	lm/builder/interpolate.cc	/^    std::vector<float> q_delta_;$/;"	m	class:lm::builder::__anon8::OutputQ	file:
quant_	lm/search_trie.cc	/^    const Quant &quant_;$/;"	m	class:lm::ngram::trie::__anon20::WriteEntries	file:
quant_	lm/search_trie.hh	/^    Quant quant_;$/;"	m	class:lm::ngram::trie::TrieSearch
quant_bits_	lm/trie.hh	/^    uint8_t quant_bits_;$/;"	m	class:lm::ngram::trie::BitPackedMiddle
queue_	util/stream/sort.hh	/^    Queue queue_;$/;"	m	class:util::stream::MergeQueue
queue_size_	lm/filter/thread.hh	/^    const size_t queue_size_;$/;"	m	class:lm::Controller
queues_	util/stream/chain.hh	/^    boost::ptr_vector<PCQueue<Block> > queues_;$/;"	m	class:util::stream::Chain
raw_amount_	util/read_compressed.hh	/^    uint64_t raw_amount_;$/;"	m	class:util::ReadCompressed
rbegin	util/string_piece.hh	/^  const_reverse_iterator rbegin() const {$/;"	f	class:StringPiece
read_backoffs	lm/builder/pipeline.hh	/^  util::stream::ChainConfig read_backoffs;$/;"	m	struct:lm::builder::PipelineConfig
read_bound_	util/mmap.hh	/^    std::size_t read_bound_;$/;"	m	class:util::Rolling
reference	util/proxy_iterator.hh	/^    typedef Proxy reference;$/;"	t	class:util::ProxyIterator
reference	util/string_piece.hh	/^  typedef const char& reference;$/;"	t	class:StringPiece
release	util/file.hh	/^    int release() {$/;"	f	class:util::scoped_fd
release	util/scoped.hh	/^    T *release() {$/;"	f	class:util::scoped_base
remain_	util/read_compressed.cc	/^    uint8_t *remain_;$/;"	m	class:util::__anon41::UncompressedWithHeader	file:
remaining_	util/stream/sort.hh	/^        uint64_t remaining_, offset_;$/;"	m	class:util::stream::MergeQueue::Entry
remains_	lm/trie_sort.hh	/^    bool remains_;$/;"	m	class:lm::ngram::trie::RecordReader
remove_prefix	util/string_piece.hh	/^  void remove_prefix(size_type n) {$/;"	f	class:StringPiece
remove_suffix	util/string_piece.hh	/^  void remove_suffix(size_type n) {$/;"	f	class:StringPiece
rend	util/string_piece.hh	/^  const_reverse_iterator rend() const {$/;"	f	class:StringPiece
reset	util/file.hh	/^    void reset(int to = -1) {$/;"	f	class:util::scoped_fd
reset	util/mmap.cc	/^void scoped_memory::reset(void *data, std::size_t size, Alloc source) {$/;"	f	class:util::scoped_memory
reset	util/mmap.hh	/^    void reset() { reset(NULL, 0, NONE_ALLOCATED); }$/;"	f	class:util::scoped_memory
reset	util/mmap.hh	/^    void reset() {$/;"	f	class:util::scoped_mmap
reset	util/mmap.hh	/^    void reset(void *data, std::size_t size) {$/;"	f	class:util::scoped_mmap
reset	util/scoped.hh	/^    void reset(T *p = NULL) {$/;"	f	class:util::scoped_base
rest	lm/return.hh	/^  float rest;$/;"	m	struct:lm::FullScoreReturn
rest	lm/weights.hh	/^  float rest;$/;"	m	struct:lm::RestWeights
rest_function	lm/config.hh	/^  RestFunction rest_function;$/;"	m	struct:lm::ngram::Config
rest_lower_files	lm/config.hh	/^  std::vector<std::string> rest_lower_files;$/;"	m	struct:lm::ngram::Config
reverse_iterator	util/string_piece.hh	/^  typedef std::reverse_iterator<iterator> reverse_iterator;$/;"	t	class:StringPiece
rfind	util/string_piece.cc	/^size_type StringPiece::rfind(char c, size_type pos) const {$/;"	f	class:StringPiece
rfind	util/string_piece.cc	/^size_type StringPiece::rfind(const StringPiece& s, size_type pos) const {$/;"	f	class:StringPiece
right	lm/filter/phrase.hh	/^      std::vector<unsigned int> substring, left, right, phrase;$/;"	m	struct:lm::phrase::Substrings::SentenceRelation
right	lm/state.hh	/^  State right;$/;"	m	struct:lm::ngram::ChartState
run	util/stream/sort.hh	/^      uint64_t run;$/;"	m	struct:util::stream::Offsets::Entry
saw_unk_	lm/vocab.hh	/^    bool saw_unk_;$/;"	m	class:lm::ngram::ProbingVocabulary
saw_unk_	lm/vocab.hh	/^    bool saw_unk_;$/;"	m	class:lm::ngram::SortedVocabulary
scoped	util/scoped.hh	/^    explicit scoped(T *p = NULL) : scoped_base<T, Closer>(p) {}$/;"	f	class:util::scoped
scoped	util/scoped.hh	/^    explicit scoped(void *p = NULL) : scoped_base<void, Closer>(p) {}$/;"	f	class:util::scoped
scoped	util/scoped.hh	/^template <class Closer> class scoped<void, Closer> : public scoped_base<void, Closer> {$/;"	c	namespace:util
scoped	util/scoped.hh	/^template <class T, class Closer> class scoped : public scoped_base<T, Closer> {$/;"	c	namespace:util
scoped_FILE	util/file.hh	/^typedef scoped<std::FILE, scoped_FILE_closer> scoped_FILE;$/;"	t	namespace:util
scoped_FILE_closer	util/file.hh	/^struct scoped_FILE_closer {$/;"	s	namespace:util
scoped_array	util/scoped.hh	/^    explicit scoped_array(T *p = NULL) : scoped<T, scoped_delete_array_forward>(p) {}$/;"	f	class:util::scoped_array
scoped_array	util/scoped.hh	/^template <class T> class scoped_array : public scoped<T, scoped_delete_array_forward> {$/;"	c	namespace:util
scoped_base	util/scoped.hh	/^    explicit scoped_base(T *p = NULL) : p_(p) {}$/;"	f	class:util::scoped_base
scoped_base	util/scoped.hh	/^template <class T, class Closer> class scoped_base {$/;"	c	namespace:util
scoped_c	util/scoped.hh	/^    explicit scoped_c(T *p = NULL) : scoped<T, scoped_c_forward<T, clean> >(p) {}$/;"	f	class:util::scoped_c
scoped_c	util/scoped.hh	/^template <class T, void (*clean)(T*)> class scoped_c : public scoped<T, scoped_c_forward<T, clean> > {$/;"	c	namespace:util
scoped_c_forward	util/scoped.hh	/^template <class T, void (*clean)(T*)> struct scoped_c_forward {$/;"	s	namespace:util
scoped_delete_array_forward	util/scoped.hh	/^struct scoped_delete_array_forward {$/;"	s	namespace:util
scoped_delete_forward	util/scoped.hh	/^struct scoped_delete_forward {$/;"	s	namespace:util
scoped_fd	util/file.hh	/^    explicit scoped_fd(int fd) : fd_(fd) {}$/;"	f	class:util::scoped_fd
scoped_fd	util/file.hh	/^    scoped_fd() : fd_(-1) {}$/;"	f	class:util::scoped_fd
scoped_fd	util/file.hh	/^class scoped_fd {$/;"	c	namespace:util
scoped_malloc	util/scoped.hh	/^    explicit scoped_malloc(void *p = NULL) : scoped_c<void, std::free>(p) {}$/;"	f	class:util::scoped_malloc
scoped_malloc	util/scoped.hh	/^class scoped_malloc : public scoped_c<void, std::free> {$/;"	c	namespace:util
scoped_memory	util/mmap.hh	/^    scoped_memory() : data_(NULL), size_(0), source_(NONE_ALLOCATED) {}$/;"	f	class:util::scoped_memory
scoped_memory	util/mmap.hh	/^    scoped_memory(void *data, std::size_t size, Alloc source) $/;"	f	class:util::scoped_memory
scoped_memory	util/mmap.hh	/^class scoped_memory {$/;"	c	namespace:util
scoped_mmap	util/mmap.hh	/^    scoped_mmap() : data_((void*)-1), size_(0) {}$/;"	f	class:util::scoped_mmap
scoped_mmap	util/mmap.hh	/^    scoped_mmap(void *data, std::size_t size) : data_(data), size_(size) {}$/;"	f	class:util::scoped_mmap
scoped_mmap	util/mmap.hh	/^class scoped_mmap {$/;"	c	namespace:util
scoped_ptr	util/scoped.hh	/^    explicit scoped_ptr(T *p = NULL) : scoped<T, scoped_delete_forward>(p) {}$/;"	f	class:util::scoped_ptr
scoped_ptr	util/scoped.hh	/^template <class T> class scoped_ptr : public scoped<T, scoped_delete_forward> {$/;"	c	namespace:util
search_	lm/model.hh	/^    Search search_;$/;"	m	class:lm::ngram::detail::GenericModel
search_version	lm/binary_format.hh	/^  unsigned int search_version;$/;"	m	struct:lm::ngram::FixedWidthParameters
sentence_marker_missing	lm/config.hh	/^  WarningAction sentence_marker_missing;$/;"	m	struct:lm::ngram::Config
sequence_	lm/filter/thread.hh	/^    uint64_t sequence_;$/;"	m	class:lm::Controller
sequence_	lm/filter/thread.hh	/^    uint64_t sequence_;$/;"	m	class:lm::ThreadBatch
set	util/string_piece.hh	/^  void set(const char* data, size_type len) { ptr_ = data; length_ = len; }$/;"	f	class:StringPiece
set	util/string_piece.hh	/^  void set(const char* str) {$/;"	f	class:StringPiece
set	util/string_piece.hh	/^  void set(const void* data, size_type len) {$/;"	f	class:StringPiece
set_e	util/double-conversion/diy-fp.h	/^  void set_e(int new_value) { e_ = new_value; }$/;"	f	class:double_conversion::DiyFp
set_f	util/double-conversion/diy-fp.h	/^  void set_f(uint64_t new_value) { f_ = new_value; }$/;"	f	class:double_conversion::DiyFp
sets_	lm/filter/vocab.hh	/^    std::vector<boost::iterator_range<const unsigned int*> > sets_;$/;"	m	class:lm::vocab::Multiple
sets_	lm/filter/vocab.hh	/^    std::vector<boost::iterator_range<const unsigned int*> > sets_;$/;"	m	class:lm::vocab::Union
show_progress	lm/config.hh	/^  bool show_progress;$/;"	m	struct:lm::ngram::Config
significand	util/double-conversion/cached-powers.cc	/^  uint64_t significand;$/;"	m	struct:double_conversion::CachedPower	file:
size	util/double-conversion/utils.h	/^  int size() const { return buffer_.length(); }$/;"	f	class:double_conversion::StringBuilder
size	util/fixed_array.hh	/^    std::size_t size() const { return end() - begin(); }$/;"	f	class:util::FixedArray
size	util/mmap.hh	/^    std::size_t size() const { return size_; }$/;"	f	class:util::scoped_memory
size	util/mmap.hh	/^    std::size_t size() const { return size_; }$/;"	f	class:util::scoped_mmap
size	util/parallel_read.cc	/^      std::size_t size;$/;"	m	struct:util::__anon40::Reader::Request	file:
size	util/string_piece.hh	/^  size_type size() const { return length_; }$/;"	f	class:StringPiece
size_	lm/builder/corpus_count.cc	/^    const std::size_t size_;$/;"	m	class:lm::builder::__anon5::DedupeEquals	file:
size_	lm/builder/corpus_count.cc	/^    const std::size_t size_;$/;"	m	class:lm::builder::__anon5::DedupeHash	file:
size_	util/mmap.hh	/^    std::size_t size_;$/;"	m	class:util::scoped_memory
size_	util/mmap.hh	/^    std::size_t size_;$/;"	m	class:util::scoped_mmap
size_	util/sized_iterator.hh	/^    std::size_t size_;$/;"	m	class:util::SizedInnerIterator
size_type	util/string_piece.cc	/^typedef StringPiece::size_type size_type;$/;"	t	file:
size_type	util/string_piece.hh	/^  typedef size_t size_type;$/;"	t	class:StringPiece
sort	lm/builder/pipeline.hh	/^  util::stream::SortConfig sort;$/;"	m	struct:lm::builder::PipelineConfig
source	util/mmap.hh	/^    Alloc source() const { return source_; }$/;"	f	class:util::scoped_memory
source_	util/mmap.hh	/^    Alloc source_;$/;"	m	class:util::scoped_memory
sri_	lm/search_trie.cc	/^    SRISucks &sri_;$/;"	m	class:lm::ngram::trie::__anon20::FindBlanks	file:
sri_	lm/search_trie.cc	/^    SRISucks &sri_;$/;"	m	class:lm::ngram::trie::__anon20::WriteEntries	file:
start	util/double-conversion/utils.h	/^  T* start() const { return start_; }$/;"	f	class:double_conversion::Vector
start_	util/double-conversion/utils.h	/^  T* start_;$/;"	m	class:double_conversion::Vector
started_	util/usage.cc	/^    Wall started_;$/;"	m	class:util::__anon45::RecordStart	file:
starts_with	util/string_piece.hh	/^  bool starts_with(const StringPiece& x) const {$/;"	f	class:StringPiece
starts_with	util/string_piece.hh	/^inline bool starts_with(const StringPiece& longer, const StringPiece& prefix) {$/;"	f
state_size_	lm/virtual_interface.hh	/^    const size_t state_size_;$/;"	m	class:lm::base::Model
stone_	util/stream/multi_progress.hh	/^    unsigned char stone_;$/;"	m	class:util::stream::WorkerProgress
stones_written_	util/ersatz_progress.hh	/^    unsigned char stones_written_;$/;"	m	class:util::ErsatzProgress
storage_	util/pcqueue.hh	/^  boost::scoped_array<T> storage_;$/;"	m	class:util::PCQueue
stream	lm/builder/adjust_counts.hh	/^namespace util { namespace stream { class ChainPositions; } }$/;"	n	namespace:util
stream	lm/builder/corpus_count.hh	/^namespace stream {$/;"	n	namespace:util
stream	lm/builder/initial_probabilities.hh	/^namespace util { namespace stream { class Chains; } }$/;"	n	namespace:util
stream	lm/builder/output.hh	/^namespace util { namespace stream { class Chains; class ChainPositions; } }$/;"	n	namespace:util
stream	lm/interpolate/arpa_to_stream.hh	/^namespace util { namespace stream { class ChainPositions; } }$/;"	n	namespace:util
stream	util/stream/block.hh	/^namespace stream {$/;"	n	namespace:util
stream	util/stream/chain.cc	/^namespace stream {$/;"	n	namespace:util	file:
stream	util/stream/chain.hh	/^namespace stream {$/;"	n	namespace:util
stream	util/stream/config.hh	/^namespace util { namespace stream {$/;"	n	namespace:util
stream	util/stream/io.cc	/^namespace stream {$/;"	n	namespace:util	file:
stream	util/stream/io.hh	/^namespace stream {$/;"	n	namespace:util
stream	util/stream/line_input.cc	/^namespace util { namespace stream {$/;"	n	namespace:util	file:
stream	util/stream/line_input.hh	/^namespace util {namespace stream {$/;"	n	namespace:util
stream	util/stream/multi_progress.cc	/^namespace util { namespace stream {$/;"	n	namespace:util	file:
stream	util/stream/multi_progress.hh	/^namespace util { namespace stream {$/;"	n	namespace:util
stream	util/stream/multi_stream.hh	/^namespace util { namespace stream {$/;"	n	namespace:util
stream	util/stream/sort.hh	/^namespace stream {$/;"	n	namespace:util
stream	util/stream/stream.hh	/^namespace stream {$/;"	n	namespace:util
stream_	lm/builder/ngram_stream.hh	/^    util::stream::Stream stream_;$/;"	m	class:lm::builder::NGramStream
stream_	util/exception.hh	/^    std::stringstream stream_;$/;"	m	class:util::Exception
stream_	util/read_compressed.cc	/^    bz_stream stream_;$/;"	m	class:util::__anon41::BZip	file:
stream_	util/read_compressed.cc	/^    lzma_stream stream_;$/;"	m	class:util::__anon41::XZip	file:
stream_	util/read_compressed.cc	/^    std::istream &stream_;$/;"	m	class:util::__anon41::IStreamReader	file:
stream_	util/read_compressed.cc	/^    z_stream stream_;$/;"	m	class:util::__anon41::GZip	file:
string_backing_	lm/vocab.hh	/^    util::Pool string_backing_;$/;"	m	class:lm::ngram::SortedVocabulary
strings_to_enumerate_	lm/vocab.hh	/^    std::vector<StringPiece> strings_to_enumerate_;$/;"	m	class:lm::ngram::SortedVocabulary
substr	util/string_piece.cc	/^StringPiece StringPiece::substr(size_type pos, size_type n) const {$/;"	f	class:StringPiece
substring	lm/filter/phrase.hh	/^      std::vector<unsigned int> substring, left, right, phrase;$/;"	m	struct:lm::phrase::Substrings::SentenceRelation
substrings_	lm/filter/phrase.hh	/^    const Substrings &substrings_;$/;"	m	class:lm::phrase::detail::ConditionCommon
swap	lm/trie_sort.cc	/^    friend void swap(PartialViewProxy first, PartialViewProxy second) {$/;"	f	class:lm::ngram::trie::__anon22::PartialViewProxy
swap	util/joint_sort.hh	/^    friend void swap(JointIter &first, JointIter &second) {$/;"	f	class:util::detail::JointIter
swap	util/joint_sort.hh	/^    friend void swap(JointProxy<KeyIter, ValueIter> first, JointProxy<KeyIter, ValueIter> second) {$/;"	f	class:util::detail::JointProxy
swap	util/sized_iterator.hh	/^    friend void swap(SizedInnerIterator &first, SizedInnerIterator &second) {$/;"	f	class:util::SizedInnerIterator
swap	util/sized_iterator.hh	/^    friend void swap(SizedProxy first, SizedProxy second) {$/;"	f	class:util::SizedProxy
systems	lm/filter/format.hh	/^      std::vector<size_t> systems;$/;"	m	struct:lm::MultipleOutputBuffer::Annotated
table_	lm/filter/phrase.hh	/^    Table table_;$/;"	m	class:lm::phrase::Substrings
table_	lm/quantize.hh	/^        const Bins *table_;$/;"	m	class:lm::ngram::SeparatelyQuantize::LongestPointer
tables_	lm/quantize.hh	/^    Bins tables_[KENLM_MAX_ORDER - 1][2];$/;"	m	class:lm::ngram::SeparatelyQuantize
task_	util/pcqueue.hh	/^    task_t task_;$/;"	m	class:util::Semaphore
temp_prefix	util/stream/config.hh	/^  std::string temp_prefix;$/;"	m	struct:util::stream::SortConfig
temporary_directory_prefix	lm/config.hh	/^  std::string temporary_directory_prefix;$/;"	m	struct:lm::ngram::Config
text_	util/exception.hh	/^    mutable std::string text_;$/;"	m	class:util::Exception
thread_	util/stream/chain.hh	/^    boost::thread thread_;$/;"	m	class:util::stream::Thread
thread_	util/thread_pool.hh	/^    boost::thread thread_;$/;"	m	class:util::Worker
threads_	util/stream/chain.hh	/^    boost::ptr_vector<Thread> threads_;$/;"	m	class:util::stream::Chain
threads_	util/stream/multi_stream.hh	/^    boost::ptr_vector<util::stream::Thread> threads_;$/;"	m	class:util::stream::Chains
threshold_	util/probing_hash_table.hh	/^    std::size_t threshold_;$/;"	m	class:util::AutoProbing
to	util/parallel_read.cc	/^      void *to;$/;"	m	struct:util::__anon40::Reader::Request	file:
to_	lm/builder/print.hh	/^    int to_;$/;"	m	class:lm::builder::Print
to_	lm/search_hashed.hh	/^    const float *to_;$/;"	m	class:lm::ngram::detail::LongestPointer
to_	lm/trie.hh	/^    const ProbBackoff *to_;$/;"	m	class:lm::ngram::trie::UnigramPointer
to_	lm/value.hh	/^    const Weights *to_;$/;"	m	class:lm::ngram::GenericProbingProxy
to_	lm/value.hh	/^    const Weights *to_;$/;"	m	class:lm::ngram::GenericTrieUnigramProxy
to_read_	lm/filter/thread.hh	/^    util::PCQueue<Batch*> to_read_;$/;"	m	class:lm::Controller
token_count	lm/builder/header_info.hh	/^  uint64_t token_count;$/;"	m	struct:HeaderInfo
token_count_	lm/builder/corpus_count.hh	/^    uint64_t &token_count_;$/;"	m	class:lm::builder::CorpusCount
total_bits_	lm/trie.cc	/^    const uint8_t key_bits_, total_bits_;$/;"	m	class:lm::ngram::trie::__anon21::KeyAccessor	file:
total_bits_	lm/trie.hh	/^    uint8_t total_bits_;$/;"	m	class:lm::ngram::trie::BitPacked
total_memory	util/stream/config.hh	/^  std::size_t total_memory;$/;"	m	struct:util::stream::ChainConfig
total_memory	util/stream/config.hh	/^  std::size_t total_memory;$/;"	m	struct:util::stream::SortConfig
total_memory_	util/stream/sort.hh	/^    std::size_t total_memory_;$/;"	m	class:util::stream::MergingReader
total_order_	lm/search_trie.cc	/^    const unsigned char total_order_;$/;"	m	class:lm::ngram::trie::__anon20::BlankManager	file:
total_size_	util/file_piece.hh	/^    const uint64_t total_size_;$/;"	m	class:util::FilePiece
trie	lm/bhiksha.cc	/^namespace trie {$/;"	n	namespace:lm::ngram	file:
trie	lm/bhiksha.hh	/^namespace trie {$/;"	n	namespace:lm::ngram
trie	lm/search_trie.cc	/^namespace trie {$/;"	n	namespace:lm::ngram	file:
trie	lm/search_trie.hh	/^namespace trie {$/;"	n	namespace:lm::ngram
trie	lm/trie.cc	/^namespace trie {$/;"	n	namespace:lm::ngram	file:
trie	lm/trie.hh	/^namespace trie {$/;"	n	namespace:lm::ngram
trie	lm/trie_sort.cc	/^namespace trie {$/;"	n	namespace:lm::ngram	file:
trie	lm/trie_sort.hh	/^namespace trie {$/;"	n	namespace:lm::ngram
type	util/stream/chain.hh	/^      typedef Chain type;$/;"	t	struct:util::stream::Chain::CheckForRun
type	util/stream/multi_stream.hh	/^      typedef Chains type;$/;"	t	struct:util::stream::Chains::CheckForRun
type_	lm/builder/output.hh	/^    const HookType type_;$/;"	m	class:lm::builder::OutputHook
type_count_	lm/builder/corpus_count.hh	/^    WordIndex &type_count_;$/;"	m	class:lm::builder::CorpusCount
uint16_t	util/double-conversion/utils.h	/^typedef unsigned short uint16_t;  \/\/ NOLINT$/;"	t
uint32_t	util/double-conversion/utils.h	/^typedef unsigned int uint32_t;$/;"	t
uint32_to_float	util/double-conversion/ieee.h	/^static float uint32_to_float(uint32_t d32) { return BitCast<float>(d32); }$/;"	f	namespace:double_conversion
uint64_t	util/double-conversion/utils.h	/^typedef unsigned __int64 uint64_t;$/;"	t
uint64_to_double	util/double-conversion/ieee.h	/^static double uint64_to_double(uint64_t d64) { return BitCast<double>(d64); }$/;"	f	namespace:double_conversion
uint8_t	util/double-conversion/utils.h	/^typedef unsigned char uint8_t;$/;"	t
ullAvailExtendedVirtual	util/usage.cc	/^  DWORDLONG ullAvailExtendedVirtual;$/;"	m	struct:__anon44	file:
ullAvailPageFile	util/usage.cc	/^  DWORDLONG ullAvailPageFile;$/;"	m	struct:__anon44	file:
ullAvailPhys	util/usage.cc	/^  DWORDLONG ullAvailPhys;$/;"	m	struct:__anon44	file:
ullAvailVirtual	util/usage.cc	/^  DWORDLONG ullAvailVirtual;$/;"	m	struct:__anon44	file:
ullTotalPageFile	util/usage.cc	/^  DWORDLONG ullTotalPageFile;$/;"	m	struct:__anon44	file:
ullTotalPhys	util/usage.cc	/^  DWORDLONG ullTotalPhys;$/;"	m	struct:__anon44	file:
ullTotalVirtual	util/usage.cc	/^  DWORDLONG ullTotalVirtual;$/;"	m	struct:__anon44	file:
uniform_prob_	lm/builder/interpolate.hh	/^    float uniform_prob_;$/;"	m	class:lm::builder::Interpolate
unigram_	lm/search_hashed.hh	/^        typename Value::Weights *unigram_;$/;"	m	class:lm::ngram::detail::HashedSearch::Unigram
unigram_	lm/search_hashed.hh	/^    Unigram unigram_;$/;"	m	class:lm::ngram::detail::HashedSearch
unigram_	lm/search_trie.hh	/^    Unigram unigram_;$/;"	m	class:lm::ngram::trie::TrieSearch
unigram_	lm/trie.hh	/^    UnigramValue *unigram_;$/;"	m	class:lm::ngram::trie::Unigram
unigram_	lm/trie_sort.hh	/^    util::scoped_fd unigram_;$/;"	m	class:lm::ngram::trie::SortedFiles
unigrams_	lm/search_trie.cc	/^    UnigramValue *const unigrams_;$/;"	m	class:lm::ngram::trie::__anon20::WriteEntries	file:
unigrams_	lm/search_trie.cc	/^    const ProbBackoff *unigrams_;$/;"	m	class:lm::ngram::trie::__anon20::FindBlanks	file:
unigrams_	lm/value_build.hh	/^    std::vector<float> unigrams_;$/;"	m	class:lm::ngram::LowerRestBuild
uninterp	lm/builder/ngram.hh	/^  Uninterpolated uninterp;$/;"	m	union:lm::builder::Payload
unknown_missing	lm/config.hh	/^  WarningAction unknown_missing;$/;"	m	struct:lm::ngram::Config
unknown_missing_logprob	lm/config.hh	/^  float unknown_missing_logprob;$/;"	m	struct:lm::ngram::Config
used_	util/pcqueue.hh	/^  Semaphore used_;$/;"	m	class:util::PCQueue
used_digits_	util/double-conversion/bignum.h	/^  int used_digits_;$/;"	m	class:double_conversion::Bignum
util	lm/builder/adjust_counts.hh	/^namespace util { namespace stream { class ChainPositions; } }$/;"	n
util	lm/builder/corpus_count.hh	/^namespace util {$/;"	n
util	lm/builder/initial_probabilities.hh	/^namespace util { namespace stream { class Chains; } }$/;"	n
util	lm/builder/output.hh	/^namespace util { namespace stream { class Chains; class ChainPositions; } }$/;"	n
util	lm/filter/arpa_io.hh	/^namespace util { class FilePiece; }$/;"	n
util	lm/interpolate/arpa_to_stream.hh	/^namespace util { namespace stream { class ChainPositions; } }$/;"	n
util	lm/model.hh	/^namespace util { class FilePiece; }$/;"	n
util	lm/neural/wordvecs.hh	/^namespace util { class FilePiece; }$/;"	n
util	lm/search_hashed.hh	/^namespace util { class FilePiece; }$/;"	n
util	lm/trie_sort.hh	/^namespace util {$/;"	n
util	util/bit_packing.cc	/^namespace util {$/;"	n	file:
util	util/bit_packing.hh	/^namespace util {$/;"	n
util	util/ersatz_progress.cc	/^namespace util {$/;"	n	file:
util	util/ersatz_progress.hh	/^namespace util {$/;"	n
util	util/exception.cc	/^namespace util {$/;"	n	file:
util	util/exception.hh	/^namespace util {$/;"	n
util	util/fake_ofstream.hh	/^namespace util {$/;"	n
util	util/file.cc	/^namespace util {$/;"	n	file:
util	util/file.hh	/^namespace util {$/;"	n
util	util/file_piece.cc	/^namespace util {$/;"	n	file:
util	util/file_piece.hh	/^namespace util {$/;"	n
util	util/fixed_array.hh	/^namespace util {$/;"	n
util	util/joint_sort.hh	/^namespace util {$/;"	n
util	util/mmap.cc	/^namespace util {$/;"	n	file:
util	util/mmap.hh	/^namespace util {$/;"	n
util	util/multi_intersection.hh	/^namespace util {$/;"	n
util	util/murmur_hash.cc	/^namespace util {$/;"	n	file:
util	util/murmur_hash.hh	/^namespace util {$/;"	n
util	util/parallel_read.cc	/^namespace util {$/;"	n	file:
util	util/parallel_read.hh	/^namespace util {$/;"	n
util	util/pcqueue.hh	/^namespace util {$/;"	n
util	util/pool.cc	/^namespace util {$/;"	n	file:
util	util/pool.hh	/^namespace util {$/;"	n
util	util/probing_hash_table.hh	/^namespace util {$/;"	n
util	util/proxy_iterator.hh	/^namespace util {$/;"	n
util	util/read_compressed.cc	/^namespace util {$/;"	n	file:
util	util/read_compressed.hh	/^namespace util {$/;"	n
util	util/scoped.cc	/^namespace util {$/;"	n	file:
util	util/scoped.hh	/^namespace util {$/;"	n
util	util/sized_iterator.hh	/^namespace util {$/;"	n
util	util/sorted_uniform.hh	/^namespace util {$/;"	n
util	util/stream/block.hh	/^namespace util {$/;"	n
util	util/stream/chain.cc	/^namespace util {$/;"	n	file:
util	util/stream/chain.hh	/^namespace util {$/;"	n
util	util/stream/config.hh	/^namespace util { namespace stream {$/;"	n
util	util/stream/io.cc	/^namespace util {$/;"	n	file:
util	util/stream/io.hh	/^namespace util {$/;"	n
util	util/stream/line_input.cc	/^namespace util { namespace stream {$/;"	n	file:
util	util/stream/line_input.hh	/^namespace util {namespace stream {$/;"	n
util	util/stream/multi_progress.cc	/^namespace util { namespace stream {$/;"	n	file:
util	util/stream/multi_progress.hh	/^namespace util { namespace stream {$/;"	n
util	util/stream/multi_stream.hh	/^namespace util { namespace stream {$/;"	n
util	util/stream/sort.hh	/^namespace util {$/;"	n
util	util/stream/stream.hh	/^namespace util {$/;"	n
util	util/thread_pool.hh	/^namespace util {$/;"	n
util	util/tokenize_piece.hh	/^namespace util {$/;"	n
util	util/usage.cc	/^namespace util {$/;"	n	file:
util	util/usage.hh	/^namespace util {$/;"	n
valid_size_	util/stream/block.hh	/^    std::size_t valid_size_;$/;"	m	class:util::stream::Block
value	lm/builder/corpus_count.cc	/^  lm::WordIndex value;$/;"	m	struct:lm::builder::__anon5::VocabEntry	file:
value	lm/search_hashed.hh	/^  Prob value;$/;"	m	struct:lm::ngram::detail::ProbEntry
value	lm/value.hh	/^    ProbBackoff value;$/;"	m	struct:lm::ngram::BackoffValue::ProbingEntry
value	lm/value.hh	/^    Value value;$/;"	m	struct:lm::ngram::RestValue::ProbingEntry
value	lm/vocab.hh	/^  WordIndex value;$/;"	m	struct:lm::ngram::ProbingVocabularyEntry
value	util/double-conversion/ieee.h	/^  double value() const { return uint64_to_double(d64_); }$/;"	f	class:double_conversion::Double
value	util/double-conversion/ieee.h	/^  float value() const { return uint32_to_float(d32_); }$/;"	f	class:double_conversion::Single
value	util/joint_sort.hh	/^      typename std::iterator_traits<ValueIter>::value_type value;$/;"	m	struct:util::detail::JointProxy::__anon36
value_	util/joint_sort.hh	/^    ValueIter value_;$/;"	m	class:util::detail::JointIter
value_type	lm/trie_sort.cc	/^    typedef std::string value_type;$/;"	t	class:lm::ngram::trie::__anon22::PartialViewProxy	file:
value_type	util/joint_sort.hh	/^    } value_type;$/;"	t	class:util::detail::JointProxy	typeref:struct:util::detail::JointProxy::__anon36
value_type	util/proxy_iterator.hh	/^    typedef typename Proxy::value_type value_type;$/;"	t	class:util::ProxyIterator
value_type	util/sized_iterator.hh	/^    typedef std::string value_type;$/;"	t	class:util::SizedProxy
value_type	util/string_piece.hh	/^  typedef char value_type;$/;"	t	class:StringPiece
values_	lm/search_trie.cc	/^    std::vector<float> values_[KENLM_MAX_ORDER - 1];$/;"	m	class:lm::ngram::trie::__anon20::SRISucks	file:
vecs_	lm/neural/wordvecs.hh	/^    Storage vecs_;$/;"	m	class:lm::neural::WordVecs
verbose_header_	lm/builder/print.hh	/^    bool verbose_header_;$/;"	m	class:lm::builder::PrintARPA
version	lm/vocab.cc	/^  unsigned int version;$/;"	m	struct:lm::ngram::detail::ProbingVocabularyHeader	file:
vertices_	lm/filter/phrase.hh	/^    std::vector<detail::Vertex> vertices_;$/;"	m	class:lm::phrase::detail::ConditionCommon
vocab	lm/filter/vocab.cc	/^namespace vocab {$/;"	n	namespace:lm	file:
vocab	lm/filter/vocab.hh	/^namespace vocab {$/;"	n	namespace:lm
vocab_	lm/builder/print.hh	/^    const VocabReconstitute &vocab_;$/;"	m	class:lm::builder::Print
vocab_	lm/filter/vocab.hh	/^    const Words &vocab_;$/;"	m	class:lm::vocab::Single
vocab_	lm/interpolate/arpa_to_stream.hh	/^    ngram::GrowableVocab<ngram::WriteUniqueWords> &vocab_;$/;"	m	class:lm::interpolate::ARPAToStream
vocab_	lm/model.hh	/^    VocabularyT vocab_;$/;"	m	class:lm::ngram::detail::GenericModel
vocab_	lm/neural/wordvecs.hh	/^    ngram::ProbingVocabulary vocab_;$/;"	m	class:lm::neural::WordVecs
vocab_	lm/wrappers/nplm.hh	/^    Vocabulary vocab_;$/;"	m	class:lm::np::Model
vocab_	lm/wrappers/nplm.hh	/^    const nplm::vocabulary &vocab_;$/;"	m	class:lm::np::Vocabulary
vocab_backing_	lm/neural/wordvecs.hh	/^    util::scoped_malloc vocab_backing_;$/;"	m	class:lm::neural::WordVecs
vocab_estimate	lm/builder/pipeline.hh	/^  lm::WordIndex vocab_estimate;$/;"	m	struct:lm::builder::PipelineConfig
vocab_fd_	lm/builder/output.hh	/^    int vocab_fd_;$/;"	m	class:lm::builder::Output
vocab_file	lm/builder/pipeline.hh	/^  std::string vocab_file;$/;"	m	struct:lm::builder::PipelineConfig
vocab_pad_	lm/binary_format.hh	/^    std::size_t header_size_, vocab_size_, vocab_pad_;$/;"	m	class:lm::ngram::BinaryFormat
vocab_size_	lm/binary_format.hh	/^    std::size_t header_size_, vocab_size_, vocab_pad_;$/;"	m	class:lm::ngram::BinaryFormat
vocab_size_for_unk	lm/builder/pipeline.hh	/^  uint64_t vocab_size_for_unk;$/;"	m	struct:lm::builder::PipelineConfig
vocab_string_offset_	lm/binary_format.hh	/^    uint64_t vocab_string_offset_;$/;"	m	class:lm::ngram::BinaryFormat
vocab_write_	lm/builder/corpus_count.hh	/^    int vocab_write_;$/;"	m	class:lm::builder::CorpusCount
vocabs_	lm/filter/vocab.hh	/^    const Words &vocabs_;$/;"	m	class:lm::vocab::Multiple
vocabs_	lm/filter/vocab.hh	/^    const Words &vocabs_;$/;"	m	class:lm::vocab::Union
wait	util/pcqueue.hh	/^    void wait() {$/;"	f	class:util::Semaphore
weights	lm/trie.hh	/^  ProbBackoff weights;$/;"	m	struct:lm::ngram::trie::UnigramValue
weights	lm/value.hh	/^    Weights weights;$/;"	m	struct:lm::ngram::BackoffValue::TrieUnigramValue
weights	lm/value.hh	/^    Weights weights;$/;"	m	struct:lm::ngram::RestValue::TrieUnigramValue
what	util/exception.cc	/^const char *Exception::what() const throw() {$/;"	f	class:util::Exception
word_bits_	lm/trie.hh	/^    uint8_t word_bits_;$/;"	m	class:lm::ngram::trie::BitPacked
word_list_	lm/vocab.hh	/^    util::FakeOFStream word_list_;$/;"	m	class:lm::ngram::WriteUniqueWords
word_mask_	lm/trie.hh	/^    uint64_t word_mask_;$/;"	m	class:lm::ngram::trie::BitPacked
wordmemcmp	util/string_piece.hh	/^  static int wordmemcmp(const char* p, const char* p2, size_type N) {$/;"	f	class:StringPiece
words	lm/state.hh	/^    WordIndex words[KENLM_MAX_ORDER - 1];$/;"	m	class:lm::ngram::State
words	lm/wrappers/nplm.hh	/^  WordIndex words[NPLM_MAX_ORDER - 1];$/;"	m	struct:lm::np::State
workers_	util/thread_pool.hh	/^    boost::ptr_vector<Worker<Handler> > workers_;$/;"	m	class:util::ThreadPool
write_method	lm/config.hh	/^  WriteMethod write_method;$/;"	m	struct:lm::ngram::Config
write_method_	lm/binary_format.hh	/^    const Config::WriteMethod write_method_;$/;"	m	class:lm::ngram::BinaryFormat
write_mmap	lm/config.hh	/^  const char *write_mmap;$/;"	m	struct:lm::ngram::Config
write_mmap_	lm/binary_format.hh	/^    const char *write_mmap_;$/;"	m	class:lm::ngram::BinaryFormat
write_to_	lm/bhiksha.hh	/^    uint64_t *write_to_;$/;"	m	class:lm::ngram::trie::ArrayBhiksha
zero_f	lm/binary_format.cc	/^  float zero_f, one_f, minus_half_f;$/;"	m	struct:lm::ngram::__anon3::OldSanity	file:
zero_f	lm/binary_format.cc	/^  float zero_f, one_f, minus_half_f;$/;"	m	struct:lm::ngram::__anon3::Sanity	file:
~ARPAInputException	lm/filter/arpa_io.cc	/^ARPAInputException::~ARPAInputException() throw() {}$/;"	f	class:lm::ARPAInputException
~ARPAOutputException	lm/filter/arpa_io.cc	/^ARPAOutputException::~ARPAOutputException() throw() {}$/;"	f	class:lm::ARPAOutputException
~BZException	util/read_compressed.cc	/^BZException::~BZException() throw() {}$/;"	f	class:util::BZException
~BZip	util/read_compressed.cc	/^    ~BZip() {$/;"	f	class:util::__anon41::BZip
~BadDiscountException	lm/builder/adjust_counts.cc	/^BadDiscountException::~BadDiscountException() throw() {}$/;"	f	class:lm::builder::BadDiscountException
~BadSortConfig	util/stream/sort.hh	/^    ~BadSortConfig() throw() {}$/;"	f	class:util::stream::BadSortConfig
~Callback	lm/builder/interpolate.cc	/^    ~Callback() {$/;"	f	class:lm::builder::__anon8::Callback
~Chain	util/stream/chain.cc	/^Chain::~Chain() {$/;"	f	class:util::stream::Chain
~ChainConfigException	util/stream/chain.cc	/^ChainConfigException::~ChainConfigException() throw() {}$/;"	f	class:util::stream::ChainConfigException
~Closer	lm/trie_sort.cc	/^    ~Closer() {$/;"	f	class:lm::ngram::trie::__anon23::Closer
~CompressedException	util/read_compressed.cc	/^CompressedException::~CompressedException() throw() {}$/;"	f	class:util::CompressedException
~ConditionCommon	lm/filter/phrase.cc	/^ConditionCommon::~ConditionCommon() {}$/;"	f	class:lm::phrase::detail::ConditionCommon
~ConfigException	lm/lm_exception.cc	/^ConfigException::~ConfigException() throw() {}$/;"	f	class:lm::ConfigException
~EndOfFileException	util/file.cc	/^EndOfFileException::~EndOfFileException() throw() {}$/;"	f	class:util::EndOfFileException
~EnumerateVocab	lm/enumerate_vocab.hh	/^    virtual ~EnumerateVocab() {}$/;"	f	class:lm::EnumerateVocab
~ErrnoException	util/exception.cc	/^ErrnoException::~ErrnoException() throw() {}$/;"	f	class:util::ErrnoException
~ErsatzProgress	util/ersatz_progress.cc	/^ErsatzProgress::~ErsatzProgress() {$/;"	f	class:util::ErsatzProgress
~Exception	util/exception.cc	/^Exception::~Exception() throw() {}$/;"	f	class:util::Exception
~FDException	util/file.cc	/^FDException::~FDException() throw() {}$/;"	f	class:util::FDException
~FakeOFStream	util/fake_ofstream.hh	/^    ~FakeOFStream() {$/;"	f	class:util::FakeOFStream
~FileOpenException	util/exception.hh	/^    ~FileOpenException() throw() {}$/;"	f	class:util::FileOpenException
~FilePiece	util/file_piece.cc	/^FilePiece::~FilePiece() {}$/;"	f	class:util::FilePiece
~FixedArray	util/fixed_array.hh	/^    ~FixedArray() { clear(); }$/;"	f	class:util::FixedArray
~FormatLoadException	lm/lm_exception.cc	/^FormatLoadException::~FormatLoadException() throw() {}$/;"	f	class:lm::FormatLoadException
~GZException	util/read_compressed.cc	/^GZException::~GZException() throw() {}$/;"	f	class:util::GZException
~GZip	util/read_compressed.cc	/^    ~GZip() {$/;"	f	class:util::__anon41::GZip
~Link	util/stream/chain.cc	/^Link::~Link() {$/;"	f	class:util::stream::Link
~LoadException	lm/lm_exception.cc	/^LoadException::~LoadException() throw() {}$/;"	f	class:lm::LoadException
~LowerRestBuild	lm/value_build.cc	/^template <class Model> LowerRestBuild<Model>::~LowerRestBuild() {$/;"	f	class:lm::ngram::LowerRestBuild
~MallocException	util/scoped.cc	/^MallocException::~MallocException() throw() {}$/;"	f	class:util::MallocException
~Model	lm/virtual_interface.cc	/^Model::~Model() {}$/;"	f	class:lm::base::Model
~Model	lm/wrappers/nplm.cc	/^Model::~Model() {}$/;"	f	class:lm::np::Model
~ModelFacade	lm/facade.hh	/^    virtual ~ModelFacade() {}$/;"	f	class:lm::base::ModelFacade
~MultiProgress	util/stream/multi_progress.cc	/^MultiProgress::~MultiProgress() {$/;"	f	class:util::stream::MultiProgress
~OutOfTokens	util/tokenize_piece.hh	/^    ~OutOfTokens() throw() {}$/;"	f	class:util::OutOfTokens
~OutputHook	lm/builder/output.cc	/^OutputHook::~OutputHook() {}$/;"	f	class:lm::builder::OutputHook
~OverflowException	util/exception.cc	/^OverflowException::~OverflowException() throw() {}$/;"	f	class:util::OverflowException
~ParseNumberException	util/file_piece.hh	/^    ~ParseNumberException() throw() {}$/;"	f	class:util::ParseNumberException
~Pool	util/pool.cc	/^Pool::~Pool() {$/;"	f	class:util::Pool
~ProbingSizeException	util/probing_hash_table.hh	/^    ~ProbingSizeException() throw() {}$/;"	f	class:util::ProbingSizeException
~ReadBase	util/read_compressed.cc	/^    virtual ~ReadBase() {}$/;"	f	class:util::ReadBase
~ReadCompressed	util/read_compressed.cc	/^ReadCompressed::~ReadCompressed() {}$/;"	f	class:util::ReadCompressed
~ReadSizeException	util/stream/io.cc	/^ReadSizeException::~ReadSizeException() throw() {}$/;"	f	class:util::stream::ReadSizeException
~Semaphore	util/pcqueue.hh	/^    ~Semaphore() {$/;"	f	class:util::Semaphore
~SpecialWordMissingException	lm/lm_exception.cc	/^SpecialWordMissingException::~SpecialWordMissingException() throw() {}$/;"	f	class:lm::SpecialWordMissingException
~StatCollector	lm/builder/adjust_counts.cc	/^    ~StatCollector() {}$/;"	f	class:lm::builder::__anon4::StatCollector
~StringBuilder	util/double-conversion/utils.h	/^  ~StringBuilder() { if (!is_finalized()) Finalize(); }$/;"	f	class:double_conversion::StringBuilder
~Thread	util/stream/chain.cc	/^Thread::~Thread() {$/;"	f	class:util::stream::Thread
~ThreadPool	util/thread_pool.hh	/^    ~ThreadPool() {$/;"	f	class:util::ThreadPool
~TrieSearch	lm/search_trie.hh	/^    ~TrieSearch() { FreeMiddles(); }$/;"	f	class:lm::ngram::trie::TrieSearch
~VocabLoadException	lm/lm_exception.cc	/^VocabLoadException::~VocabLoadException() throw() {}$/;"	f	class:lm::VocabLoadException
~Vocabulary	lm/virtual_interface.cc	/^Vocabulary::~Vocabulary() {}$/;"	f	class:lm::base::Vocabulary
~Vocabulary	lm/wrappers/nplm.cc	/^Vocabulary::~Vocabulary() {}$/;"	f	class:lm::np::Vocabulary
~WriteWordsWrapper	lm/vocab.cc	/^WriteWordsWrapper::~WriteWordsWrapper() {}$/;"	f	class:lm::ngram::WriteWordsWrapper
~Writer	lm/builder/corpus_count.cc	/^    ~Writer() {$/;"	f	class:lm::builder::__anon5::Writer
~XZException	util/read_compressed.cc	/^XZException::~XZException() throw() {}$/;"	f	class:util::XZException
~XZip	util/read_compressed.cc	/^    ~XZip() {$/;"	f	class:util::__anon41::XZip
~scoped_base	util/scoped.hh	/^    ~scoped_base() { Closer::Close(p_); }$/;"	f	class:util::scoped_base
~scoped_fd	util/file.cc	/^scoped_fd::~scoped_fd() {$/;"	f	class:util::scoped_fd
~scoped_memory	util/mmap.hh	/^    ~scoped_memory() { reset(); }$/;"	f	class:util::scoped_memory
~scoped_mmap	util/mmap.cc	/^scoped_mmap::~scoped_mmap() {$/;"	f	class:util::scoped_mmap
